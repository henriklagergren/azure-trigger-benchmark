"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiKey = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Application Insights API key.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleInsights = new azure.appinsights.Insights("exampleInsights", {
 *     location: "West Europe",
 *     resourceGroupName: exampleResourceGroup.name,
 *     applicationType: "web",
 * });
 * const readTelemetry = new azure.appinsights.ApiKey("readTelemetry", {
 *     applicationInsightsId: exampleInsights.id,
 *     readPermissions: [
 *         "aggregate",
 *         "api",
 *         "draft",
 *         "extendqueries",
 *         "search",
 *     ],
 * });
 * const writeAnnotations = new azure.appinsights.ApiKey("writeAnnotations", {
 *     applicationInsightsId: exampleInsights.id,
 *     writePermissions: ["annotations"],
 * });
 * const authenticateSdkControlChannelApiKey = new azure.appinsights.ApiKey("authenticateSdkControlChannelApiKey", {
 *     applicationInsightsId: exampleInsights.id,
 *     readPermissions: ["agentconfig"],
 * });
 * const fullPermissions = new azure.appinsights.ApiKey("fullPermissions", {
 *     applicationInsightsId: exampleInsights.id,
 *     readPermissions: [
 *         "agentconfig",
 *         "aggregate",
 *         "api",
 *         "draft",
 *         "extendqueries",
 *         "search",
 *     ],
 *     writePermissions: ["annotations"],
 * });
 * export const readTelemetryApiKey = readTelemetry.apiKey;
 * export const writeAnnotationsApiKey = writeAnnotations.apiKey;
 * export const authenticateSdkControlChannel = authenticateSdkControlChannelApiKey.apiKey;
 * export const fullPermissionsApiKey = fullPermissions.apiKey;
 * ```
 *
 * ## Import
 *
 * Application Insights API keys can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appinsights/apiKey:ApiKey my_key /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Insights/components/instance1/apiKeys/00000000-0000-0000-0000-000000000000
 * ```
 */
class ApiKey extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["apiKey"] = state ? state.apiKey : undefined;
            inputs["applicationInsightsId"] = state ? state.applicationInsightsId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["readPermissions"] = state ? state.readPermissions : undefined;
            inputs["writePermissions"] = state ? state.writePermissions : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.applicationInsightsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationInsightsId'");
            }
            inputs["applicationInsightsId"] = args ? args.applicationInsightsId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["readPermissions"] = args ? args.readPermissions : undefined;
            inputs["writePermissions"] = args ? args.writePermissions : undefined;
            inputs["apiKey"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(ApiKey.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ApiKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ApiKey(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ApiKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiKey.__pulumiType;
    }
}
exports.ApiKey = ApiKey;
/** @internal */
ApiKey.__pulumiType = 'azure:appinsights/apiKey:ApiKey';
//# sourceMappingURL=apiKey.js.map