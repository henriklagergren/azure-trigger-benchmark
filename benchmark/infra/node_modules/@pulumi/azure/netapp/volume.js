"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Volume = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a NetApp Volume.
 *
 * ## NetApp Volume Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("exampleVirtualNetwork", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     addressSpaces: ["10.0.0.0/16"],
 * });
 * const exampleSubnet = new azure.network.Subnet("exampleSubnet", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 *     delegations: [{
 *         name: "netapp",
 *         serviceDelegation: {
 *             name: "Microsoft.Netapp/volumes",
 *             actions: [
 *                 "Microsoft.Network/networkinterfaces/*",
 *                 "Microsoft.Network/virtualNetworks/subnets/join/action",
 *             ],
 *         },
 *     }],
 * });
 * const exampleAccount = new azure.netapp.Account("exampleAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const examplePool = new azure.netapp.Pool("examplePool", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     accountName: exampleAccount.name,
 *     serviceLevel: "Premium",
 *     sizeInTb: 4,
 * });
 * const exampleVolume = new azure.netapp.Volume("exampleVolume", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     accountName: exampleAccount.name,
 *     poolName: examplePool.name,
 *     volumePath: "my-unique-file-path",
 *     serviceLevel: "Premium",
 *     subnetId: exampleSubnet.id,
 *     protocols: ["NFSv4.1"],
 *     securityStyle: "Unix",
 *     storageQuotaInGb: 100,
 *     snapshotDirectoryVisible: false,
 *     createFromSnapshotResourceId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1/snapshots/snapshot1",
 *     dataProtectionReplication: {
 *         endpointType: "dst",
 *         remoteVolumeLocation: azurerm_resource_group.example_primary.location,
 *         remoteVolumeResourceId: azurerm_netapp_volume.example_primary.id,
 *         replicationFrequency: "10minutes",
 *     },
 *     dataProtectionSnapshotPolicy: {
 *         snapshotPolicyId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1/snapshotPolicies/snapshotpolicy1",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * NetApp Volumes can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:netapp/volume:Volume example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.NetApp/netAppAccounts/account1/capacityPools/pool1/volumes/volume1
 * ```
 */
class Volume extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["accountName"] = state ? state.accountName : undefined;
            inputs["createFromSnapshotResourceId"] = state ? state.createFromSnapshotResourceId : undefined;
            inputs["dataProtectionReplication"] = state ? state.dataProtectionReplication : undefined;
            inputs["dataProtectionSnapshotPolicy"] = state ? state.dataProtectionSnapshotPolicy : undefined;
            inputs["exportPolicyRules"] = state ? state.exportPolicyRules : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["mountIpAddresses"] = state ? state.mountIpAddresses : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["poolName"] = state ? state.poolName : undefined;
            inputs["protocols"] = state ? state.protocols : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["securityStyle"] = state ? state.securityStyle : undefined;
            inputs["serviceLevel"] = state ? state.serviceLevel : undefined;
            inputs["snapshotDirectoryVisible"] = state ? state.snapshotDirectoryVisible : undefined;
            inputs["storageQuotaInGb"] = state ? state.storageQuotaInGb : undefined;
            inputs["subnetId"] = state ? state.subnetId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["throughputInMibps"] = state ? state.throughputInMibps : undefined;
            inputs["volumePath"] = state ? state.volumePath : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.poolName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'poolName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serviceLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceLevel'");
            }
            if ((!args || args.storageQuotaInGb === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageQuotaInGb'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.volumePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'volumePath'");
            }
            inputs["accountName"] = args ? args.accountName : undefined;
            inputs["createFromSnapshotResourceId"] = args ? args.createFromSnapshotResourceId : undefined;
            inputs["dataProtectionReplication"] = args ? args.dataProtectionReplication : undefined;
            inputs["dataProtectionSnapshotPolicy"] = args ? args.dataProtectionSnapshotPolicy : undefined;
            inputs["exportPolicyRules"] = args ? args.exportPolicyRules : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["poolName"] = args ? args.poolName : undefined;
            inputs["protocols"] = args ? args.protocols : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["securityStyle"] = args ? args.securityStyle : undefined;
            inputs["serviceLevel"] = args ? args.serviceLevel : undefined;
            inputs["snapshotDirectoryVisible"] = args ? args.snapshotDirectoryVisible : undefined;
            inputs["storageQuotaInGb"] = args ? args.storageQuotaInGb : undefined;
            inputs["subnetId"] = args ? args.subnetId : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["throughputInMibps"] = args ? args.throughputInMibps : undefined;
            inputs["volumePath"] = args ? args.volumePath : undefined;
            inputs["mountIpAddresses"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Volume.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Volume(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }
}
exports.Volume = Volume;
/** @internal */
Volume.__pulumiType = 'azure:netapp/volume:Volume';
//# sourceMappingURL=volume.js.map