"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Order = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Databox Edge Order.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleDevice = new azure.databoxedge.Device("exampleDevice", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     skuName: "EdgeP_Base-Standard",
 * });
 * const exampleOrder = new azure.databoxedge.Order("exampleOrder", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     deviceName: exampleDevice.name,
 *     contact: {
 *         companyName: "Contoso Corporation",
 *         name: "Bart",
 *         emailLists: ["bart@example.com"],
 *         phone: "(800) 867-5309",
 *     },
 *     shipmentAddress: {
 *         addresses: ["740 Evergreen Terrace"],
 *         city: "Springfield",
 *         country: "United States",
 *         postalCode: "97403",
 *         state: "OR",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Databox Edge Orders can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:databoxedge/order:Order example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/device1/orders/default
 * ```
 */
class Order extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["contact"] = state ? state.contact : undefined;
            inputs["deviceName"] = state ? state.deviceName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["returnTrackings"] = state ? state.returnTrackings : undefined;
            inputs["serialNumber"] = state ? state.serialNumber : undefined;
            inputs["shipmentAddress"] = state ? state.shipmentAddress : undefined;
            inputs["shipmentHistories"] = state ? state.shipmentHistories : undefined;
            inputs["shipmentTrackings"] = state ? state.shipmentTrackings : undefined;
            inputs["statuses"] = state ? state.statuses : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.contact === undefined) && !opts.urn) {
                throw new Error("Missing required property 'contact'");
            }
            if ((!args || args.deviceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deviceName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.shipmentAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shipmentAddress'");
            }
            inputs["contact"] = args ? args.contact : undefined;
            inputs["deviceName"] = args ? args.deviceName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["shipmentAddress"] = args ? args.shipmentAddress : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["returnTrackings"] = undefined /*out*/;
            inputs["serialNumber"] = undefined /*out*/;
            inputs["shipmentHistories"] = undefined /*out*/;
            inputs["shipmentTrackings"] = undefined /*out*/;
            inputs["statuses"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Order.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Order resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Order(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Order.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Order.__pulumiType;
    }
}
exports.Order = Order;
/** @internal */
Order.__pulumiType = 'azure:databoxedge/order:Order';
//# sourceMappingURL=order.js.map