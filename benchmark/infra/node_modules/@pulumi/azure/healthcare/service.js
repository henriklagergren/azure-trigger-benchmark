"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Service = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Healthcare Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.healthcare.Service("example", {
 *     accessPolicyObjectIds: ["xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"],
 *     authenticationConfiguration: {
 *         audience: "https://azurehealthcareapis.com/",
 *         authority: "https://login.microsoftonline.com/$%7Bdata.azurerm_client_config.current.tenant_id%7D",
 *         smartProxyEnabled: true,
 *     },
 *     corsConfiguration: {
 *         allowCredentials: true,
 *         allowedHeaders: [
 *             "x-tempo-*",
 *             "x-tempo2-*",
 *         ],
 *         allowedMethods: [
 *             "GET",
 *             "PUT",
 *         ],
 *         allowedOrigins: [
 *             "http://www.example.com",
 *             "http://www.example2.com",
 *         ],
 *         maxAgeInSeconds: 500,
 *     },
 *     cosmosdbThroughput: 2000,
 *     kind: "fhir-R4",
 *     location: "westus2",
 *     resourceGroupName: "sample-resource-group",
 *     tags: {
 *         environment: "testenv",
 *         purpose: "AcceptanceTests",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Healthcare Service can be imported using the resource`id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:healthcare/service:Service example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource_group/providers/Microsoft.HealthcareApis/services/service_name
 * ```
 */
class Service extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["accessPolicyObjectIds"] = state ? state.accessPolicyObjectIds : undefined;
            inputs["authenticationConfiguration"] = state ? state.authenticationConfiguration : undefined;
            inputs["corsConfiguration"] = state ? state.corsConfiguration : undefined;
            inputs["cosmosdbKeyVaultKeyVersionlessId"] = state ? state.cosmosdbKeyVaultKeyVersionlessId : undefined;
            inputs["cosmosdbThroughput"] = state ? state.cosmosdbThroughput : undefined;
            inputs["kind"] = state ? state.kind : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["accessPolicyObjectIds"] = args ? args.accessPolicyObjectIds : undefined;
            inputs["authenticationConfiguration"] = args ? args.authenticationConfiguration : undefined;
            inputs["corsConfiguration"] = args ? args.corsConfiguration : undefined;
            inputs["cosmosdbKeyVaultKeyVersionlessId"] = args ? args.cosmosdbKeyVaultKeyVersionlessId : undefined;
            inputs["cosmosdbThroughput"] = args ? args.cosmosdbThroughput : undefined;
            inputs["kind"] = args ? args.kind : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Service.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Service(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }
}
exports.Service = Service;
/** @internal */
Service.__pulumiType = 'azure:healthcare/service:Service';
//# sourceMappingURL=service.js.map