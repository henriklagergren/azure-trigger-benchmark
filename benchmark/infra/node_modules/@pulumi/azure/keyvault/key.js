"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Key = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Key Vault Key.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleKeyVault = new azure.keyvault.KeyVault("exampleKeyVault", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     softDeleteRetentionDays: 7,
 *     accessPolicies: [{
 *         tenantId: current.then(current => current.tenantId),
 *         objectId: current.then(current => current.objectId),
 *         keyPermissions: [
 *             "create",
 *             "get",
 *             "purge",
 *             "recover",
 *         ],
 *         secretPermissions: ["set"],
 *     }],
 * });
 * const generated = new azure.keyvault.Key("generated", {
 *     keyVaultId: exampleKeyVault.id,
 *     keyType: "RSA",
 *     keySize: 2048,
 *     keyOpts: [
 *         "decrypt",
 *         "encrypt",
 *         "sign",
 *         "unwrapKey",
 *         "verify",
 *         "wrapKey",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Key Vault Key which is Enabled can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:keyvault/key:Key example "https://example-keyvault.vault.azure.net/keys/example/fdf067c93bbb4b22bff4d8b7a9a56217"
 * ```
 */
class Key extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["curve"] = state ? state.curve : undefined;
            inputs["e"] = state ? state.e : undefined;
            inputs["expirationDate"] = state ? state.expirationDate : undefined;
            inputs["keyOpts"] = state ? state.keyOpts : undefined;
            inputs["keySize"] = state ? state.keySize : undefined;
            inputs["keyType"] = state ? state.keyType : undefined;
            inputs["keyVaultId"] = state ? state.keyVaultId : undefined;
            inputs["n"] = state ? state.n : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notBeforeDate"] = state ? state.notBeforeDate : undefined;
            inputs["publicKeyOpenssh"] = state ? state.publicKeyOpenssh : undefined;
            inputs["publicKeyPem"] = state ? state.publicKeyPem : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["version"] = state ? state.version : undefined;
            inputs["versionlessId"] = state ? state.versionlessId : undefined;
            inputs["x"] = state ? state.x : undefined;
            inputs["y"] = state ? state.y : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.keyOpts === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyOpts'");
            }
            if ((!args || args.keyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyType'");
            }
            if ((!args || args.keyVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVaultId'");
            }
            inputs["curve"] = args ? args.curve : undefined;
            inputs["expirationDate"] = args ? args.expirationDate : undefined;
            inputs["keyOpts"] = args ? args.keyOpts : undefined;
            inputs["keySize"] = args ? args.keySize : undefined;
            inputs["keyType"] = args ? args.keyType : undefined;
            inputs["keyVaultId"] = args ? args.keyVaultId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notBeforeDate"] = args ? args.notBeforeDate : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["e"] = undefined /*out*/;
            inputs["n"] = undefined /*out*/;
            inputs["publicKeyOpenssh"] = undefined /*out*/;
            inputs["publicKeyPem"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
            inputs["versionlessId"] = undefined /*out*/;
            inputs["x"] = undefined /*out*/;
            inputs["y"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Key.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Key resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Key(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Key.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Key.__pulumiType;
    }
}
exports.Key = Key;
/** @internal */
Key.__pulumiType = 'azure:keyvault/key:Key';
//# sourceMappingURL=key.js.map