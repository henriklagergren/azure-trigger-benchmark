{"version":3,"file":"eventHubProducerClient.js","sourceRoot":"","sources":["../../src/eventHubProducerClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AmqpAnnotatedMessage } from \"@azure/core-amqp\";\nimport { NamedKeyCredential, SASCredential, TokenCredential } from \"@azure/core-auth\";\nimport { SpanStatusCode, Link, Span, SpanContext, SpanKind } from \"@azure/core-tracing\";\nimport { ConnectionContext, createConnectionContext } from \"./connectionContext\";\nimport { instrumentEventData, TRACEPARENT_PROPERTY } from \"./diagnostics/instrumentEventData\";\nimport { createMessageSpan } from \"./diagnostics/tracing\";\nimport { EventData } from \"./eventData\";\nimport { EventDataBatch, EventDataBatchImpl, isEventDataBatch } from \"./eventDataBatch\";\nimport { EventHubSender } from \"./eventHubSender\";\nimport { logErrorStackTrace, logger } from \"./log\";\nimport { EventHubProperties, PartitionProperties } from \"./managementClient\";\nimport {\n  CreateBatchOptions,\n  EventHubClientOptions,\n  GetEventHubPropertiesOptions,\n  GetPartitionIdsOptions,\n  GetPartitionPropertiesOptions,\n  SendBatchOptions\n} from \"./models/public\";\nimport { throwErrorIfConnectionClosed, throwTypeErrorIfParameterMissing } from \"./util/error\";\nimport { isCredential, isDefined } from \"./util/typeGuards\";\nimport { OperationOptions } from \"./util/operationOptions\";\nimport { createEventHubSpan } from \"./diagnostics/tracing\";\n\n/**\n * The `EventHubProducerClient` class is used to send events to an Event Hub.\n *\n * There are multiple ways to create an `EventHubProducerClient`\n * - Use the connection string from the SAS policy created for your Event Hub instance.\n * - Use the connection string from the SAS policy created for your Event Hub namespace,\n * and the name of the Event Hub instance\n * - Use the full namespace like `<yournamespace>.servicebus.windows.net`, and a credentials object.\n *\n * Optionally, you can also pass an options bag to configure the retry policy or proxy settings.\n *\n */\nexport class EventHubProducerClient {\n  /**\n   * Describes the amqp connection context for the client.\n   */\n  private _context: ConnectionContext;\n\n  /**\n   * The options passed by the user when creating the EventHubClient instance.\n   */\n  private _clientOptions: EventHubClientOptions;\n  /**\n   * Map of partitionId to senders\n   */\n  private _sendersMap: Map<string, EventHubSender>;\n  /**\n   * @readonly\n   * The name of the Event Hub instance for which this client is created.\n   */\n  get eventHubName(): string {\n    return this._context.config.entityPath;\n  }\n\n  /**\n   * @readonly\n   * The fully qualified namespace of the Event Hub instance for which this client is created.\n   * This is likely to be similar to <yournamespace>.servicebus.windows.net.\n   */\n  get fullyQualifiedNamespace(): string {\n    return this._context.config.host;\n  }\n\n  /**\n   * The `EventHubProducerClient` class is used to send events to an Event Hub.\n   * Use the `options` parmeter to configure retry policy or proxy settings.\n   * @param connectionString - The connection string to use for connecting to the Event Hub instance.\n   * It is expected that the shared key properties and the Event Hub path are contained in this connection string.\n   * e.g. 'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.\n   * @param options - A set of options to apply when configuring the client.\n   * - `retryOptions`   : Configures the retry policy for all the operations on the client.\n   * For example, `{ \"maxRetries\": 4 }` or `{ \"maxRetries\": 4, \"retryDelayInMs\": 30000 }`.\n   * - `webSocketOptions`: Configures the channelling of the AMQP connection over Web Sockets.\n   * - `userAgent`      : A string to append to the built in user agent string that is passed to the service.\n   */\n  constructor(connectionString: string, options?: EventHubClientOptions); // eslint-disable-line @azure/azure-sdk/ts-naming-options\n  /**\n   * The `EventHubProducerClient` class is used to send events to an Event Hub.\n   * Use the `options` parmeter to configure retry policy or proxy settings.\n   * @param connectionString - The connection string to use for connecting to the Event Hubs namespace.\n   * It is expected that the shared key properties are contained in this connection string, but not the Event Hub path,\n   * e.g. 'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;'.\n   * @param eventHubName - The name of the specific Event Hub to connect the client to.\n   * @param options - A set of options to apply when configuring the client.\n   * - `retryOptions`   : Configures the retry policy for all the operations on the client.\n   * For example, `{ \"maxRetries\": 4 }` or `{ \"maxRetries\": 4, \"retryDelayInMs\": 30000 }`.\n   * - `webSocketOptions`: Configures the channelling of the AMQP connection over Web Sockets.\n   * - `userAgent`      : A string to append to the built in user agent string that is passed to the service.\n   */\n  constructor(connectionString: string, eventHubName: string, options?: EventHubClientOptions); // eslint-disable-line @azure/azure-sdk/ts-naming-options\n  /**\n   * The `EventHubProducerClient` class is used to send events to an Event Hub.\n   * Use the `options` parmeter to configure retry policy or proxy settings.\n   * @param fullyQualifiedNamespace - The full namespace which is likely to be similar to\n   * <yournamespace>.servicebus.windows.net\n   * @param eventHubName - The name of the specific Event Hub to connect the client to.\n   * @param credential - An credential object used by the client to get the token to authenticate the connection\n   * with the Azure Event Hubs service.\n   * See &commat;azure/identity for creating credentials that support AAD auth.\n   * Use the `AzureNamedKeyCredential` from &commat;azure/core-auth if you want to pass in a `SharedAccessKeyName`\n   * and `SharedAccessKey` without using a connection string. These fields map to the `name` and `key` field respectively\n   * in `AzureNamedKeyCredential`.\n   * Use the `AzureSASCredential` from &commat;azure/core-auth if you want to pass in a `SharedAccessSignature`\n   * without using a connection string. This field maps to `signature` in `AzureSASCredential`.\n   * @param options - A set of options to apply when configuring the client.\n   * - `retryOptions`   : Configures the retry policy for all the operations on the client.\n   * For example, `{ \"maxRetries\": 4 }` or `{ \"maxRetries\": 4, \"retryDelayInMs\": 30000 }`.\n   * - `webSocketOptions`: Configures the channelling of the AMQP connection over Web Sockets.\n   * - `userAgent`      : A string to append to the built in user agent string that is passed to the service.\n   */\n  constructor(\n    fullyQualifiedNamespace: string,\n    eventHubName: string,\n    credential: TokenCredential | NamedKeyCredential | SASCredential,\n    options?: EventHubClientOptions // eslint-disable-line @azure/azure-sdk/ts-naming-options\n  );\n  constructor(\n    fullyQualifiedNamespaceOrConnectionString1: string,\n    eventHubNameOrOptions2?: string | EventHubClientOptions,\n    credentialOrOptions3?:\n      | TokenCredential\n      | NamedKeyCredential\n      | SASCredential\n      | EventHubClientOptions,\n    options4?: EventHubClientOptions // eslint-disable-line @azure/azure-sdk/ts-naming-options\n  ) {\n    this._context = createConnectionContext(\n      fullyQualifiedNamespaceOrConnectionString1,\n      eventHubNameOrOptions2,\n      credentialOrOptions3,\n      options4\n    );\n    if (typeof eventHubNameOrOptions2 !== \"string\") {\n      this._clientOptions = eventHubNameOrOptions2 || {};\n    } else if (!isCredential(credentialOrOptions3)) {\n      this._clientOptions = credentialOrOptions3 || {};\n    } else {\n      this._clientOptions = options4 || {};\n    }\n\n    this._sendersMap = new Map();\n  }\n\n  /**\n   * Creates an instance of `EventDataBatch` to which one can add events until the maximum supported size is reached.\n   * The batch can be passed to the {@link sendBatch} method of the `EventHubProducerClient` to be sent to Azure Event Hubs.\n   *\n   * Example usage:\n   * ```ts\n   * const client = new EventHubProducerClient(connectionString);\n   * let batch = await client.createBatch();\n   * for (let i = 0; i < messages.length; i++) {\n   *  if (!batch.tryAdd(messages[i])) {\n   *    await client.sendBatch(batch);\n   *    batch = await client.createBatch();\n   *    if (!batch.tryAdd(messages[i])) {\n   *      throw new Error(\"Message too big to fit\")\n   *    }\n   *    if (i === messages.length - 1) {\n   *      await client.sendBatch(batch);\n   *    }\n   *   }\n   * }\n   * ```\n   *\n   * @param options -  Configures the behavior of the batch.\n   * - `partitionKey`  : A value that is hashed and used by the Azure Event Hubs service to determine the partition to which\n   * the events need to be sent.\n   * - `partitionId`   : Id of the partition to which the batch of events need to be sent.\n   * - `maxSizeInBytes`: The upper limit for the size of batch. The `tryAdd` function will return `false` after this limit is reached.\n   * - `abortSignal`   : A signal the request to cancel the operation.\n   * @returns Promise<EventDataBatch>\n   * @throws Error if both `partitionId` and `partitionKey` are set in the options.\n   * @throws Error if the underlying connection has been closed, create a new EventHubProducerClient.\n   * @throws AbortError if the operation is cancelled via the abortSignal in the options.\n   */\n  async createBatch(options: CreateBatchOptions = {}): Promise<EventDataBatch> {\n    throwErrorIfConnectionClosed(this._context);\n\n    if (isDefined(options.partitionId) && isDefined(options.partitionKey)) {\n      throw new Error(\"partitionId and partitionKey cannot both be set when creating a batch\");\n    }\n\n    let sender = this._sendersMap.get(\"\");\n    if (!sender) {\n      sender = EventHubSender.create(this._context);\n      this._sendersMap.set(\"\", sender);\n    }\n\n    let maxMessageSize = await sender.getMaxMessageSize({\n      retryOptions: this._clientOptions.retryOptions,\n      abortSignal: options.abortSignal\n    });\n\n    if (options.maxSizeInBytes) {\n      if (options.maxSizeInBytes > maxMessageSize) {\n        const error = new Error(\n          `Max message size (${options.maxSizeInBytes} bytes) is greater than maximum message size (${maxMessageSize} bytes) on the AMQP sender link.`\n        );\n        logger.warning(`[${this._context.connectionId}] ${error.message}`);\n        logErrorStackTrace(error);\n        throw error;\n      }\n      maxMessageSize = options.maxSizeInBytes;\n    }\n    return new EventDataBatchImpl(\n      this._context,\n      maxMessageSize,\n      options.partitionKey,\n      options.partitionId\n    );\n  }\n\n  /**\n   * Sends an array of events to the associated Event Hub.\n   *\n   * Example usage:\n   * ```ts\n   * const client = new EventHubProducerClient(connectionString);\n   * await client.sendBatch(messages);\n   * ```\n   *\n   * @param batch - An array of {@link EventData} or `AmqpAnnotatedMessage`.\n   * @param options - A set of options that can be specified to influence the way in which\n   * events are sent to the associated Event Hub.\n   * - `abortSignal`  : A signal the request to cancel the send operation.\n   * - `partitionId`  : The partition this batch will be sent to. If set, `partitionKey` can not be set.\n   * - `partitionKey` : A value that is hashed to produce a partition assignment. If set, `partitionId` can not be set.\n   *\n   * @returns Promise<void>\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   * @throws MessagingError if an error is encountered while sending a message.\n   * @throws Error if the underlying connection or sender has been closed.\n   */\n  async sendBatch(\n    batch: EventData[] | AmqpAnnotatedMessage[],\n    options?: SendBatchOptions\n  ): Promise<void>;\n  /**\n   * Sends a batch of events to the associated Event Hub.\n   *\n   * Example usage:\n   * ```ts\n   * const client = new EventHubProducerClient(connectionString);\n   * let batch = await client.createBatch();\n   * for (let i = 0; i < messages.length; i++) {\n   *  if (!batch.tryAdd(messages[i])) {\n   *    await client.sendBatch(batch);\n   *    batch = await client.createBatch();\n   *    if (!batch.tryAdd(messages[i])) {\n   *      throw new Error(\"Message too big to fit\")\n   *    }\n   *    if (i === messages.length - 1) {\n   *      await client.sendBatch(batch);\n   *    }\n   *   }\n   * }\n   * ```\n   * @param batch - A batch of events that you can create using the {@link createBatch} method.\n   * @param options - A set of options that can be specified to influence the way in which\n   * events are sent to the associated Event Hub.\n   * - `abortSignal`  : A signal the request to cancel the send operation.\n   *\n   * @returns Promise<void>\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   * @throws MessagingError if an error is encountered while sending a message.\n   * @throws Error if the underlying connection or sender has been closed.\n   */\n  async sendBatch(batch: EventDataBatch, options?: OperationOptions): Promise<void>; // eslint-disable-line @azure/azure-sdk/ts-naming-options\n  async sendBatch(\n    batch: EventDataBatch | EventData[],\n    options: SendBatchOptions | OperationOptions = {}\n  ): Promise<void> {\n    throwErrorIfConnectionClosed(this._context);\n    throwTypeErrorIfParameterMissing(this._context.connectionId, \"sendBatch\", \"batch\", batch);\n\n    let partitionId: string | undefined;\n    let partitionKey: string | undefined;\n\n    // link message span contexts\n    let spanContextsToLink: SpanContext[] = [];\n\n    if (isEventDataBatch(batch)) {\n      // For batches, partitionId and partitionKey would be set on the batch.\n      partitionId = batch.partitionId;\n      partitionKey = batch.partitionKey;\n      const unexpectedOptions = options as SendBatchOptions;\n      if (unexpectedOptions.partitionKey && partitionKey !== unexpectedOptions.partitionKey) {\n        throw new Error(\n          `The partitionKey (${unexpectedOptions.partitionKey}) set on sendBatch does not match the partitionKey (${partitionKey}) set when creating the batch.`\n        );\n      }\n      if (unexpectedOptions.partitionId && unexpectedOptions.partitionId !== partitionId) {\n        throw new Error(\n          `The partitionId (${unexpectedOptions.partitionId}) set on sendBatch does not match the partitionId (${partitionId}) set when creating the batch.`\n        );\n      }\n\n      spanContextsToLink = batch._messageSpanContexts;\n    } else {\n      if (!Array.isArray(batch)) {\n        batch = [batch];\n      }\n\n      // For arrays of events, partitionId and partitionKey would be set in the options.\n      const expectedOptions = options as SendBatchOptions;\n      partitionId = expectedOptions.partitionId;\n      partitionKey = expectedOptions.partitionKey;\n\n      for (let i = 0; i < batch.length; i++) {\n        const event = batch[i];\n        if (!event.properties || !event.properties[TRACEPARENT_PROPERTY]) {\n          const { span: messageSpan } = createMessageSpan(options, this._context.config);\n          // since these message spans are created from same context as the send span,\n          // these message spans don't need to be linked.\n          // replace the original event with the instrumented one\n          batch[i] = instrumentEventData(batch[i], messageSpan);\n          messageSpan.end();\n        }\n      }\n    }\n    if (isDefined(partitionId) && isDefined(partitionKey)) {\n      throw new Error(\n        `The partitionId (${partitionId}) and partitionKey (${partitionKey}) cannot both be specified.`\n      );\n    }\n\n    if (isDefined(partitionId)) {\n      partitionId = String(partitionId);\n    }\n    if (isDefined(partitionKey)) {\n      partitionKey = String(partitionKey);\n    }\n\n    let sender = this._sendersMap.get(partitionId || \"\");\n    if (!sender) {\n      sender = EventHubSender.create(this._context, partitionId);\n      this._sendersMap.set(partitionId || \"\", sender);\n    }\n\n    const sendSpan = this._createSendSpan(options, spanContextsToLink);\n\n    try {\n      const result = await sender.send(batch, {\n        ...options,\n        partitionId,\n        partitionKey,\n        retryOptions: this._clientOptions.retryOptions\n      });\n      sendSpan.setStatus({ code: SpanStatusCode.OK });\n      return result;\n    } catch (error) {\n      sendSpan.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: error.message\n      });\n      throw error;\n    } finally {\n      sendSpan.end();\n    }\n  }\n\n  /**\n   * Closes the AMQP connection to the Event Hub instance,\n   * returning a promise that will be resolved when disconnection is completed.\n   * @returns Promise<void>\n   * @throws Error if the underlying connection encounters an error while closing.\n   */\n  async close(): Promise<void> {\n    await this._context.close();\n\n    for (const pair of this._sendersMap) {\n      await pair[1].close();\n    }\n    this._sendersMap.clear();\n  }\n\n  /**\n   * Provides the Event Hub runtime information.\n   * @param options - The set of options to apply to the operation call.\n   * @returns A promise that resolves with information about the Event Hub instance.\n   * @throws Error if the underlying connection has been closed, create a new EventHubProducerClient.\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   */\n  getEventHubProperties(options: GetEventHubPropertiesOptions = {}): Promise<EventHubProperties> {\n    return this._context.managementSession!.getEventHubProperties({\n      ...options,\n      retryOptions: this._clientOptions.retryOptions\n    });\n  }\n\n  /**\n   * Provides the id for each partition associated with the Event Hub.\n   * @param options - The set of options to apply to the operation call.\n   * @returns A promise that resolves with an Array of strings representing the id for\n   * each partition associated with the Event Hub.\n   * @throws Error if the underlying connection has been closed, create a new EventHubProducerClient.\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   */\n  getPartitionIds(options: GetPartitionIdsOptions = {}): Promise<Array<string>> {\n    return this._context\n      .managementSession!.getEventHubProperties({\n        ...options,\n        retryOptions: this._clientOptions.retryOptions\n      })\n      .then((eventHubProperties) => {\n        return eventHubProperties.partitionIds;\n      });\n  }\n\n  /**\n   * Provides information about the state of the specified partition.\n   * @param partitionId - The id of the partition for which information is required.\n   * @param options - The set of options to apply to the operation call.\n   * @returns A promise that resolves with information about the state of the partition .\n   * @throws Error if the underlying connection has been closed, create a new EventHubProducerClient.\n   * @throws AbortError if the operation is cancelled via the abortSignal.\n   */\n  getPartitionProperties(\n    partitionId: string,\n    options: GetPartitionPropertiesOptions = {}\n  ): Promise<PartitionProperties> {\n    return this._context.managementSession!.getPartitionProperties(partitionId, {\n      ...options,\n      retryOptions: this._clientOptions.retryOptions\n    });\n  }\n\n  private _createSendSpan(\n    operationOptions: OperationOptions,\n    spanContextsToLink: SpanContext[] = []\n  ): Span {\n    const links: Link[] = spanContextsToLink.map((context) => {\n      return {\n        context\n      };\n    });\n\n    const { span } = createEventHubSpan(\"send\", operationOptions, this._context.config, {\n      kind: SpanKind.CLIENT,\n      links\n    });\n\n    return span;\n  }\n}\n"]}