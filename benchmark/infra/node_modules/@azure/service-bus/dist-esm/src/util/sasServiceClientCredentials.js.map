{"version":3,"file":"sasServiceClientCredentials.js","sourceRoot":"","sources":["../../../src/util/sasServiceClientCredentials.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAMlC,OAAO,EAAE,WAAW,EAAyC,MAAM,kBAAkB,CAAC;AACtF,OAAO,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AACvC,OAAO,EAAE,sBAAsB,EAAoB,MAAM,kBAAkB,CAAC;AAE5E;;GAEG;AACH,MAAM,OAAO,2BAA2B;IAUtC;;;;OAIG;IACH,YAAY,UAA8B;QACxC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,cAAc,GAAG,sBAAsB,CAAC,UAAU,CAAC,CAAC;IAC3D,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAAC,SAAiB,EAAE,cAAsB;QACxE,MAAM,YAAY,GAAG,GAAG,SAAS,KAAK,cAAc,EAAE,CAAC;QACvD,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;QACrE,OAAO,MAAM,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,WAAW,CAAC,WAAwB;QACxC,IAAI,CAAC,WAAW,CAAC,OAAO;YAAE,WAAW,CAAC,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC;QAElE,MAAM,SAAS,GAAG,kBAAkB,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;QAElF,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;QACvC,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;QACzD,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;QAC3E,WAAW,CAAC,OAAO,CAAC,GAAG,CACrB,eAAe,EACf,6BAA6B,SAAS,OAAO,cAAc,QAAQ,IAAI,CAAC,WAAW,CAAC,IAAI,OAAO,SAAS,EAAE,CAC3G,CAAC;QACF,WAAW,CAAC,eAAe,GAAG,IAAI,CAAC;QACnC,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,QAAQ,CAAC,QAAgB;QACvB,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAChD,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { AccessToken, NamedKeyCredential } from \"@azure/core-auth\";\nimport { HttpHeaders, ServiceClientCredentials, WebResource } from \"@azure/core-http\";\nimport { generateKey } from \"./crypto\";\nimport { createSasTokenProvider, SasTokenProvider } from \"@azure/core-amqp\";\n\n/**\n * @internal\n */\nexport class SasServiceClientCredentials implements ServiceClientCredentials {\n  /**\n   * The NamedKeyCredential containing the key name and secret key value.\n   */\n  private _credential: NamedKeyCredential;\n\n  /**\n   * A SasTokenProvider provides a method to retrieve an `AccessToken`.\n   */\n  private _tokenProvider: SasTokenProvider;\n  /**\n   * Creates a new sasServiceClientCredentials object.\n   *\n   * @param credential - The NamedKeyCredential containing the key name and secret key value.\n   */\n  constructor(credential: NamedKeyCredential) {\n    this._credential = credential;\n    this._tokenProvider = createSasTokenProvider(credential);\n  }\n\n  private async _generateSignature(targetUri: string, expirationDate: number): Promise<string> {\n    const stringToSign = `${targetUri}\\n${expirationDate}`;\n    const result = await generateKey(this._credential.key, stringToSign);\n    return result;\n  }\n\n  /**\n   * Signs a request with the Authentication header.\n   *\n   * @param webResource - The WebResource to be signed.\n   * @returns The signed request object.\n   */\n  async signRequest(webResource: WebResource): Promise<WebResource> {\n    if (!webResource.headers) webResource.headers = new HttpHeaders();\n\n    const targetUri = encodeURIComponent(webResource.url.toLowerCase()).toLowerCase();\n\n    const date = new Date();\n    date.setMinutes(date.getMinutes() + 5);\n    const expirationDate = Math.round(date.getTime() / 1000);\n    const signature = await this._generateSignature(targetUri, expirationDate);\n    webResource.headers.set(\n      \"authorization\",\n      `SharedAccessSignature sig=${signature}&se=${expirationDate}&skn=${this._credential.name}&sr=${targetUri}`\n    );\n    webResource.withCredentials = true;\n    return webResource;\n  }\n\n  getToken(audience: string): AccessToken {\n    return this._tokenProvider.getToken(audience);\n  }\n}\n"]}