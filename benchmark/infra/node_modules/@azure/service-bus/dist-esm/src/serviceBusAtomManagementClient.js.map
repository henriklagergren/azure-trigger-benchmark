{"version":3,"file":"serviceBusAtomManagementClient.js","sourceRoot":"","sources":["../../src/serviceBusAtomManagementClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Constants as AMQPConstants, parseConnectionString } from \"@azure/core-amqp\";\nimport {\n  TokenCredential,\n  isTokenCredential,\n  NamedKeyCredential,\n  isNamedKeyCredential,\n} from \"@azure/core-auth\";\nimport {\n  bearerTokenAuthenticationPolicy,\n  createPipelineFromOptions,\n  HttpOperationResponse,\n  OperationOptions,\n  RequestPolicyFactory,\n  RestError,\n  ServiceClient,\n  signingPolicy,\n  stripRequest,\n  stripResponse,\n  URLBuilder,\n  WebResource,\n  PipelineOptions,\n  HttpResponse,\n} from \"@azure/core-http\";\nimport { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { CorrelationRuleFilter } from \"./core/managementClient\";\nimport { administrationLogger as logger } from \"./log\";\nimport {\n  buildNamespace,\n  NamespaceProperties,\n  NamespaceResourceSerializer,\n} from \"./serializers/namespaceResourceSerializer\";\nimport {\n  buildQueue,\n  buildQueueOptions,\n  buildQueueRuntimeProperties,\n  CreateQueueOptions,\n  InternalQueueOptions,\n  QueueProperties,\n  QueueResourceSerializer,\n  QueueRuntimeProperties,\n} from \"./serializers/queueResourceSerializer\";\nimport {\n  buildRule,\n  CreateRuleOptions,\n  isSqlRuleAction,\n  RuleProperties,\n  RuleResourceSerializer,\n  SqlRuleAction,\n  SqlRuleFilter,\n} from \"./serializers/ruleResourceSerializer\";\nimport {\n  buildSubscription,\n  buildSubscriptionOptions,\n  buildSubscriptionRuntimeProperties,\n  CreateSubscriptionOptions,\n  InternalSubscriptionOptions,\n  SubscriptionProperties,\n  SubscriptionResourceSerializer,\n  SubscriptionRuntimeProperties,\n} from \"./serializers/subscriptionResourceSerializer\";\nimport {\n  buildTopic,\n  buildTopicOptions,\n  buildTopicRuntimeProperties,\n  CreateTopicOptions,\n  InternalTopicOptions,\n  TopicProperties,\n  TopicResourceSerializer,\n  TopicRuntimeProperties,\n} from \"./serializers/topicResourceSerializer\";\nimport { AtomXmlSerializer, executeAtomXmlOperation } from \"./util/atomXmlHelper\";\nimport * as Constants from \"./util/constants\";\nimport { parseURL } from \"./util/parseUrl\";\nimport { SasServiceClientCredentials } from \"./util/sasServiceClientCredentials\";\nimport { createSpan } from \"./diagnostics/tracing\";\nimport { isDefined } from \"./util/typeGuards\";\nimport {\n  formatUserAgentPrefix,\n  getHttpResponseOnly,\n  isAbsoluteUrl,\n  isJSONLikeObject,\n  ServiceBusAtomAPIVersion,\n} from \"./util/utils\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\n\n/**\n * Request options for list<entity-type>() operations\n */\nexport interface ListRequestOptions {\n  /**\n   * Count of entities to fetch.\n   */\n  maxCount?: number;\n\n  /**\n   * Count of entities to skip from being fetched.\n   */\n  skip?: number;\n}\n\n/**\n * Represents the returned response of the operation along with the raw response.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type WithResponse<T extends object> = T & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: HttpResponse;\n};\n\n/**\n * Represents the client options of the `ServiceBusAdministrationClient`.\n */\nexport interface ServiceBusAdministrationClientOptions extends PipelineOptions {\n  /**\n   * Service version of the ATOM API.\n   *\n   * Currently supported = \"2021-05\" | \"2017-04\"\n   *\n   * Defaults to \"2021-05\".\n   */\n  serviceVersion?: \"2021-05\" | \"2017-04\";\n}\n\n/**\n * Represents the result of list operation on entities which also contains the `continuationToken` to start iterating over from.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport type EntitiesResponse<T extends object> = WithResponse<Array<T>> &\n  Pick<PageSettings, \"continuationToken\">;\n\n/**\n * All operations return promises that resolve to an object that has the relevant output.\n * These objects also have a property called `_response` that you can use if you want to\n * access the direct response from the service.\n */\nexport class ServiceBusAdministrationClient extends ServiceClient {\n  /**\n   * Reference to the endpoint as extracted from input connection string.\n   */\n  private endpoint: string;\n\n  /**\n   * Reference to the endpoint with protocol prefix as extracted from input connection string.\n   */\n  private endpointWithProtocol: string;\n\n  private serviceVersion: ServiceBusAtomAPIVersion;\n\n  /**\n   * Singleton instances of serializers used across the various operations.\n   */\n  private namespaceResourceSerializer: AtomXmlSerializer;\n  private queueResourceSerializer: AtomXmlSerializer;\n  private topicResourceSerializer: AtomXmlSerializer;\n  private subscriptionResourceSerializer: AtomXmlSerializer;\n  private ruleResourceSerializer: AtomXmlSerializer;\n\n  /**\n   * Credentials used to generate tokens as required for the various operations.\n   */\n  private credentials: SasServiceClientCredentials | TokenCredential;\n\n  /**\n   * Initializes a new instance of the ServiceBusAdministrationClient class.\n   * @param connectionString - The connection string needed for the client to connect to Azure.\n   * @param options - PipelineOptions\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  constructor(connectionString: string, options?: ServiceBusAdministrationClientOptions);\n  /**\n   *\n   * @param fullyQualifiedNamespace - The fully qualified namespace of your Service Bus instance which is\n   * likely to be similar to <yournamespace>.servicebus.windows.net.\n   * @param credential - A credential object used by the client to get the token to authenticate the connection\n   * with the Azure Service Bus. See &commat;azure/identity for creating the credentials.\n   * If you're using your own implementation of the `TokenCredential` interface against AAD, then set the \"scopes\" for service-bus\n   * to be `[\"https://servicebus.azure.net//user_impersonation\"]` to get the appropriate token.\n   * Use the `AzureNamedKeyCredential` from &commat;azure/core-auth if you want to pass in a `SharedAccessKeyName`\n   * and `SharedAccessKey` without using a connection string. These fields map to the `name` and `key` field respectively\n   * in `AzureNamedKeyCredential`.\n   * @param options - PipelineOptions\n   */\n  constructor(\n    fullyQualifiedNamespace: string,\n    credential: TokenCredential | NamedKeyCredential,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: ServiceBusAdministrationClientOptions\n  );\n  constructor(\n    fullyQualifiedNamespaceOrConnectionString1: string,\n    credentialOrOptions2?:\n      | TokenCredential\n      | NamedKeyCredential\n      | ServiceBusAdministrationClientOptions,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options3?: ServiceBusAdministrationClientOptions\n  ) {\n    let options: ServiceBusAdministrationClientOptions;\n    let fullyQualifiedNamespace: string;\n    let credentials: SasServiceClientCredentials | TokenCredential;\n    let authPolicy: RequestPolicyFactory;\n    if (isTokenCredential(credentialOrOptions2)) {\n      fullyQualifiedNamespace = fullyQualifiedNamespaceOrConnectionString1;\n      options = options3 || {};\n      credentials = credentialOrOptions2;\n      authPolicy = bearerTokenAuthenticationPolicy(credentials, AMQPConstants.aadServiceBusScope);\n    } else if (isNamedKeyCredential(credentialOrOptions2)) {\n      fullyQualifiedNamespace = fullyQualifiedNamespaceOrConnectionString1;\n      credentials = new SasServiceClientCredentials(credentialOrOptions2);\n      options = options3 || {};\n      authPolicy = signingPolicy(credentials);\n    } else {\n      const connectionString = fullyQualifiedNamespaceOrConnectionString1;\n      options = credentialOrOptions2 || {};\n      const connectionStringObj: any = parseConnectionString(connectionString);\n      if (connectionStringObj.Endpoint === undefined) {\n        throw new Error(\"Missing Endpoint in connection string.\");\n      }\n      try {\n        fullyQualifiedNamespace = connectionStringObj.Endpoint.match(\".*://([^/]*)\")[1];\n      } catch (error) {\n        throw new Error(\"Endpoint in the connection string is not valid.\");\n      }\n      credentials = new SasServiceClientCredentials({\n        key: connectionStringObj.SharedAccessKey,\n        name: connectionStringObj.SharedAccessKeyName,\n      });\n      authPolicy = signingPolicy(credentials);\n    }\n\n    const userAgentPrefix = formatUserAgentPrefix(options.userAgentOptions?.userAgentPrefix);\n    const serviceClientOptions = createPipelineFromOptions(\n      {\n        ...options,\n        userAgentOptions: {\n          userAgentPrefix,\n        },\n      },\n      authPolicy\n    );\n    super(credentials, serviceClientOptions);\n    this.endpoint = fullyQualifiedNamespace;\n    this.endpointWithProtocol = fullyQualifiedNamespace.endsWith(\"/\")\n      ? \"sb://\" + fullyQualifiedNamespace\n      : \"sb://\" + fullyQualifiedNamespace + \"/\";\n    this.serviceVersion = options.serviceVersion ?? Constants.CURRENT_API_VERSION;\n    this.credentials = credentials;\n    this.namespaceResourceSerializer = new NamespaceResourceSerializer();\n    this.queueResourceSerializer = new QueueResourceSerializer();\n    this.topicResourceSerializer = new TopicResourceSerializer();\n    this.subscriptionResourceSerializer = new SubscriptionResourceSerializer();\n    this.ruleResourceSerializer = new RuleResourceSerializer();\n  }\n\n  /**\n   * Returns an object representing the metadata related to a service bus namespace.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   */\n  async getNamespaceProperties(\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<WithResponse<NamespaceProperties>> {\n    logger.verbose(`Performing management operation - getNamespaceProperties()`);\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-getNamespaceProperties\",\n      operationOptions\n    );\n    try {\n      const response: HttpOperationResponse = await this.getResource(\n        \"$namespaceinfo\",\n        this.namespaceResourceSerializer,\n        updatedOptions\n      );\n\n      return this.buildNamespacePropertiesResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a queue with given name, configured using the given options\n   * @param options - Options to configure the Queue being created(For example, you can configure a queue to support partitions or sessions)\n   *  and the operation options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityAlreadyExistsError` when requested messaging entity already exists,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `QuotaExceededError` when requested operation fails due to quote limits exceeding from service side,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async createQueue(\n    queueName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: CreateQueueOptions\n  ): Promise<WithResponse<QueueProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-createQueue\",\n      options\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - createQueue() for \"${queueName}\" with options: %j`,\n        options\n      );\n      const response: HttpOperationResponse = await this.putResource(\n        queueName,\n        buildQueueOptions(options || {}),\n        this.queueResourceSerializer,\n        false,\n        updatedOptions\n      );\n\n      return this.buildQueueResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an object representing the Queue and its properties.\n   * If you want to get the Queue runtime info like message count details, use `getQueueRuntimeProperties` API.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityNotFoundError` when requested messaging entity does not exist,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async getQueue(\n    queueName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<WithResponse<QueueProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-getQueue\",\n      operationOptions\n    );\n    try {\n      logger.verbose(`Performing management operation - getQueue() for \"${queueName}\"`);\n      const response: HttpOperationResponse = await this.getResource(\n        queueName,\n        this.queueResourceSerializer,\n        updatedOptions\n      );\n\n      return this.buildQueueResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an object representing the Queue runtime info like message count details.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityNotFoundError` when requested messaging entity does not exist,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async getQueueRuntimeProperties(\n    queueName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<WithResponse<QueueRuntimeProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-getQueueRuntimeProperties\",\n      operationOptions\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - getQueueRuntimeProperties() for \"${queueName}\"`\n      );\n      const response: HttpOperationResponse = await this.getResource(\n        queueName,\n        this.queueResourceSerializer,\n        updatedOptions\n      );\n\n      return this.buildQueueRuntimePropertiesResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns a list of objects, each representing a Queue along with its properties.\n   * If you want to get the runtime info of the queues like message count, use `getQueuesRuntimeProperties` API instead.\n   * @param options - The options include the maxCount and the count of entities to skip, the operation options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  private async getQueues(\n    options?: ListRequestOptions & OperationOptions\n  ): Promise<EntitiesResponse<QueueProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-getQueues\",\n      options\n    );\n    try {\n      logger.verbose(`Performing management operation - getQueues() with options: %j`, options);\n      const response: HttpOperationResponse = await this.listResources(\n        \"$Resources/Queues\",\n        updatedOptions,\n        this.queueResourceSerializer\n      );\n\n      return this.buildListQueuesResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listQueuesPage(\n    marker?: string,\n    options: OperationOptions & Pick<PageSettings, \"maxPageSize\"> = {}\n  ): AsyncIterableIterator<EntitiesResponse<QueueProperties>> {\n    let listResponse;\n    do {\n      listResponse = await this.getQueues({\n        skip: Number(marker),\n        maxCount: options.maxPageSize,\n        ...options,\n      });\n      marker = listResponse.continuationToken;\n      yield listResponse;\n    } while (marker);\n  }\n\n  private async *listQueuesAll(\n    options: OperationOptions = {}\n  ): AsyncIterableIterator<QueueProperties> {\n    let marker: string | undefined;\n    for await (const segment of this.listQueuesPage(marker, options)) {\n      yield* segment;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the queues.\n   *\n   * .byPage() returns an async iterable iterator to list the queues in pages.\n   *\n   * @returns An asyncIterableIterator that supports paging.\n   */\n  public listQueues(\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: OperationOptions\n  ): PagedAsyncIterableIterator<QueueProperties, EntitiesResponse<QueueProperties>> {\n    logger.verbose(`Performing management operation - listQueues() with options: %j`, options);\n    const iter = this.listQueuesAll(options);\n    return {\n      /**\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       */\n      byPage: (settings: PageSettings = {}) => {\n        this.throwIfInvalidContinuationToken(settings.continuationToken);\n        return this.listQueuesPage(settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...options,\n        });\n      },\n    };\n  }\n\n  /**\n   * Returns a list of objects, each representing a Queue's runtime info like message count details.\n   * @param options - The options include the maxCount and the count of entities to skip, the operation options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  private async getQueuesRuntimeProperties(\n    options?: ListRequestOptions & OperationOptions\n  ): Promise<EntitiesResponse<QueueRuntimeProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-getQueuesRuntimeProperties\",\n      options\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - getQueuesRuntimeProperties() with options: %j`,\n        options\n      );\n      const response: HttpOperationResponse = await this.listResources(\n        \"$Resources/Queues\",\n        updatedOptions,\n        this.queueResourceSerializer\n      );\n\n      return this.buildListQueuesRuntimePropertiesResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listQueuesRuntimePropertiesPage(\n    marker?: string,\n    options: OperationOptions & Pick<PageSettings, \"maxPageSize\"> = {}\n  ): AsyncIterableIterator<EntitiesResponse<QueueRuntimeProperties>> {\n    let listResponse;\n    do {\n      listResponse = await this.getQueuesRuntimeProperties({\n        skip: Number(marker),\n        maxCount: options.maxPageSize,\n        ...options,\n      });\n      marker = listResponse.continuationToken;\n      yield listResponse;\n    } while (marker);\n  }\n\n  private async *listQueuesRuntimePropertiesAll(\n    options: OperationOptions = {}\n  ): AsyncIterableIterator<QueueRuntimeProperties> {\n    let marker: string | undefined;\n    for await (const segment of this.listQueuesRuntimePropertiesPage(marker, options)) {\n      yield* segment;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list runtime info of the queues.\n   *\n   * .byPage() returns an async iterable iterator to list runtime info of the queues in pages.\n   *\n   *\n   * @returns An asyncIterableIterator that supports paging.\n   */\n  public listQueuesRuntimeProperties(\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: OperationOptions\n  ): PagedAsyncIterableIterator<QueueRuntimeProperties, EntitiesResponse<QueueRuntimeProperties>> {\n    logger.verbose(\n      `Performing management operation - listQueuesRuntimeProperties() with options: %j`,\n      options\n    );\n    const iter = this.listQueuesRuntimePropertiesAll(options);\n    return {\n      /**\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       */\n      byPage: (settings: PageSettings = {}) => {\n        this.throwIfInvalidContinuationToken(settings.continuationToken);\n        return this.listQueuesRuntimePropertiesPage(settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...options,\n        });\n      },\n    };\n  }\n\n  /**\n   * Updates the queue based on the queue properties provided.\n   * All queue properties must be set even though only a subset of them are actually updatable.\n   * Therefore, the suggested flow is to use the output from `getQueue()`, update the desired properties in it, and then pass the modified object to `updateQueue()`.\n   *\n   * The properties that cannot be updated are marked as readonly in the `QueueProperties` interface.\n   *\n   * @param queue - Object representing the properties of the queue and the raw response.\n   * `requiresSession`, `requiresDuplicateDetection`, `enablePartitioning`, and `name` can't be updated after creating the queue.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityNotFoundError` when requested messaging entity does not exist,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async updateQueue(\n    queue: WithResponse<QueueProperties>,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<WithResponse<QueueProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-updateQueue\",\n      operationOptions\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - updateQueue() for \"${queue.name}\" with options: %j`,\n        queue\n      );\n\n      if (!isJSONLikeObject(queue) || queue == null) {\n        throw new TypeError(\n          `Parameter \"queue\" must be an object of type \"QueueDescription\" and cannot be undefined or null.`\n        );\n      }\n\n      if (!queue.name) {\n        throw new TypeError(`\"name\" attribute of the parameter \"queue\" cannot be undefined.`);\n      }\n\n      const response: HttpOperationResponse = await this.putResource(\n        queue.name,\n        buildQueueOptions(queue),\n        this.queueResourceSerializer,\n        true,\n        updatedOptions\n      );\n\n      return this.buildQueueResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a queue.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityNotFoundError` when requested messaging entity does not exist,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async deleteQueue(\n    queueName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n    // eslint-disable-next-line @typescript-eslint/ban-types\n  ): Promise<WithResponse<{}>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-deleteQueue\",\n      operationOptions\n    );\n    try {\n      logger.verbose(`Performing management operation - deleteQueue() for \"${queueName}\"`);\n      const response: HttpOperationResponse = await this.deleteResource(\n        queueName,\n        this.queueResourceSerializer,\n        updatedOptions\n      );\n\n      return { _response: getHttpResponseOnly(response) };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Checks whether a given queue exists or not.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  async queueExists(queueName: string, operationOptions?: OperationOptions): Promise<boolean> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-queueExists\",\n      operationOptions\n    );\n    try {\n      logger.verbose(`Performing management operation - queueExists() for \"${queueName}\"`);\n      try {\n        await this.getQueue(queueName, updatedOptions);\n      } catch (error) {\n        if (error.code === \"MessageEntityNotFoundError\") {\n          return false;\n        }\n        throw error;\n      }\n      return true;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a topic with given name, configured using the given options\n   * @param options - Options to configure the Topic being created(For example, you can configure a topic to support partitions)\n   * and the operation options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityAlreadyExistsError` when requested messaging entity already exists,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `QuotaExceededError` when requested operation fails due to quote limits exceeding from service side,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async createTopic(\n    topicName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: CreateTopicOptions\n  ): Promise<WithResponse<TopicProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-createTopic\",\n      options\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - createTopic() for \"${topicName}\" with options: %j`,\n        options\n      );\n      const response: HttpOperationResponse = await this.putResource(\n        topicName,\n        buildTopicOptions(options || {}),\n        this.topicResourceSerializer,\n        false,\n        updatedOptions\n      );\n\n      return this.buildTopicResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an object representing the Topic and its properties.\n   * If you want to get the Topic runtime info like subscription count details, use `getTopicRuntimeProperties` API.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityNotFoundError` when requested messaging entity does not exist,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async getTopic(\n    topicName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<WithResponse<TopicProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-getTopic\",\n      operationOptions\n    );\n    try {\n      logger.verbose(`Performing management operation - getTopic() for \"${topicName}\"`);\n      const response: HttpOperationResponse = await this.getResource(\n        topicName,\n        this.topicResourceSerializer,\n        updatedOptions\n      );\n\n      return this.buildTopicResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an object representing the Topic runtime info like subscription count.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityNotFoundError` when requested messaging entity does not exist,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async getTopicRuntimeProperties(\n    topicName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<WithResponse<TopicRuntimeProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-getTopicRuntimeProperties\",\n      operationOptions\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - getTopicRuntimeProperties() for \"${topicName}\"`\n      );\n      const response: HttpOperationResponse = await this.getResource(\n        topicName,\n        this.topicResourceSerializer,\n        updatedOptions\n      );\n\n      return this.buildTopicRuntimePropertiesResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns a list of objects, each representing a Topic along with its properties.\n   * If you want to get the runtime info of the topics like subscription count, use `getTopicsRuntimeProperties` API instead.\n   * @param options - The options include the maxCount and the count of entities to skip, the operation options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  private async getTopics(\n    options?: ListRequestOptions & OperationOptions\n  ): Promise<EntitiesResponse<TopicProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-getTopics\",\n      options\n    );\n    try {\n      logger.verbose(`Performing management operation - getTopics() with options: %j`, options);\n      const response: HttpOperationResponse = await this.listResources(\n        \"$Resources/Topics\",\n        updatedOptions,\n        this.topicResourceSerializer\n      );\n\n      return this.buildListTopicsResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listTopicsPage(\n    marker?: string,\n    options: OperationOptions & Pick<PageSettings, \"maxPageSize\"> = {}\n  ): AsyncIterableIterator<EntitiesResponse<TopicProperties>> {\n    let listResponse;\n    do {\n      listResponse = await this.getTopics({\n        skip: Number(marker),\n        maxCount: options.maxPageSize,\n        ...options,\n      });\n      marker = listResponse.continuationToken;\n      yield listResponse;\n    } while (marker);\n  }\n\n  private async *listTopicsAll(\n    options: OperationOptions = {}\n  ): AsyncIterableIterator<TopicProperties> {\n    let marker: string | undefined;\n    for await (const segment of this.listTopicsPage(marker, options)) {\n      yield* segment;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the topics.\n   *\n   * .byPage() returns an async iterable iterator to list the topics in pages.\n   *\n   *\n   * @returns An asyncIterableIterator that supports paging.\n   */\n  public listTopics(\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: OperationOptions\n  ): PagedAsyncIterableIterator<TopicProperties, EntitiesResponse<TopicProperties>> {\n    logger.verbose(`Performing management operation - listTopics() with options: %j`, options);\n    const iter = this.listTopicsAll(options);\n    return {\n      /**\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       */\n      byPage: (settings: PageSettings = {}) => {\n        this.throwIfInvalidContinuationToken(settings.continuationToken);\n        return this.listTopicsPage(settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...options,\n        });\n      },\n    };\n  }\n\n  /**\n   * Returns a list of objects, each representing a Topic's runtime info like subscription count.\n   * @param options - The options include the maxCount and the count of entities to skip, the operation options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  private async getTopicsRuntimeProperties(\n    options?: ListRequestOptions & OperationOptions\n  ): Promise<EntitiesResponse<TopicRuntimeProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-getTopicsRuntimeProperties\",\n      options\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - getTopicsRuntimeProperties() with options: %j`,\n        options\n      );\n      const response: HttpOperationResponse = await this.listResources(\n        \"$Resources/Topics\",\n        updatedOptions,\n        this.topicResourceSerializer\n      );\n\n      return this.buildListTopicsRuntimePropertiesResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listTopicsRuntimePropertiesPage(\n    marker?: string,\n    options: OperationOptions & Pick<PageSettings, \"maxPageSize\"> = {}\n  ): AsyncIterableIterator<EntitiesResponse<TopicRuntimeProperties>> {\n    let listResponse;\n    do {\n      listResponse = await this.getTopicsRuntimeProperties({\n        skip: Number(marker),\n        maxCount: options.maxPageSize,\n        ...options,\n      });\n      marker = listResponse.continuationToken;\n      yield listResponse;\n    } while (marker);\n  }\n\n  private async *listTopicsRuntimePropertiesAll(\n    options: OperationOptions = {}\n  ): AsyncIterableIterator<TopicRuntimeProperties> {\n    let marker: string | undefined;\n    for await (const segment of this.listTopicsRuntimePropertiesPage(marker, options)) {\n      yield* segment;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list runtime info of the topics.\n   *\n   * .byPage() returns an async iterable iterator to list runtime info of the topics in pages.\n   *\n   *\n   * @returns An asyncIterableIterator that supports paging.\n   */\n  public listTopicsRuntimeProperties(\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: OperationOptions\n  ): PagedAsyncIterableIterator<TopicRuntimeProperties, EntitiesResponse<TopicRuntimeProperties>> {\n    logger.verbose(\n      `Performing management operation - listTopicsRuntimeProperties() with options: %j`,\n      options\n    );\n    const iter = this.listTopicsRuntimePropertiesAll(options);\n    return {\n      /**\n       * The next method, part of the iteration protocol\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       * The connection to the async iterator, part of the iteration protocol\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       * Return an AsyncIterableIterator that works a page at a time\n       */\n      byPage: (settings: PageSettings = {}) => {\n        this.throwIfInvalidContinuationToken(settings.continuationToken);\n        return this.listTopicsRuntimePropertiesPage(settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...options,\n        });\n      },\n    };\n  }\n\n  /**\n   * Updates the topic based on the topic properties provided.\n   * All topic properties must be set even though only a subset of them are actually updatable.\n   * Therefore, the suggested flow is to use the output from `getTopic()`, update the desired properties in it, and then pass the modified object to `updateTopic()`.\n   *\n   * The properties that cannot be updated are marked as readonly in the `TopicProperties` interface.\n   *\n   * @param topic - Object representing the properties of the topic and the raw response.\n   * `requiresDuplicateDetection`, `enablePartitioning`, and `name` can't be updated after creating the topic.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityNotFoundError` when requested messaging entity does not exist,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async updateTopic(\n    topic: WithResponse<TopicProperties>,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<WithResponse<TopicProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-updateTopic\",\n      operationOptions\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - updateTopic() for \"${topic.name}\" with options: %j`,\n        topic\n      );\n\n      if (!isJSONLikeObject(topic) || topic == null) {\n        throw new TypeError(\n          `Parameter \"topic\" must be an object of type \"TopicDescription\" and cannot be undefined or null.`\n        );\n      }\n\n      if (!topic.name) {\n        throw new TypeError(`\"name\" attribute of the parameter \"topic\" cannot be undefined.`);\n      }\n\n      const response: HttpOperationResponse = await this.putResource(\n        topic.name,\n        buildTopicOptions(topic),\n        this.topicResourceSerializer,\n        true,\n        updatedOptions\n      );\n\n      return this.buildTopicResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a topic.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityNotFoundError` when requested messaging entity does not exist,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async deleteTopic(\n    topicName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n    // eslint-disable-next-line @typescript-eslint/ban-types\n  ): Promise<WithResponse<{}>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-deleteTopic\",\n      operationOptions\n    );\n    try {\n      logger.verbose(`Performing management operation - deleteTopic() for \"${topicName}\"`);\n      const response: HttpOperationResponse = await this.deleteResource(\n        topicName,\n        this.topicResourceSerializer,\n        updatedOptions\n      );\n\n      return { _response: getHttpResponseOnly(response) };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Checks whether a given topic exists or not.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n  async topicExists(topicName: string, operationOptions?: OperationOptions): Promise<boolean> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-topicExists\",\n      operationOptions\n    );\n    try {\n      logger.verbose(`Performing management operation - topicExists() for \"${topicName}\"`);\n      try {\n        await this.getTopic(topicName, updatedOptions);\n      } catch (error) {\n        if (error.code === \"MessageEntityNotFoundError\") {\n          return false;\n        }\n        throw error;\n      }\n      return true;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a subscription with given name, configured using the given options\n   * @param options - Options to configure the Subscription being created(For example, you can configure a Subscription to support partitions or sessions)\n   * and the operation options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityAlreadyExistsError` when requested messaging entity already exists,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `QuotaExceededError` when requested operation fails due to quote limits exceeding from service side,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async createSubscription(\n    topicName: string,\n    subscriptionName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: CreateSubscriptionOptions\n  ): Promise<WithResponse<SubscriptionProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-createSubscription\",\n      options\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - createSubscription() for \"${subscriptionName}\" with options: %j`,\n        options\n      );\n      const fullPath = this.getSubscriptionPath(topicName, subscriptionName);\n      const response: HttpOperationResponse = await this.putResource(\n        fullPath,\n        buildSubscriptionOptions(options || {}),\n        this.subscriptionResourceSerializer,\n        false,\n        updatedOptions\n      );\n\n      return this.buildSubscriptionResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an object representing the Subscription and its properties.\n   * If you want to get the Subscription runtime info like message count details, use `getSubscriptionRuntimeProperties` API.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityNotFoundError` when requested messaging entity does not exist,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async getSubscription(\n    topicName: string,\n    subscriptionName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<WithResponse<SubscriptionProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-getSubscription\",\n      operationOptions\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - getSubscription() for \"${subscriptionName}\"`\n      );\n      const fullPath = this.getSubscriptionPath(topicName, subscriptionName);\n      const response: HttpOperationResponse = await this.getResource(\n        fullPath,\n        this.subscriptionResourceSerializer,\n        updatedOptions\n      );\n\n      return this.buildSubscriptionResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an object representing the Subscription runtime info like message count details.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityNotFoundError` when requested messaging entity does not exist,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async getSubscriptionRuntimeProperties(\n    topicName: string,\n    subscriptionName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<WithResponse<SubscriptionRuntimeProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-getSubscriptionRuntimeProperties\",\n      operationOptions\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - getSubscriptionRuntimeProperties() for \"${subscriptionName}\"`\n      );\n      const fullPath = this.getSubscriptionPath(topicName, subscriptionName);\n      const response: HttpOperationResponse = await this.getResource(\n        fullPath,\n        this.subscriptionResourceSerializer,\n        updatedOptions\n      );\n\n      return this.buildSubscriptionRuntimePropertiesResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns a list of objects, each representing a Subscription along with its properties.\n   * If you want to get the runtime info of the subscriptions like message count, use `getSubscriptionsRuntimeProperties` API instead.\n   * @param options - The options include the maxCount and the count of entities to skip, the operation options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  private async getSubscriptions(\n    topicName: string,\n    options?: ListRequestOptions & OperationOptions\n  ): Promise<EntitiesResponse<SubscriptionProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-getSubscriptions\",\n      options\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - getSubscriptions() with options: %j`,\n        options\n      );\n      const response: HttpOperationResponse = await this.listResources(\n        topicName + \"/Subscriptions/\",\n        updatedOptions,\n        this.subscriptionResourceSerializer\n      );\n\n      return this.buildListSubscriptionsResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listSubscriptionsPage(\n    topicName: string,\n    marker?: string,\n    options: OperationOptions & Pick<PageSettings, \"maxPageSize\"> = {}\n  ): AsyncIterableIterator<EntitiesResponse<SubscriptionProperties>> {\n    let listResponse;\n    do {\n      listResponse = await this.getSubscriptions(topicName, {\n        skip: Number(marker),\n        maxCount: options.maxPageSize,\n        ...options,\n      });\n      marker = listResponse.continuationToken;\n      yield listResponse;\n    } while (marker);\n  }\n\n  private async *listSubscriptionsAll(\n    topicName: string,\n    options: OperationOptions = {}\n  ): AsyncIterableIterator<SubscriptionProperties> {\n    let marker: string | undefined;\n    for await (const segment of this.listSubscriptionsPage(topicName, marker, options)) {\n      yield* segment;\n    }\n  }\n\n  /**\n   *\n   * Returns an async iterable iterator to list all the subscriptions\n   * under the specified topic.\n   *\n   * .byPage() returns an async iterable iterator to list the subscriptions in pages.\n   *\n   * @returns An asyncIterableIterator that supports paging.\n   */\n  public listSubscriptions(\n    topicName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: OperationOptions\n  ): PagedAsyncIterableIterator<SubscriptionProperties, EntitiesResponse<SubscriptionProperties>> {\n    logger.verbose(\n      `Performing management operation - listSubscriptions() with options: %j`,\n      options\n    );\n    const iter = this.listSubscriptionsAll(topicName, options);\n    return {\n      /**\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       */\n      byPage: (settings: PageSettings = {}) => {\n        this.throwIfInvalidContinuationToken(settings.continuationToken);\n        return this.listSubscriptionsPage(topicName, settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...options,\n        });\n      },\n    };\n  }\n\n  /**\n   * Returns a list of objects, each representing a Subscription's runtime info like message count details.\n   * @param options - The options include the maxCount and the count of entities to skip, the operation options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  private async getSubscriptionsRuntimeProperties(\n    topicName: string,\n    options?: ListRequestOptions & OperationOptions\n  ): Promise<EntitiesResponse<SubscriptionRuntimeProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-getSubscriptionsRuntimeProperties\",\n      options\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - getSubscriptionsRuntimeProperties() with options: %j`,\n        options\n      );\n      const response: HttpOperationResponse = await this.listResources(\n        topicName + \"/Subscriptions/\",\n        updatedOptions,\n        this.subscriptionResourceSerializer\n      );\n\n      return this.buildListSubscriptionsRuntimePropertiesResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listSubscriptionsRuntimePropertiesPage(\n    topicName: string,\n    marker?: string,\n    options: OperationOptions & Pick<PageSettings, \"maxPageSize\"> = {}\n  ): AsyncIterableIterator<EntitiesResponse<SubscriptionRuntimeProperties>> {\n    let listResponse;\n    do {\n      listResponse = await this.getSubscriptionsRuntimeProperties(topicName, {\n        skip: Number(marker),\n        maxCount: options.maxPageSize,\n        ...options,\n      });\n      marker = listResponse.continuationToken;\n      yield listResponse;\n    } while (marker);\n  }\n\n  private async *listSubscriptionsRuntimePropertiesAll(\n    topicName: string,\n    options: OperationOptions = {}\n  ): AsyncIterableIterator<SubscriptionRuntimeProperties> {\n    let marker: string | undefined;\n    for await (const segment of this.listSubscriptionsRuntimePropertiesPage(\n      topicName,\n      marker,\n      options\n    )) {\n      yield* segment;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list runtime info of the subscriptions\n   * under the specified topic.\n   *\n   * .byPage() returns an async iterable iterator to list runtime info of subscriptions in pages.\n   *\n   * @returns An asyncIterableIterator that supports paging.\n   */\n  public listSubscriptionsRuntimeProperties(\n    topicName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: OperationOptions\n  ): PagedAsyncIterableIterator<\n    SubscriptionRuntimeProperties,\n    EntitiesResponse<SubscriptionRuntimeProperties>\n  > {\n    logger.verbose(\n      `Performing management operation - listSubscriptionsRuntimeProperties() with options: %j`,\n      options\n    );\n    const iter = this.listSubscriptionsRuntimePropertiesAll(topicName, options);\n    return {\n      /**\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       */\n      byPage: (settings: PageSettings = {}) => {\n        this.throwIfInvalidContinuationToken(settings.continuationToken);\n        return this.listSubscriptionsRuntimePropertiesPage(topicName, settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...options,\n        });\n      },\n    };\n  }\n\n  /**\n   * Updates the subscription based on the subscription properties provided.\n   * All subscription properties must be set even though only a subset of them are actually updatable.\n   * Therefore, the suggested flow is to use the output from `getSubscription()`, update the desired properties in it, and then pass the modified object to `updateSubscription()`.\n   *\n   * The properties that cannot be updated are marked as readonly in the `SubscriptionProperties` interface.\n   * @param subscription - Object representing the properties of the subscription and the raw response.\n   * `subscriptionName`, `topicName`, and `requiresSession` can't be updated after creating the subscription.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityNotFoundError` when requested messaging entity does not exist,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async updateSubscription(\n    subscription: WithResponse<SubscriptionProperties>,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<WithResponse<SubscriptionProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-updateSubscription\",\n      operationOptions\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - updateSubscription() for \"${subscription.subscriptionName}\" with options: %j`,\n        subscription\n      );\n\n      if (!isJSONLikeObject(subscription) || subscription == null) {\n        throw new TypeError(\n          `Parameter \"subscription\" must be an object of type \"SubscriptionDescription\" and cannot be undefined or null.`\n        );\n      }\n\n      if (!subscription.topicName || !subscription.subscriptionName) {\n        throw new TypeError(\n          `The attributes \"topicName\" and \"subscriptionName\" of the parameter \"subscription\" cannot be undefined.`\n        );\n      }\n\n      const fullPath = this.getSubscriptionPath(\n        subscription.topicName,\n        subscription.subscriptionName\n      );\n\n      const response: HttpOperationResponse = await this.putResource(\n        fullPath,\n        buildSubscriptionOptions(subscription),\n        this.subscriptionResourceSerializer,\n        true,\n        updatedOptions\n      );\n\n      return this.buildSubscriptionResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a subscription.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityNotFoundError` when requested messaging entity does not exist,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async deleteSubscription(\n    topicName: string,\n    subscriptionName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n    // eslint-disable-next-line @typescript-eslint/ban-types\n  ): Promise<WithResponse<{}>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-deleteSubscription\",\n      operationOptions\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - deleteSubscription() for \"${subscriptionName}\"`\n      );\n      const fullPath = this.getSubscriptionPath(topicName, subscriptionName);\n      const response: HttpOperationResponse = await this.deleteResource(\n        fullPath,\n        this.subscriptionResourceSerializer,\n        updatedOptions\n      );\n\n      return { _response: getHttpResponseOnly(response) };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Checks whether a given subscription exists in the topic or not.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   */\n  async subscriptionExists(\n    topicName: string,\n    subscriptionName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<boolean> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-subscriptionExists\",\n      operationOptions\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - subscriptionExists() for \"${topicName}\" and \"${subscriptionName}\"`\n      );\n      try {\n        await this.getSubscription(topicName, subscriptionName, updatedOptions);\n      } catch (error) {\n        if (error.code === \"MessageEntityNotFoundError\") {\n          return false;\n        }\n        throw error;\n      }\n      return true;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a rule with given name, configured using the given options.\n   * @param ruleFilter - Defines the filter expression that the rule evaluates.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityAlreadyExistsError` when requested messaging entity already exists,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `QuotaExceededError` when requested operation fails due to quote limits exceeding from service side,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  createRule(\n    topicName: string,\n    subscriptionName: string,\n    ruleName: string,\n    ruleFilter: SqlRuleFilter | CorrelationRuleFilter,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<WithResponse<RuleProperties>>;\n  /**\n   * Creates a rule with given name, configured using the given options.\n   * @param ruleFilter - Defines the filter expression that the rule evaluates.\n   * @param ruleAction - The SQL like expression that can be executed on the message should the associated filter apply.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityAlreadyExistsError` when requested messaging entity already exists,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `QuotaExceededError` when requested operation fails due to quote limits exceeding from service side,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  createRule(\n    topicName: string,\n    subscriptionName: string,\n    ruleName: string,\n    ruleFilter: SqlRuleFilter | CorrelationRuleFilter,\n    ruleAction: SqlRuleAction,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<WithResponse<RuleProperties>>;\n  async createRule(\n    topicName: string,\n    subscriptionName: string,\n    ruleName: string,\n    ruleFilter: SqlRuleFilter | CorrelationRuleFilter,\n    ruleActionOrOperationOptions?: SqlRuleAction | OperationOptions,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<WithResponse<RuleProperties>> {\n    let ruleAction: SqlRuleAction | undefined = undefined;\n    let operOptions: OperationOptions | undefined;\n    if (ruleActionOrOperationOptions) {\n      if (isSqlRuleAction(ruleActionOrOperationOptions)) {\n        // Overload#2 - where the sqlExpression in the ruleAction is defined\n        ruleAction = ruleActionOrOperationOptions;\n        operOptions = operationOptions;\n      } else {\n        // Overload#1\n        // Overload#2 - where the sqlExpression in the ruleAction is undefined\n        operOptions = { ...ruleActionOrOperationOptions, ...operationOptions };\n      }\n    }\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-createRule\",\n      operOptions\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - createRule() for \"${ruleName}\" with filter: \"%j\"`,\n        ruleFilter\n      );\n      const fullPath = this.getRulePath(topicName, subscriptionName, ruleName);\n      const response: HttpOperationResponse = await this.putResource(\n        fullPath,\n        { name: ruleName, filter: ruleFilter, action: ruleAction },\n        this.ruleResourceSerializer,\n        false,\n        updatedOptions\n      );\n      return this.buildRuleResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Returns an object representing the Rule with the given name along with all its properties.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityNotFoundError` when requested messaging entity does not exist,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async getRule(\n    topicName: string,\n    subscriptionName: string,\n    ruleName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<WithResponse<RuleProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-getRule\",\n      operationOptions\n    );\n    try {\n      logger.verbose(`Performing management operation - getRule() for \"${ruleName}\"`);\n      const fullPath = this.getRulePath(topicName, subscriptionName, ruleName);\n      const response: HttpOperationResponse = await this.getResource(\n        fullPath,\n        this.ruleResourceSerializer,\n        updatedOptions\n      );\n\n      return this.buildRuleResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Lists existing rules.\n   * @param options - The options include the maxCount and the count of entities to skip, the operation options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  private async getRules(\n    topicName: string,\n    subscriptionName: string,\n    options?: ListRequestOptions & OperationOptions\n  ): Promise<EntitiesResponse<RuleProperties>> {\n    const { span, updatedOptions } = createSpan(\"ServiceBusAdministrationClient-getRules\", options);\n    try {\n      logger.verbose(`Performing management operation - getRules() with options: %j`, options);\n      const fullPath = this.getSubscriptionPath(topicName, subscriptionName) + \"/Rules/\";\n      const response: HttpOperationResponse = await this.listResources(\n        fullPath,\n        updatedOptions,\n        this.ruleResourceSerializer\n      );\n\n      return this.buildListRulesResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private async *listRulesPage(\n    topicName: string,\n    subscriptionName: string,\n    marker?: string,\n    options: OperationOptions & Pick<PageSettings, \"maxPageSize\"> = {}\n  ): AsyncIterableIterator<EntitiesResponse<RuleProperties>> {\n    let listResponse;\n    do {\n      listResponse = await this.getRules(topicName, subscriptionName, {\n        skip: Number(marker),\n        maxCount: options.maxPageSize,\n        ...options,\n      });\n      marker = listResponse.continuationToken;\n      yield listResponse;\n    } while (marker);\n  }\n\n  private async *listRulesAll(\n    topicName: string,\n    subscriptionName: string,\n    options: OperationOptions = {}\n  ): AsyncIterableIterator<RuleProperties> {\n    let marker: string | undefined;\n    for await (const segment of this.listRulesPage(topicName, subscriptionName, marker, options)) {\n      yield* segment;\n    }\n  }\n\n  /**\n   * Returns an async iterable iterator to list all the rules\n   * under the specified subscription.\n   *\n   * .byPage() returns an async iterable iterator to list the rules in pages.\n   *\n   * @returns An asyncIterableIterator that supports paging.\n   */\n  public listRules(\n    topicName: string,\n    subscriptionName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: OperationOptions\n  ): PagedAsyncIterableIterator<RuleProperties, EntitiesResponse<RuleProperties>> {\n    logger.verbose(`Performing management operation - listRules() with options: %j`, options);\n    const iter = this.listRulesAll(topicName, subscriptionName, options);\n    return {\n      /**\n       */\n      next() {\n        return iter.next();\n      },\n      /**\n       */\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      /**\n       */\n      byPage: (settings: PageSettings = {}) => {\n        this.throwIfInvalidContinuationToken(settings.continuationToken);\n        return this.listRulesPage(topicName, subscriptionName, settings.continuationToken, {\n          maxPageSize: settings.maxPageSize,\n          ...options,\n        });\n      },\n    };\n  }\n\n  /**\n   * Updates properties on the Rule by the given name based on the given options.\n   * All rule properties must be set even if one of them is being updated.\n   * Therefore, the suggested flow is to use the output from `getRule()`, update the desired properties in it, and then pass the modified object to `updateRule()`.\n   *\n   * @param rule - Options to configure the Rule being updated and the raw response.\n   * For example, you can configure the filter to apply on associated Topic/Subscription.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityNotFoundError` when requested messaging entity does not exist,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async updateRule(\n    topicName: string,\n    subscriptionName: string,\n    rule: WithResponse<RuleProperties>,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<WithResponse<RuleProperties>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-updateRule\",\n      operationOptions\n    );\n    try {\n      logger.verbose(\n        `Performing management operation - updateRule() for \"${rule.name}\" with options: %j`,\n        rule\n      );\n\n      if (!isJSONLikeObject(rule) || rule === null) {\n        throw new TypeError(\n          `Parameter \"rule\" must be an object of type \"RuleDescription\" and cannot be undefined or null.`\n        );\n      }\n\n      if (!rule.name) {\n        throw new TypeError(`\"name\" attribute of the parameter \"rule\" cannot be undefined.`);\n      }\n\n      const fullPath = this.getRulePath(topicName, subscriptionName, rule.name);\n      const response: HttpOperationResponse = await this.putResource(\n        fullPath,\n        rule,\n        this.ruleResourceSerializer,\n        true,\n        updatedOptions\n      );\n\n      return this.buildRuleResponse(response);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a rule.\n   * @param operationOptions - The options that can be used to abort, trace and control other configurations on the HTTP request.\n   *\n   * Following are errors that can be expected from this operation\n   * @throws `RestError` with code `UnauthorizedRequestError` when given request fails due to authorization problems,\n   * @throws `RestError` with code `MessageEntityNotFoundError` when requested messaging entity does not exist,\n   * @throws `RestError` with code `InvalidOperationError` when requested operation is invalid and we encounter a 403 HTTP status code,\n   * @throws `RestError` with code `ServerBusyError` when the request fails due to server being busy,\n   * @throws `RestError` with code `ServiceError` when receiving unrecognized HTTP status or for a scenarios such as\n   * bad requests or requests resulting in conflicting operation on the server,\n   * @throws `RestError` with code and statusCode representing the standard set of REST API errors.\n   */\n  async deleteRule(\n    topicName: string,\n    subscriptionName: string,\n    ruleName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n    // eslint-disable-next-line @typescript-eslint/ban-types\n  ): Promise<WithResponse<{}>> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-deleteRule\",\n      operationOptions\n    );\n    try {\n      logger.verbose(`Performing management operation - deleteRule() for \"${ruleName}\"`);\n      const fullPath = this.getRulePath(topicName, subscriptionName, ruleName);\n      const response: HttpOperationResponse = await this.deleteResource(\n        fullPath,\n        this.ruleResourceSerializer,\n        updatedOptions\n      );\n\n      return { _response: getHttpResponseOnly(response) };\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Checks whether a given rule exists or not.\n   *\n   */\n  async ruleExists(\n    topicName: string,\n    subscriptionName: string,\n    ruleName: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    operationOptions?: OperationOptions\n  ): Promise<boolean> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-ruleExists\",\n      operationOptions\n    );\n    try {\n      logger.verbose(`Performing management operation - ruleExists() for \"${ruleName}\"`);\n      try {\n        await this.getRule(topicName, subscriptionName, ruleName, updatedOptions);\n      } catch (error) {\n        if (error.code === \"MessageEntityNotFoundError\") {\n          return false;\n        }\n        throw error;\n      }\n      return true;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates or updates a resource based on `isUpdate` parameter.\n   */\n  private async putResource(\n    name: string,\n    entityFields:\n      | InternalQueueOptions\n      | InternalTopicOptions\n      | InternalSubscriptionOptions\n      | CreateRuleOptions,\n    serializer: AtomXmlSerializer,\n    isUpdate: boolean = false,\n    operationOptions: OperationOptions = {}\n  ): Promise<HttpOperationResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-putResource\",\n      operationOptions\n    );\n    try {\n      const webResource: WebResource = new WebResource(this.getUrl(name), \"PUT\");\n      webResource.body = entityFields;\n      if (isUpdate) {\n        webResource.headers.set(\"If-Match\", \"*\");\n      }\n\n      const queueOrSubscriptionFields = entityFields as\n        | InternalQueueOptions\n        | InternalSubscriptionOptions;\n      if (\n        queueOrSubscriptionFields.ForwardTo ||\n        queueOrSubscriptionFields.ForwardDeadLetteredMessagesTo\n      ) {\n        const token =\n          this.credentials instanceof SasServiceClientCredentials\n            ? this.credentials.getToken(this.endpoint).token\n            : (await this.credentials.getToken([AMQPConstants.aadServiceBusScope]))!.token;\n\n        if (queueOrSubscriptionFields.ForwardTo) {\n          webResource.headers.set(\"ServiceBusSupplementaryAuthorization\", token);\n          if (!isAbsoluteUrl(queueOrSubscriptionFields.ForwardTo)) {\n            queueOrSubscriptionFields.ForwardTo = this.endpointWithProtocol.concat(\n              queueOrSubscriptionFields.ForwardTo\n            );\n          }\n        }\n        if (queueOrSubscriptionFields.ForwardDeadLetteredMessagesTo) {\n          webResource.headers.set(\"ServiceBusDlqSupplementaryAuthorization\", token);\n          if (!isAbsoluteUrl(queueOrSubscriptionFields.ForwardDeadLetteredMessagesTo)) {\n            queueOrSubscriptionFields.ForwardDeadLetteredMessagesTo =\n              this.endpointWithProtocol.concat(\n                queueOrSubscriptionFields.ForwardDeadLetteredMessagesTo\n              );\n          }\n        }\n      }\n\n      webResource.headers.set(\"content-type\", \"application/atom+xml;type=entry;charset=utf-8\");\n\n      return executeAtomXmlOperation(this, webResource, serializer, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Gets a resource.\n   */\n  private async getResource(\n    name: string,\n    serializer: AtomXmlSerializer,\n    operationOptions: OperationOptions = {}\n  ): Promise<HttpOperationResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-getResource\",\n      operationOptions\n    );\n    try {\n      const webResource: WebResource = new WebResource(this.getUrl(name), \"GET\");\n\n      const response = await executeAtomXmlOperation(this, webResource, serializer, updatedOptions);\n      if (\n        !isDefined(response.parsedBody) ||\n        (Array.isArray(response.parsedBody) && response.parsedBody.length === 0)\n      ) {\n        const err = new RestError(\n          `The messaging entity \"${name}\" being requested cannot be found.`,\n          \"MessageEntityNotFoundError\",\n          response.status,\n          stripRequest(webResource),\n          stripResponse(response)\n        );\n        throw err;\n      }\n      return response;\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Lists existing resources\n   */\n  private async listResources(\n    name: string,\n    options: ListRequestOptions & OperationOptions = {},\n    serializer: AtomXmlSerializer\n  ): Promise<HttpOperationResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-listResources\",\n      options\n    );\n    try {\n      const queryParams: { [key: string]: string } = {};\n      if (options) {\n        if (options.skip) {\n          queryParams[\"$skip\"] = options.skip.toString();\n        }\n        if (options.maxCount) {\n          queryParams[\"$top\"] = options.maxCount.toString();\n        }\n      }\n\n      const webResource: WebResource = new WebResource(this.getUrl(name, queryParams), \"GET\");\n\n      return executeAtomXmlOperation(this, webResource, serializer, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Deletes a resource.\n   */\n  private async deleteResource(\n    name: string,\n    serializer: AtomXmlSerializer,\n    operationOptions: OperationOptions = {}\n  ): Promise<HttpOperationResponse> {\n    const { span, updatedOptions } = createSpan(\n      \"ServiceBusAdministrationClient-deleteResource\",\n      operationOptions\n    );\n    try {\n      const webResource: WebResource = new WebResource(this.getUrl(name), \"DELETE\");\n\n      return executeAtomXmlOperation(this, webResource, serializer, updatedOptions);\n    } catch (e) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  private getUrl(path: string, queryParams?: { [key: string]: string }): string {\n    const baseUri = `https://${this.endpoint}/${path}`;\n\n    const requestUrl: URLBuilder = URLBuilder.parse(baseUri);\n    requestUrl.setQueryParameter(Constants.API_VERSION_QUERY_KEY, this.serviceVersion);\n\n    if (queryParams) {\n      for (const key of Object.keys(queryParams)) {\n        requestUrl.setQueryParameter(key, queryParams[key]);\n      }\n    }\n\n    return requestUrl.toString();\n  }\n\n  private getSubscriptionPath(topicName: string, subscriptionName: string): string {\n    return topicName + \"/Subscriptions/\" + subscriptionName;\n  }\n\n  private getRulePath(topicName: string, subscriptionName: string, ruleName: string): string {\n    return topicName + \"/Subscriptions/\" + subscriptionName + \"/Rules/\" + ruleName;\n  }\n\n  private getMarkerFromNextLinkUrl(url: string): string | undefined {\n    if (!url) {\n      return undefined;\n    }\n    try {\n      const value = parseURL(url).searchParams.get(Constants.XML_METADATA_MARKER + \"skip\");\n      return value !== null ? value : undefined;\n    } catch (error) {\n      throw new Error(\n        `Unable to parse the '${Constants.XML_METADATA_MARKER}skip' from the next-link in the response ` +\n          error\n      );\n    }\n  }\n\n  private buildNamespacePropertiesResponse(\n    response: HttpOperationResponse\n  ): WithResponse<NamespaceProperties> {\n    try {\n      const namespace = buildNamespace(response.parsedBody);\n      const namespaceResponse: WithResponse<NamespaceProperties> = Object.defineProperty(\n        namespace || {},\n        \"_response\",\n        { value: getHttpResponseOnly(response) }\n      );\n      return namespaceResponse;\n    } catch (err) {\n      logger.logError(err, \"Failure parsing response from service\");\n      throw new RestError(\n        `Error occurred while parsing the response body - cannot form a namespace object using the response from the service.`,\n        RestError.PARSE_ERROR,\n        response.status,\n        stripRequest(response.request),\n        stripResponse(response)\n      );\n    }\n  }\n\n  private buildListQueuesResponse(\n    response: HttpOperationResponse\n  ): EntitiesResponse<QueueProperties> {\n    try {\n      const queues: QueueProperties[] = [];\n      const nextMarker = this.getMarkerFromNextLinkUrl(response.parsedBody.nextLink);\n      if (!Array.isArray(response.parsedBody)) {\n        throw new TypeError(`${response.parsedBody} was expected to be of type Array`);\n      }\n      const rawQueueArray: any = response.parsedBody;\n      for (let i = 0; i < rawQueueArray.length; i++) {\n        const queue = buildQueue(rawQueueArray[i]);\n        if (queue) {\n          queues.push(queue);\n        }\n      }\n      const listQueuesResponse: EntitiesResponse<QueueProperties> = Object.defineProperty(\n        queues,\n        \"_response\",\n        {\n          value: getHttpResponseOnly(response),\n        }\n      );\n      listQueuesResponse.continuationToken = nextMarker;\n      return listQueuesResponse;\n    } catch (err) {\n      logger.logError(err, \"Failure parsing response from service\");\n      throw new RestError(\n        `Error occurred while parsing the response body - cannot form a list of queues using the response from the service.`,\n        RestError.PARSE_ERROR,\n        response.status,\n        stripRequest(response.request),\n        stripResponse(response)\n      );\n    }\n  }\n\n  private buildListQueuesRuntimePropertiesResponse(\n    response: HttpOperationResponse\n  ): EntitiesResponse<QueueRuntimeProperties> {\n    try {\n      const queues: QueueRuntimeProperties[] = [];\n      const nextMarker = this.getMarkerFromNextLinkUrl(response.parsedBody.nextLink);\n      if (!Array.isArray(response.parsedBody)) {\n        throw new TypeError(`${response.parsedBody} was expected to be of type Array`);\n      }\n      const rawQueueArray: any = response.parsedBody;\n      for (let i = 0; i < rawQueueArray.length; i++) {\n        const queue = buildQueueRuntimeProperties(rawQueueArray[i]);\n        if (queue) {\n          queues.push(queue);\n        }\n      }\n      const listQueuesResponse: EntitiesResponse<QueueRuntimeProperties> = Object.defineProperty(\n        queues,\n        \"_response\",\n        {\n          value: getHttpResponseOnly(response),\n        }\n      );\n      listQueuesResponse.continuationToken = nextMarker;\n      return listQueuesResponse;\n    } catch (err) {\n      logger.logError(err, \"Failure parsing response from service\");\n      throw new RestError(\n        `Error occurred while parsing the response body - cannot form a list of queues using the response from the service.`,\n        RestError.PARSE_ERROR,\n        response.status,\n        stripRequest(response.request),\n        stripResponse(response)\n      );\n    }\n  }\n\n  private buildQueueResponse(response: HttpOperationResponse): WithResponse<QueueProperties> {\n    try {\n      const queue = buildQueue(response.parsedBody);\n      const queueResponse: WithResponse<QueueProperties> = Object.defineProperty(\n        queue || {},\n        \"_response\",\n        {\n          value: getHttpResponseOnly(response),\n        }\n      );\n      return queueResponse;\n    } catch (err) {\n      logger.logError(err, \"Failure parsing response from service\");\n      throw new RestError(\n        `Error occurred while parsing the response body - cannot form a queue object using the response from the service.`,\n        RestError.PARSE_ERROR,\n        response.status,\n        stripRequest(response.request),\n        stripResponse(response)\n      );\n    }\n  }\n\n  private buildQueueRuntimePropertiesResponse(\n    response: HttpOperationResponse\n  ): WithResponse<QueueRuntimeProperties> {\n    try {\n      const queue = buildQueueRuntimeProperties(response.parsedBody);\n      const queueResponse: WithResponse<QueueRuntimeProperties> = Object.defineProperty(\n        queue || {},\n        \"_response\",\n        {\n          value: getHttpResponseOnly(response),\n        }\n      );\n      return queueResponse;\n    } catch (err) {\n      logger.logError(err, \"Failure parsing response from service\");\n      throw new RestError(\n        `Error occurred while parsing the response body - cannot form a queue object using the response from the service.`,\n        RestError.PARSE_ERROR,\n        response.status,\n        stripRequest(response.request),\n        stripResponse(response)\n      );\n    }\n  }\n\n  private buildListTopicsResponse(\n    response: HttpOperationResponse\n  ): EntitiesResponse<TopicProperties> {\n    try {\n      const topics: TopicProperties[] = [];\n      const nextMarker = this.getMarkerFromNextLinkUrl(response.parsedBody.nextLink);\n      if (!Array.isArray(response.parsedBody)) {\n        throw new TypeError(`${response.parsedBody} was expected to be of type Array`);\n      }\n      const rawTopicArray: any = response.parsedBody;\n      for (let i = 0; i < rawTopicArray.length; i++) {\n        const topic = buildTopic(rawTopicArray[i]);\n        if (topic) {\n          topics.push(topic);\n        }\n      }\n      const listTopicsResponse: EntitiesResponse<TopicProperties> = Object.defineProperty(\n        topics,\n        \"_response\",\n        {\n          value: getHttpResponseOnly(response),\n        }\n      );\n      listTopicsResponse.continuationToken = nextMarker;\n      return listTopicsResponse;\n    } catch (err) {\n      logger.logError(err, \"Failure parsing response from service\");\n      throw new RestError(\n        `Error occurred while parsing the response body - cannot form a list of topics using the response from the service.`,\n        RestError.PARSE_ERROR,\n        response.status,\n        stripRequest(response.request),\n        stripResponse(response)\n      );\n    }\n  }\n\n  private buildListTopicsRuntimePropertiesResponse(\n    response: HttpOperationResponse\n  ): EntitiesResponse<TopicRuntimeProperties> {\n    try {\n      const topics: TopicRuntimeProperties[] = [];\n      const nextMarker = this.getMarkerFromNextLinkUrl(response.parsedBody.nextLink);\n      if (!Array.isArray(response.parsedBody)) {\n        throw new TypeError(`${response.parsedBody} was expected to be of type Array`);\n      }\n      const rawTopicArray: any = response.parsedBody;\n      for (let i = 0; i < rawTopicArray.length; i++) {\n        const topic = buildTopicRuntimeProperties(rawTopicArray[i]);\n        if (topic) {\n          topics.push(topic);\n        }\n      }\n      const listTopicsResponse: EntitiesResponse<TopicRuntimeProperties> = Object.defineProperty(\n        topics,\n        \"_response\",\n        {\n          value: getHttpResponseOnly(response),\n        }\n      );\n      listTopicsResponse.continuationToken = nextMarker;\n      return listTopicsResponse;\n    } catch (err) {\n      logger.logError(err, \"Failure parsing response from service\");\n      throw new RestError(\n        `Error occurred while parsing the response body - cannot form a list of topics using the response from the service.`,\n        RestError.PARSE_ERROR,\n        response.status,\n        stripRequest(response.request),\n        stripResponse(response)\n      );\n    }\n  }\n  private buildTopicResponse(response: HttpOperationResponse): WithResponse<TopicProperties> {\n    try {\n      const topic = buildTopic(response.parsedBody);\n      const topicResponse: WithResponse<TopicProperties> = Object.defineProperty(\n        topic || {},\n        \"_response\",\n        {\n          value: getHttpResponseOnly(response),\n        }\n      );\n      return topicResponse;\n    } catch (err) {\n      logger.logError(err, \"Failure parsing response from service\");\n      throw new RestError(\n        `Error occurred while parsing the response body - cannot form a topic object using the response from the service.`,\n        RestError.PARSE_ERROR,\n        response.status,\n        stripRequest(response.request),\n        stripResponse(response)\n      );\n    }\n  }\n\n  private buildTopicRuntimePropertiesResponse(\n    response: HttpOperationResponse\n  ): WithResponse<TopicRuntimeProperties> {\n    try {\n      const topic = buildTopicRuntimeProperties(response.parsedBody);\n      const topicResponse: WithResponse<TopicRuntimeProperties> = Object.defineProperty(\n        topic || {},\n        \"_response\",\n        {\n          value: getHttpResponseOnly(response),\n        }\n      );\n      return topicResponse;\n    } catch (err) {\n      logger.logError(err, \"Failure parsing response from service\");\n      throw new RestError(\n        `Error occurred while parsing the response body - cannot form a topic object using the response from the service.`,\n        RestError.PARSE_ERROR,\n        response.status,\n        stripRequest(response.request),\n        stripResponse(response)\n      );\n    }\n  }\n\n  private buildListSubscriptionsResponse(\n    response: HttpOperationResponse\n  ): EntitiesResponse<SubscriptionProperties> {\n    try {\n      const subscriptions: SubscriptionProperties[] = [];\n      const nextMarker = this.getMarkerFromNextLinkUrl(response.parsedBody.nextLink);\n      if (!Array.isArray(response.parsedBody)) {\n        throw new TypeError(`${response.parsedBody} was expected to be of type Array`);\n      }\n      const rawSubscriptionArray: any = response.parsedBody;\n      for (let i = 0; i < rawSubscriptionArray.length; i++) {\n        const subscription = buildSubscription(rawSubscriptionArray[i]);\n        if (subscription) {\n          subscriptions.push(subscription);\n        }\n      }\n      const listSubscriptionsResponse: EntitiesResponse<SubscriptionProperties> =\n        Object.defineProperty(subscriptions, \"_response\", {\n          value: getHttpResponseOnly(response),\n        });\n      listSubscriptionsResponse.continuationToken = nextMarker;\n      return listSubscriptionsResponse;\n    } catch (err) {\n      logger.logError(err, \"Failure parsing response from service\");\n      throw new RestError(\n        `Error occurred while parsing the response body - cannot form a list of subscriptions using the response from the service.`,\n        RestError.PARSE_ERROR,\n        response.status,\n        stripRequest(response.request),\n        stripResponse(response)\n      );\n    }\n  }\n\n  private buildListSubscriptionsRuntimePropertiesResponse(\n    response: HttpOperationResponse\n  ): EntitiesResponse<SubscriptionRuntimeProperties> {\n    try {\n      const subscriptions: SubscriptionRuntimeProperties[] = [];\n      const nextMarker = this.getMarkerFromNextLinkUrl(response.parsedBody.nextLink);\n      if (!Array.isArray(response.parsedBody)) {\n        throw new TypeError(`${response.parsedBody} was expected to be of type Array`);\n      }\n      const rawSubscriptionArray: any = response.parsedBody;\n      for (let i = 0; i < rawSubscriptionArray.length; i++) {\n        const subscription = buildSubscriptionRuntimeProperties(rawSubscriptionArray[i]);\n        if (subscription) {\n          subscriptions.push(subscription);\n        }\n      }\n      const listSubscriptionsResponse: EntitiesResponse<SubscriptionRuntimeProperties> =\n        Object.defineProperty(subscriptions, \"_response\", {\n          value: getHttpResponseOnly(response),\n        });\n      listSubscriptionsResponse.continuationToken = nextMarker;\n      return listSubscriptionsResponse;\n    } catch (err) {\n      logger.logError(err, \"Failure parsing response from service\");\n      throw new RestError(\n        `Error occurred while parsing the response body - cannot form a list of subscriptions using the response from the service.`,\n        RestError.PARSE_ERROR,\n        response.status,\n        stripRequest(response.request),\n        stripResponse(response)\n      );\n    }\n  }\n\n  private buildSubscriptionResponse(\n    response: HttpOperationResponse\n  ): WithResponse<SubscriptionProperties> {\n    try {\n      const subscription = buildSubscription(response.parsedBody);\n      const subscriptionResponse: WithResponse<SubscriptionProperties> = Object.defineProperty(\n        subscription || {},\n        \"_response\",\n        {\n          value: getHttpResponseOnly(response),\n        }\n      );\n      return subscriptionResponse;\n    } catch (err) {\n      logger.logError(err, \"Failure parsing response from service\");\n      throw new RestError(\n        `Error occurred while parsing the response body - cannot form a subscription object using the response from the service.`,\n        RestError.PARSE_ERROR,\n        response.status,\n        stripRequest(response.request),\n        stripResponse(response)\n      );\n    }\n  }\n\n  private buildSubscriptionRuntimePropertiesResponse(\n    response: HttpOperationResponse\n  ): WithResponse<SubscriptionRuntimeProperties> {\n    try {\n      const subscription = buildSubscriptionRuntimeProperties(response.parsedBody);\n      const subscriptionResponse: WithResponse<SubscriptionRuntimeProperties> =\n        Object.defineProperty(subscription || {}, \"_response\", {\n          value: getHttpResponseOnly(response),\n        });\n      return subscriptionResponse;\n    } catch (err) {\n      logger.logError(err, \"Failure parsing response from service\");\n      throw new RestError(\n        `Error occurred while parsing the response body - cannot form a subscription object using the response from the service.`,\n        RestError.PARSE_ERROR,\n        response.status,\n        stripRequest(response.request),\n        stripResponse(response)\n      );\n    }\n  }\n\n  private buildListRulesResponse(\n    response: HttpOperationResponse\n  ): EntitiesResponse<RuleProperties> {\n    try {\n      const rules: RuleProperties[] = [];\n      const nextMarker = this.getMarkerFromNextLinkUrl(response.parsedBody.nextLink);\n      if (!Array.isArray(response.parsedBody)) {\n        throw new TypeError(`${response.parsedBody} was expected to be of type Array`);\n      }\n      const rawRuleArray: any = response.parsedBody;\n      for (let i = 0; i < rawRuleArray.length; i++) {\n        const rule = buildRule(rawRuleArray[i]);\n        if (rule) {\n          rules.push(rule);\n        }\n      }\n      const listRulesResponse: EntitiesResponse<RuleProperties> = Object.defineProperty(\n        rules,\n        \"_response\",\n        {\n          value: getHttpResponseOnly(response),\n        }\n      );\n      listRulesResponse.continuationToken = nextMarker;\n      return listRulesResponse;\n    } catch (err) {\n      logger.logError(err, \"Failure parsing response from service\");\n      throw new RestError(\n        `Error occurred while parsing the response body - cannot form a list of rules using the response from the service.`,\n        RestError.PARSE_ERROR,\n        response.status,\n        stripRequest(response.request),\n        stripResponse(response)\n      );\n    }\n  }\n\n  private buildRuleResponse(response: HttpOperationResponse): WithResponse<RuleProperties> {\n    try {\n      const rule = buildRule(response.parsedBody);\n      const ruleResponse: WithResponse<RuleProperties> = Object.defineProperty(\n        rule || {},\n        \"_response\",\n        {\n          value: getHttpResponseOnly(response),\n        }\n      );\n      return ruleResponse;\n    } catch (err) {\n      logger.logError(err, \"Failure parsing response from service\");\n      throw new RestError(\n        `Error occurred while parsing the response body - cannot form a rule object using the response from the service.`,\n        RestError.PARSE_ERROR,\n        response.status,\n        stripRequest(response.request),\n        stripResponse(response)\n      );\n    }\n  }\n\n  private throwIfInvalidContinuationToken(token: string | undefined): void {\n    if (!(token === undefined || (typeof token === \"string\" && Number(token) >= 0))) {\n      throw new Error(`Invalid continuationToken ${token} provided`);\n    }\n  }\n}\n"]}