{"version":3,"file":"receiverHelper.js","sourceRoot":"","sources":["../../../src/core/receiverHelper.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError } from \"@azure/abort-controller\";\nimport { Receiver, ReceiverEvents } from \"rhea-promise\";\nimport { receiverLogger as logger } from \"../log\";\nimport { ServiceBusError } from \"../serviceBusError\";\n\n/**\n * Wraps the receiver with some higher level operations for managing state\n * like credits, draining, etc...\n *\n * @internal\n */\nexport class ReceiverHelper {\n  private _isSuspended: boolean = true;\n\n  constructor(\n    private _getCurrentReceiver: () => { receiver: Receiver | undefined; logPrefix: string }\n  ) {}\n\n  private _getCurrentReceiverOrError():\n    | \"is undefined\"\n    | \"is not open\"\n    | \"is suspended\"\n    | { receiver: Receiver | undefined; logPrefix: string } {\n    const currentReceiverData = this._getCurrentReceiver();\n\n    if (currentReceiverData.receiver == null) {\n      return \"is undefined\";\n    }\n\n    if (!currentReceiverData.receiver.isOpen()) {\n      return \"is not open\";\n    }\n\n    if (this._isSuspended) {\n      return \"is suspended\";\n    }\n\n    return currentReceiverData;\n  }\n\n  /**\n   * Adds credits to the receiver, respecting any state that\n   * indicates the receiver is closed or should not continue\n   * to receive more messages.\n   *\n   * @param credits - Number of credits to add.\n   * or `stopReceivingMessages` has been called.\n   */\n  addCredit(credits: number): void {\n    const currentReceiverOrError = this._getCurrentReceiverOrError();\n\n    if (typeof currentReceiverOrError === \"string\") {\n      const errorMessage = `Cannot request messages on the receiver since it ${currentReceiverOrError}.`;\n\n      if (currentReceiverOrError === \"is suspended\") {\n        // if a user has suspended the receiver we should consider this a non-retryable\n        // error since it absolutely requires user intervention.\n        throw new AbortError(errorMessage);\n      }\n\n      throw new ServiceBusError(errorMessage, \"GeneralError\");\n    }\n\n    if (currentReceiverOrError.receiver != null) {\n      logger.verbose(`${currentReceiverOrError.logPrefix} Adding ${credits} credits`);\n      currentReceiverOrError.receiver.addCredit(credits);\n    }\n  }\n\n  /**\n   * Drains the credits for the receiver and prevents the `receiverHelper.addCredit()` method from adding credits.\n   * Call `resume()` to enable the `addCredit()` method.\n   */\n  async suspend(): Promise<void> {\n    const { receiver, logPrefix } = this._getCurrentReceiver();\n\n    this._isSuspended = true;\n\n    if (!this._isValidReceiver(receiver)) {\n      return;\n    }\n\n    logger.verbose(\n      `${logPrefix} User has requested to stop receiving new messages, attempting to drain.`\n    );\n\n    return this.drain();\n  }\n\n  /**\n   * Resets tracking so `addCredit` works again by toggling the `_isSuspended` flag.\n   */\n  resume(): void {\n    this._isSuspended = false;\n  }\n\n  isSuspended(): boolean {\n    return this._isSuspended;\n  }\n\n  /**\n   * Initiates a drain for the current receiver and resolves when\n   * the drain has completed.\n   *\n   * NOTE: This method returns immediately if the receiver is not valid or if there\n   * are no pending credits on the receiver (ie: `receiver.credit === 0`).\n   */\n  async drain(): Promise<void> {\n    const { receiver, logPrefix } = this._getCurrentReceiver();\n\n    if (!this._isValidReceiver(receiver)) {\n      // TODO: should we throw?\n      return;\n    }\n\n    if (receiver.credit === 0) {\n      // nothing to drain\n      return;\n    }\n\n    logger.verbose(\n      `${logPrefix} Receiver is starting drain. Remaining credits; ${receiver.credit}`\n    );\n\n    const drainPromise = new Promise<void>((resolve) => {\n      receiver.once(ReceiverEvents.receiverDrained, () => {\n        logger.verbose(`${logPrefix} Receiver has been drained.`);\n        receiver.drain = false;\n        resolve();\n      });\n\n      receiver.drainCredit();\n    });\n\n    return drainPromise;\n  }\n\n  private _isValidReceiver(receiver: Receiver | undefined): receiver is Receiver {\n    return receiver != null && receiver.isOpen();\n  }\n}\n"]}