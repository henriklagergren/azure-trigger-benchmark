// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { getAccountNameFromUrl, getStorageClientContext } from "./utils/utils.common";
import { AnonymousCredential } from "./credentials/AnonymousCredential";
import { isNode } from "@azure/core-http";
import { StorageSharedKeyCredential } from "./credentials/StorageSharedKeyCredential";
/**
 * A StorageClient represents a based client class for {@link QueueServiceClient}, {@link QueueClient} and etc.
 */
export class StorageClient {
    /**
     * Creates an instance of StorageClient.
     * @param url -
     * @param pipeline -
     */
    constructor(url, pipeline) {
        this.url = url;
        this.accountName = getAccountNameFromUrl(url);
        this.pipeline = pipeline;
        this.storageClientContext = getStorageClientContext(url, pipeline);
        // Retrieve credential from the pipeline.
        this.credential = new AnonymousCredential();
        for (const factory of this.pipeline.factories) {
            if ((isNode && factory instanceof StorageSharedKeyCredential) ||
                factory instanceof AnonymousCredential) {
                this.credential = factory;
                break;
            }
            else {
                try {
                    const authPolicy = factory.create();
                    if (authPolicy.constructor.name === "BearerTokenAuthenticationPolicy") {
                        this.credential = factory;
                        break;
                    }
                }
                catch (err) {
                    // ignore errors in creating policy, the client instance may still work without the policy.
                }
            }
        }
    }
}
//# sourceMappingURL=StorageClient.js.map