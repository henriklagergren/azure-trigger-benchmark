import * as pulumi from "@pulumi/pulumi";
/**
 * Encrypts or Decrypts a value using a Key Vault Key.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleKeyVault = azure.keyvault.getKeyVault({
 *     name: "mykeyvault",
 *     resourceGroupName: "some-resource-group",
 * });
 * const exampleKey = exampleKeyVault.then(exampleKeyVault => azure.keyvault.getKey({
 *     name: "some-key",
 *     keyVaultId: exampleKeyVault.id,
 * }));
 * const encrypted = azure.keyvault.getEncryptedValue({
 *     keyVaultKeyId: azurerm_key_vault_key.test.id,
 *     algorithm: "RSA1_5",
 *     plainTextValue: "some-encrypted-value",
 * });
 * export const id = data.azurerm_key_vault_encrypted_value.example.encrypted_data;
 * ```
 */
export declare function getEncryptedValue(args: GetEncryptedValueArgs, opts?: pulumi.InvokeOptions): Promise<GetEncryptedValueResult>;
/**
 * A collection of arguments for invoking getEncryptedValue.
 */
export interface GetEncryptedValueArgs {
    /**
     * The Algorithm which should be used to Decrypt/Encrypt this Value. Possible values are `RSA1_5`, `RSA-OAEP` and `RSA-OAEP-256`.
     */
    algorithm: string;
    /**
     * The Base64 URL Encoded Encrypted Data which should be decrypted into `plainTextValue`.
     */
    encryptedData?: string;
    /**
     * The ID of the Key Vault Key which should be used to Decrypt/Encrypt this Value.
     */
    keyVaultKeyId: string;
    /**
     * The plain-text value which should be Encrypted into `encryptedData`.
     */
    plainTextValue?: string;
}
/**
 * A collection of values returned by getEncryptedValue.
 */
export interface GetEncryptedValueResult {
    readonly algorithm: string;
    readonly encryptedData?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly keyVaultKeyId: string;
    readonly plainTextValue?: string;
}
export declare function getEncryptedValueOutput(args: GetEncryptedValueOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEncryptedValueResult>;
/**
 * A collection of arguments for invoking getEncryptedValue.
 */
export interface GetEncryptedValueOutputArgs {
    /**
     * The Algorithm which should be used to Decrypt/Encrypt this Value. Possible values are `RSA1_5`, `RSA-OAEP` and `RSA-OAEP-256`.
     */
    algorithm: pulumi.Input<string>;
    /**
     * The Base64 URL Encoded Encrypted Data which should be decrypted into `plainTextValue`.
     */
    encryptedData?: pulumi.Input<string>;
    /**
     * The ID of the Key Vault Key which should be used to Decrypt/Encrypt this Value.
     */
    keyVaultKeyId: pulumi.Input<string>;
    /**
     * The plain-text value which should be Encrypted into `encryptedData`.
     */
    plainTextValue?: pulumi.Input<string>;
}
