"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkedServer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Redis Linked Server (ie Geo Location)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example_primaryResourceGroup = new azure.core.ResourceGroup("example-primaryResourceGroup", {location: "East US"});
 * const example_primaryCache = new azure.redis.Cache("example-primaryCache", {
 *     location: example_primaryResourceGroup.location,
 *     resourceGroupName: example_primaryResourceGroup.name,
 *     capacity: 1,
 *     family: "P",
 *     skuName: "Premium",
 *     enableNonSslPort: false,
 *     redisConfiguration: {
 *         maxmemoryReserved: 2,
 *         maxmemoryDelta: 2,
 *         maxmemoryPolicy: "allkeys-lru",
 *     },
 * });
 * const example_secondaryResourceGroup = new azure.core.ResourceGroup("example-secondaryResourceGroup", {location: "West US"});
 * const example_secondaryCache = new azure.redis.Cache("example-secondaryCache", {
 *     location: example_secondaryResourceGroup.location,
 *     resourceGroupName: example_secondaryResourceGroup.name,
 *     capacity: 1,
 *     family: "P",
 *     skuName: "Premium",
 *     enableNonSslPort: false,
 *     redisConfiguration: {
 *         maxmemoryReserved: 2,
 *         maxmemoryDelta: 2,
 *         maxmemoryPolicy: "allkeys-lru",
 *     },
 * });
 * const example_link = new azure.redis.LinkedServer("example-link", {
 *     targetRedisCacheName: example_primaryCache.name,
 *     resourceGroupName: example_primaryCache.resourceGroupName,
 *     linkedRedisCacheId: example_secondaryCache.id,
 *     linkedRedisCacheLocation: example_secondaryCache.location,
 *     serverRole: "Secondary",
 * });
 * ```
 *
 * ## Import
 *
 * Redis can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:redis/linkedServer:LinkedServer example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/Redis/cache1/linkedServers/cache2
 * ```
 */
class LinkedServer extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["linkedRedisCacheId"] = state ? state.linkedRedisCacheId : undefined;
            resourceInputs["linkedRedisCacheLocation"] = state ? state.linkedRedisCacheLocation : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["serverRole"] = state ? state.serverRole : undefined;
            resourceInputs["targetRedisCacheName"] = state ? state.targetRedisCacheName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.linkedRedisCacheId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'linkedRedisCacheId'");
            }
            if ((!args || args.linkedRedisCacheLocation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'linkedRedisCacheLocation'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serverRole === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverRole'");
            }
            if ((!args || args.targetRedisCacheName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetRedisCacheName'");
            }
            resourceInputs["linkedRedisCacheId"] = args ? args.linkedRedisCacheId : undefined;
            resourceInputs["linkedRedisCacheLocation"] = args ? args.linkedRedisCacheLocation : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["serverRole"] = args ? args.serverRole : undefined;
            resourceInputs["targetRedisCacheName"] = args ? args.targetRedisCacheName : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LinkedServer.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing LinkedServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LinkedServer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LinkedServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LinkedServer.__pulumiType;
    }
}
exports.LinkedServer = LinkedServer;
/** @internal */
LinkedServer.__pulumiType = 'azure:redis/linkedServer:LinkedServer';
//# sourceMappingURL=linkedServer.js.map