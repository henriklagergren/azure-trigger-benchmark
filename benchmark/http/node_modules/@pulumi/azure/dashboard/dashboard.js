"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dashboard = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const config = new pulumi.Config();
 * const mdContent = config.get("mdContent") || "# Hello all :)";
 * const videoLink = config.get("videoLink") || "https://www.youtube.com/watch?v=......";
 * const current = azure.core.getSubscription({});
 * const my_group = new azure.core.ResourceGroup("my-group", {location: "West Europe"});
 * const my_board = new azure.portal.Dashboard("my-board", {
 *     resourceGroupName: my_group.name,
 *     location: my_group.location,
 *     tags: {
 *         source: "managed",
 *     },
 *     dashboardProperties: current.then(current => `{
 *    "lenses": {
 *         "0": {
 *             "order": 0,
 *             "parts": {
 *                 "0": {
 *                     "position": {
 *                         "x": 0,
 *                         "y": 0,
 *                         "rowSpan": 2,
 *                         "colSpan": 3
 *                     },
 *                     "metadata": {
 *                         "inputs": [],
 *                         "type": "Extension/HubsExtension/PartType/MarkdownPart",
 *                         "settings": {
 *                             "content": {
 *                                 "settings": {
 *                                     "content": "${mdContent}",
 *                                     "subtitle": "",
 *                                     "title": ""
 *                                 }
 *                             }
 *                         }
 *                     }
 *                 },
 *                 "1": {
 *                     "position": {
 *                         "x": 5,
 *                         "y": 0,
 *                         "rowSpan": 4,
 *                         "colSpan": 6
 *                     },
 *                     "metadata": {
 *                         "inputs": [],
 *                         "type": "Extension/HubsExtension/PartType/VideoPart",
 *                         "settings": {
 *                             "content": {
 *                                 "settings": {
 *                                     "title": "Important Information",
 *                                     "subtitle": "",
 *                                     "src": "${videoLink}",
 *                                     "autoplay": true
 *                                 }
 *                             }
 *                         }
 *                     }
 *                 },
 *                 "2": {
 *                     "position": {
 *                         "x": 0,
 *                         "y": 4,
 *                         "rowSpan": 4,
 *                         "colSpan": 6
 *                     },
 *                     "metadata": {
 *                         "inputs": [
 *                             {
 *                                 "name": "ComponentId",
 *                                 "value": "/subscriptions/${current.subscriptionId}/resourceGroups/myRG/providers/microsoft.insights/components/myWebApp"
 *                             }
 *                         ],
 *                         "type": "Extension/AppInsightsExtension/PartType/AppMapGalPt",
 *                         "settings": {},
 *                         "asset": {
 *                             "idInputName": "ComponentId",
 *                             "type": "ApplicationInsights"
 *                         }
 *                     }
 *                 }
 *             }
 *         }
 *     },
 *     "metadata": {
 *         "model": {
 *             "timeRange": {
 *                 "value": {
 *                     "relative": {
 *                         "duration": 24,
 *                         "timeUnit": 1
 *                     }
 *                 },
 *                 "type": "MsPortalFx.Composition.Configuration.ValueTypes.TimeRange"
 *             },
 *             "filterLocale": {
 *                 "value": "en-us"
 *             },
 *             "filters": {
 *                 "value": {
 *                     "MsPortalFx_TimeRange": {
 *                         "model": {
 *                             "format": "utc",
 *                             "granularity": "auto",
 *                             "relative": "24h"
 *                         },
 *                         "displayCache": {
 *                             "name": "UTC Time",
 *                             "value": "Past 24 hours"
 *                         },
 *                         "filteredPartIds": [
 *                             "StartboardPart-UnboundPart-ae44fef5-76b8-46b0-86f0-2b3f47bad1c7"
 *                         ]
 *                     }
 *                 }
 *             }
 *         }
 *     }
 * }
 * `),
 * });
 * ```
 *
 * It is recommended to follow the steps outlined
 * [here](https://docs.microsoft.com/en-us/azure/azure-portal/azure-portal-dashboards-create-programmatically#fetch-the-json-representation-of-the-dashboard) to create a Dashboard in the Portal and extract the relevant JSON to use in this resource. From the extracted JSON, the contents of the `properties: {}` object can used. Variables can be injected as needed - see above example.
 *
 * ## Import
 *
 * Dashboards can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:dashboard/dashboard:Dashboard my-board /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Portal/dashboards/00000000-0000-0000-0000-000000000000
 * ```
 *
 *  Note the URI in the above sample can be found using the Resource Explorer tool in the Azure Portal.
 *
 * @deprecated azure.dashboard.Dashboard has been deprecated in favor of azure.portal.Dashboard
 */
class Dashboard extends pulumi.CustomResource {
    /** @deprecated azure.dashboard.Dashboard has been deprecated in favor of azure.portal.Dashboard */
    constructor(name, argsOrState, opts) {
        pulumi.log.warn("Dashboard is deprecated: azure.dashboard.Dashboard has been deprecated in favor of azure.portal.Dashboard");
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["dashboardProperties"] = state ? state.dashboardProperties : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["dashboardProperties"] = args ? args.dashboardProperties : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dashboard.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        pulumi.log.warn("Dashboard is deprecated: azure.dashboard.Dashboard has been deprecated in favor of azure.portal.Dashboard");
        return new Dashboard(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }
}
exports.Dashboard = Dashboard;
/** @internal */
Dashboard.__pulumiType = 'azure:dashboard/dashboard:Dashboard';
//# sourceMappingURL=dashboard.js.map