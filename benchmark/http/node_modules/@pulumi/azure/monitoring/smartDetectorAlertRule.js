"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartDetectorAlertRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Monitor Smart Detector Alert Rule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleInsights = new azure.appinsights.Insights("exampleInsights", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     applicationType: "web",
 * });
 * const exampleActionGroup = new azure.monitoring.ActionGroup("exampleActionGroup", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     shortName: "exampleactiongroup",
 * });
 * const exampleSmartDetectorAlertRule = new azure.monitoring.SmartDetectorAlertRule("exampleSmartDetectorAlertRule", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     severity: "Sev0",
 *     scopeResourceIds: [exampleInsights.id],
 *     frequency: "PT1M",
 *     detectorType: "FailureAnomaliesDetector",
 *     actionGroup: {
 *         ids: [azurerm_monitor_action_group.test.id],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Monitor Smart Detector Alert Rule can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:monitoring/smartDetectorAlertRule:SmartDetectorAlertRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.AlertsManagement/smartdetectoralertrules/rule1
 * ```
 */
class SmartDetectorAlertRule extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["actionGroup"] = state ? state.actionGroup : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["detectorType"] = state ? state.detectorType : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["scopeResourceIds"] = state ? state.scopeResourceIds : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["throttlingDuration"] = state ? state.throttlingDuration : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.actionGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actionGroup'");
            }
            if ((!args || args.detectorType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'detectorType'");
            }
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.scopeResourceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeResourceIds'");
            }
            if ((!args || args.severity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'severity'");
            }
            resourceInputs["actionGroup"] = args ? args.actionGroup : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["detectorType"] = args ? args.detectorType : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["scopeResourceIds"] = args ? args.scopeResourceIds : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["throttlingDuration"] = args ? args.throttlingDuration : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SmartDetectorAlertRule.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing SmartDetectorAlertRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SmartDetectorAlertRule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SmartDetectorAlertRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SmartDetectorAlertRule.__pulumiType;
    }
}
exports.SmartDetectorAlertRule = SmartDetectorAlertRule;
/** @internal */
SmartDetectorAlertRule.__pulumiType = 'azure:monitoring/smartDetectorAlertRule:SmartDetectorAlertRule';
//# sourceMappingURL=smartDetectorAlertRule.js.map