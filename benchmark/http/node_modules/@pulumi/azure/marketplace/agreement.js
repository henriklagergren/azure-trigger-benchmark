"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Agreement = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Allows accepting the Legal Terms for a Marketplace Image.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const barracuda = new azure.marketplace.Agreement("barracuda", {
 *     offer: "waf",
 *     plan: "hourly",
 *     publisher: "barracudanetworks",
 * });
 * ```
 *
 * ## Import
 *
 * Marketplace Agreement can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:marketplace/agreement:Agreement example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.MarketplaceOrdering/agreements/publisher1/offers/offer1/plans/plan1
 * ```
 */
class Agreement extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["licenseTextLink"] = state ? state.licenseTextLink : undefined;
            resourceInputs["offer"] = state ? state.offer : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["privacyPolicyLink"] = state ? state.privacyPolicyLink : undefined;
            resourceInputs["publisher"] = state ? state.publisher : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.offer === undefined) && !opts.urn) {
                throw new Error("Missing required property 'offer'");
            }
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.publisher === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publisher'");
            }
            resourceInputs["offer"] = args ? args.offer : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["publisher"] = args ? args.publisher : undefined;
            resourceInputs["licenseTextLink"] = undefined /*out*/;
            resourceInputs["privacyPolicyLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Agreement.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Agreement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Agreement(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Agreement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Agreement.__pulumiType;
    }
}
exports.Agreement = Agreement;
/** @internal */
Agreement.__pulumiType = 'azure:marketplace/agreement:Agreement';
//# sourceMappingURL=agreement.js.map