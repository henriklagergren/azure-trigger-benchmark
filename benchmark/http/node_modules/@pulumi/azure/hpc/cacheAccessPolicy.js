"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheAccessPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a HPC Cache Access Policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("exampleVirtualNetwork", {
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("exampleSubnet", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.1.0/24"],
 * });
 * const exampleCache = new azure.hpc.Cache("exampleCache", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     cacheSizeInGb: 3072,
 *     subnetId: exampleSubnet.id,
 *     skuName: "Standard_2G",
 * });
 * const exampleCacheAccessPolicy = new azure.hpc.CacheAccessPolicy("exampleCacheAccessPolicy", {
 *     hpcCacheId: exampleCache.id,
 *     accessRules: [{
 *         scope: "default",
 *         access: "rw",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * HPC Cache Access Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:hpc/cacheAccessPolicy:CacheAccessPolicy example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/cacheAccessPolicies/policy1
 * ```
 */
class CacheAccessPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessRules"] = state ? state.accessRules : undefined;
            resourceInputs["hpcCacheId"] = state ? state.hpcCacheId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accessRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessRules'");
            }
            if ((!args || args.hpcCacheId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hpcCacheId'");
            }
            resourceInputs["accessRules"] = args ? args.accessRules : undefined;
            resourceInputs["hpcCacheId"] = args ? args.hpcCacheId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CacheAccessPolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing CacheAccessPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CacheAccessPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CacheAccessPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CacheAccessPolicy.__pulumiType;
    }
}
exports.CacheAccessPolicy = CacheAccessPolicy;
/** @internal */
CacheAccessPolicy.__pulumiType = 'azure:hpc/cacheAccessPolicy:CacheAccessPolicy';
//# sourceMappingURL=cacheAccessPolicy.js.map