"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Vmware Cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const examplePrivateCloud = new azure.avs.PrivateCloud("examplePrivateCloud", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     skuName: "av36",
 *     managementCluster: {
 *         size: 3,
 *     },
 *     networkSubnetCidr: "192.168.48.0/22",
 *     internetConnectionEnabled: false,
 *     nsxtPassword: `QazWsx13$Edc`,
 *     vcenterPassword: `WsxEdc23$Rfv`,
 * });
 * const exampleCluster = new azure.avs.Cluster("exampleCluster", {
 *     vmwareCloudId: examplePrivateCloud.id,
 *     clusterNodeCount: 3,
 *     skuName: "av36",
 * });
 * ```
 *
 * ## Import
 *
 * Vmware Clusters can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:avs/cluster:Cluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AVS/privateClouds/privateCloud1/clusters/cluster1
 * ```
 */
class Cluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterNodeCount"] = state ? state.clusterNodeCount : undefined;
            resourceInputs["clusterNumber"] = state ? state.clusterNumber : undefined;
            resourceInputs["hosts"] = state ? state.hosts : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["vmwareCloudId"] = state ? state.vmwareCloudId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterNodeCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterNodeCount'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            if ((!args || args.vmwareCloudId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmwareCloudId'");
            }
            resourceInputs["clusterNodeCount"] = args ? args.clusterNodeCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["vmwareCloudId"] = args ? args.vmwareCloudId : undefined;
            resourceInputs["clusterNumber"] = undefined /*out*/;
            resourceInputs["hosts"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'azure:avs/cluster:Cluster';
//# sourceMappingURL=cluster.js.map