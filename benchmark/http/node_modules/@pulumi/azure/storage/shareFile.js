"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShareFile = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a File within an Azure Storage File Share.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleShare = new azure.storage.Share("exampleShare", {
 *     storageAccountName: exampleAccount.name,
 *     quota: 50,
 * });
 * const exampleShareFile = new azure.storage.ShareFile("exampleShareFile", {
 *     storageShareId: exampleShare.id,
 *     source: "some-local-file.zip",
 * });
 * ```
 *
 * ## Import
 *
 * Directories within an Azure Storage File Share can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:storage/shareFile:ShareFile example https://account1.file.core.windows.net/share1/file1
 * ```
 */
class ShareFile extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["contentDisposition"] = state ? state.contentDisposition : undefined;
            resourceInputs["contentEncoding"] = state ? state.contentEncoding : undefined;
            resourceInputs["contentLength"] = state ? state.contentLength : undefined;
            resourceInputs["contentMd5"] = state ? state.contentMd5 : undefined;
            resourceInputs["contentType"] = state ? state.contentType : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["storageShareId"] = state ? state.storageShareId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.storageShareId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageShareId'");
            }
            resourceInputs["contentDisposition"] = args ? args.contentDisposition : undefined;
            resourceInputs["contentEncoding"] = args ? args.contentEncoding : undefined;
            resourceInputs["contentMd5"] = args ? args.contentMd5 : undefined;
            resourceInputs["contentType"] = args ? args.contentType : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["storageShareId"] = args ? args.storageShareId : undefined;
            resourceInputs["contentLength"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ShareFile.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ShareFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ShareFile(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ShareFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ShareFile.__pulumiType;
    }
}
exports.ShareFile = ShareFile;
/** @internal */
ShareFile.__pulumiType = 'azure:storage/shareFile:ShareFile';
//# sourceMappingURL=shareFile.js.map