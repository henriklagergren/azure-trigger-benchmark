"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccountBlobContainerSASOutput = exports.getAccountBlobContainerSAS = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Use this data source to obtain a Shared Access Signature (SAS Token) for an existing Storage Account Blob Container.
 *
 * Shared access signatures allow fine-grained, ephemeral access control to various aspects of an Azure Storage Account Blob Container.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const rg = new azure.core.ResourceGroup("rg", {location: "West Europe"});
 * const storage = new azure.storage.Account("storage", {
 *     resourceGroupName: rg.name,
 *     location: rg.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const container = new azure.storage.Container("container", {
 *     storageAccountName: storage.name,
 *     containerAccessType: "private",
 * });
 * const example = azure.storage.getAccountBlobContainerSASOutput({
 *     connectionString: storage.primaryConnectionString,
 *     containerName: container.name,
 *     httpsOnly: true,
 *     ipAddress: "168.1.5.65",
 *     start: "2018-03-21",
 *     expiry: "2018-03-21",
 *     permissions: {
 *         read: true,
 *         add: true,
 *         create: false,
 *         write: false,
 *         "delete": true,
 *         list: true,
 *     },
 *     cacheControl: "max-age=5",
 *     contentDisposition: "inline",
 *     contentEncoding: "deflate",
 *     contentLanguage: "en-US",
 *     contentType: "application/json",
 * });
 * export const sasUrlQueryString = example.apply(example => example.sas);
 * ```
 */
function getAccountBlobContainerSAS(args, opts) {
    if (!opts) {
        opts = {};
    }
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("azure:storage/getAccountBlobContainerSAS:getAccountBlobContainerSAS", {
        "cacheControl": args.cacheControl,
        "connectionString": args.connectionString,
        "containerName": args.containerName,
        "contentDisposition": args.contentDisposition,
        "contentEncoding": args.contentEncoding,
        "contentLanguage": args.contentLanguage,
        "contentType": args.contentType,
        "expiry": args.expiry,
        "httpsOnly": args.httpsOnly,
        "ipAddress": args.ipAddress,
        "permissions": args.permissions,
        "start": args.start,
    }, opts);
}
exports.getAccountBlobContainerSAS = getAccountBlobContainerSAS;
function getAccountBlobContainerSASOutput(args, opts) {
    return pulumi.output(args).apply(a => getAccountBlobContainerSAS(a, opts));
}
exports.getAccountBlobContainerSASOutput = getAccountBlobContainerSASOutput;
//# sourceMappingURL=getAccountBlobContainerSAS.js.map