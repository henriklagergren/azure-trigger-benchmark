"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./account"), exports);
__exportStar(require("./accountNetworkRules"), exports);
__exportStar(require("./blob"), exports);
__exportStar(require("./blobInventoryPolicy"), exports);
__exportStar(require("./container"), exports);
__exportStar(require("./customerManagedKey"), exports);
__exportStar(require("./dataLakeGen2Filesystem"), exports);
__exportStar(require("./dataLakeGen2Path"), exports);
__exportStar(require("./encryptionScope"), exports);
__exportStar(require("./getAccount"), exports);
__exportStar(require("./getAccountBlobContainerSAS"), exports);
__exportStar(require("./getAccountSAS"), exports);
__exportStar(require("./getBlob"), exports);
__exportStar(require("./getEncryptionScope"), exports);
__exportStar(require("./getPolicy"), exports);
__exportStar(require("./getShare"), exports);
__exportStar(require("./getStorageContainer"), exports);
__exportStar(require("./getSync"), exports);
__exportStar(require("./getSyncGroup"), exports);
__exportStar(require("./getTableEntity"), exports);
__exportStar(require("./managementPolicy"), exports);
__exportStar(require("./objectReplication"), exports);
__exportStar(require("./queue"), exports);
__exportStar(require("./share"), exports);
__exportStar(require("./shareDirectory"), exports);
__exportStar(require("./shareFile"), exports);
__exportStar(require("./sync"), exports);
__exportStar(require("./syncCloudEndpoint"), exports);
__exportStar(require("./syncGroup"), exports);
__exportStar(require("./table"), exports);
__exportStar(require("./tableEntity"), exports);
__exportStar(require("./zMixins"), exports);
__exportStar(require("./zipBlob"), exports);
// Import resources to register:
const account_1 = require("./account");
const accountNetworkRules_1 = require("./accountNetworkRules");
const blob_1 = require("./blob");
const blobInventoryPolicy_1 = require("./blobInventoryPolicy");
const container_1 = require("./container");
const customerManagedKey_1 = require("./customerManagedKey");
const dataLakeGen2Filesystem_1 = require("./dataLakeGen2Filesystem");
const dataLakeGen2Path_1 = require("./dataLakeGen2Path");
const encryptionScope_1 = require("./encryptionScope");
const managementPolicy_1 = require("./managementPolicy");
const objectReplication_1 = require("./objectReplication");
const queue_1 = require("./queue");
const share_1 = require("./share");
const shareDirectory_1 = require("./shareDirectory");
const shareFile_1 = require("./shareFile");
const sync_1 = require("./sync");
const syncCloudEndpoint_1 = require("./syncCloudEndpoint");
const syncGroup_1 = require("./syncGroup");
const table_1 = require("./table");
const tableEntity_1 = require("./tableEntity");
const zipBlob_1 = require("./zipBlob");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:storage/account:Account":
                return new account_1.Account(name, undefined, { urn });
            case "azure:storage/accountNetworkRules:AccountNetworkRules":
                return new accountNetworkRules_1.AccountNetworkRules(name, undefined, { urn });
            case "azure:storage/blob:Blob":
                return new blob_1.Blob(name, undefined, { urn });
            case "azure:storage/blobInventoryPolicy:BlobInventoryPolicy":
                return new blobInventoryPolicy_1.BlobInventoryPolicy(name, undefined, { urn });
            case "azure:storage/container:Container":
                return new container_1.Container(name, undefined, { urn });
            case "azure:storage/customerManagedKey:CustomerManagedKey":
                return new customerManagedKey_1.CustomerManagedKey(name, undefined, { urn });
            case "azure:storage/dataLakeGen2Filesystem:DataLakeGen2Filesystem":
                return new dataLakeGen2Filesystem_1.DataLakeGen2Filesystem(name, undefined, { urn });
            case "azure:storage/dataLakeGen2Path:DataLakeGen2Path":
                return new dataLakeGen2Path_1.DataLakeGen2Path(name, undefined, { urn });
            case "azure:storage/encryptionScope:EncryptionScope":
                return new encryptionScope_1.EncryptionScope(name, undefined, { urn });
            case "azure:storage/managementPolicy:ManagementPolicy":
                return new managementPolicy_1.ManagementPolicy(name, undefined, { urn });
            case "azure:storage/objectReplication:ObjectReplication":
                return new objectReplication_1.ObjectReplication(name, undefined, { urn });
            case "azure:storage/queue:Queue":
                return new queue_1.Queue(name, undefined, { urn });
            case "azure:storage/share:Share":
                return new share_1.Share(name, undefined, { urn });
            case "azure:storage/shareDirectory:ShareDirectory":
                return new shareDirectory_1.ShareDirectory(name, undefined, { urn });
            case "azure:storage/shareFile:ShareFile":
                return new shareFile_1.ShareFile(name, undefined, { urn });
            case "azure:storage/sync:Sync":
                return new sync_1.Sync(name, undefined, { urn });
            case "azure:storage/syncCloudEndpoint:SyncCloudEndpoint":
                return new syncCloudEndpoint_1.SyncCloudEndpoint(name, undefined, { urn });
            case "azure:storage/syncGroup:SyncGroup":
                return new syncGroup_1.SyncGroup(name, undefined, { urn });
            case "azure:storage/table:Table":
                return new table_1.Table(name, undefined, { urn });
            case "azure:storage/tableEntity:TableEntity":
                return new tableEntity_1.TableEntity(name, undefined, { urn });
            case "azure:storage/zipBlob:ZipBlob":
                return new zipBlob_1.ZipBlob(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "storage/account", _module);
pulumi.runtime.registerResourceModule("azure", "storage/accountNetworkRules", _module);
pulumi.runtime.registerResourceModule("azure", "storage/blob", _module);
pulumi.runtime.registerResourceModule("azure", "storage/blobInventoryPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "storage/container", _module);
pulumi.runtime.registerResourceModule("azure", "storage/customerManagedKey", _module);
pulumi.runtime.registerResourceModule("azure", "storage/dataLakeGen2Filesystem", _module);
pulumi.runtime.registerResourceModule("azure", "storage/dataLakeGen2Path", _module);
pulumi.runtime.registerResourceModule("azure", "storage/encryptionScope", _module);
pulumi.runtime.registerResourceModule("azure", "storage/managementPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "storage/objectReplication", _module);
pulumi.runtime.registerResourceModule("azure", "storage/queue", _module);
pulumi.runtime.registerResourceModule("azure", "storage/share", _module);
pulumi.runtime.registerResourceModule("azure", "storage/shareDirectory", _module);
pulumi.runtime.registerResourceModule("azure", "storage/shareFile", _module);
pulumi.runtime.registerResourceModule("azure", "storage/sync", _module);
pulumi.runtime.registerResourceModule("azure", "storage/syncCloudEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "storage/syncGroup", _module);
pulumi.runtime.registerResourceModule("azure", "storage/table", _module);
pulumi.runtime.registerResourceModule("azure", "storage/tableEntity", _module);
pulumi.runtime.registerResourceModule("azure", "storage/zipBlob", _module);
//# sourceMappingURL=index.js.map