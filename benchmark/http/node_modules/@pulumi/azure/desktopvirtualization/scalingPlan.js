"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScalingPlan = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Virtual Desktop Scaling Plan.
 *
 * ## Disclaimers
 *
 * > **Note** Scaling Plans are currently in preview and are only supported in a limited number of regions. Both the Scaling Plan and any referenced Host Pools must be deployed in a supported region. [Autoscale (preview) for Azure Virtual Desktop host pools](https://docs.microsoft.com/en-us/azure/virtual-desktop/autoscale-scaling-plan).
 *
 * > **Note** Scaling Plans require specific permissions to be granted to the Windows Virtual Desktop application before a 'host_pool' can be configured. [Required Permissions for Scaling Plans](https://docs.microsoft.com/en-us/azure/virtual-desktop/autoscale-scaling-plan#create-a-custom-rbac-role).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleRoleDefinition = new azure.authorization.RoleDefinition("exampleRoleDefinition", {
 *     scope: exampleResourceGroup.id,
 *     description: "AVD AutoScale Role",
 *     permissions: [{
 *         actions: [
 *             "Microsoft.Insights/eventtypes/values/read",
 *             "Microsoft.Compute/virtualMachines/deallocate/action",
 *             "Microsoft.Compute/virtualMachines/restart/action",
 *             "Microsoft.Compute/virtualMachines/powerOff/action",
 *             "Microsoft.Compute/virtualMachines/start/action",
 *             "Microsoft.Compute/virtualMachines/read",
 *             "Microsoft.DesktopVirtualization/hostpools/read",
 *             "Microsoft.DesktopVirtualization/hostpools/write",
 *             "Microsoft.DesktopVirtualization/hostpools/sessionhosts/read",
 *             "Microsoft.DesktopVirtualization/hostpools/sessionhosts/write",
 *             "Microsoft.DesktopVirtualization/hostpools/sessionhosts/usersessions/delete",
 *             "Microsoft.DesktopVirtualization/hostpools/sessionhosts/usersessions/read",
 *             "Microsoft.DesktopVirtualization/hostpools/sessionhosts/usersessions/sendMessage/action",
 *             "Microsoft.DesktopVirtualization/hostpools/sessionhosts/usersessions/read",
 *         ],
 *         notActions: [],
 *     }],
 *     assignableScopes: [exampleResourceGroup.id],
 * });
 * const exampleServicePrincipal = azuread.getServicePrincipal({
 *     displayName: "Windows Virtual Desktop",
 * });
 * const exampleAssignment = new azure.authorization.Assignment("exampleAssignment", {
 *     name: random_uuid.example.result,
 *     scope: exampleResourceGroup.id,
 *     roleDefinitionId: exampleRoleDefinition.roleDefinitionResourceId,
 *     principalId: exampleServicePrincipal.then(exampleServicePrincipal => exampleServicePrincipal.applicationId),
 *     skipServicePrincipalAadCheck: true,
 * });
 * const exampleHostPool = new azure.desktopvirtualization.HostPool("exampleHostPool", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     type: "Pooled",
 *     validateEnvironment: true,
 *     loadBalancerType: "BreadthFirst",
 * });
 * const exampleScalingPlan = new azure.desktopvirtualization.ScalingPlan("exampleScalingPlan", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     friendlyName: "Scaling Plan Example",
 *     description: "Example Scaling Plan",
 *     timeZone: "GMT Standard Time",
 *     schedules: [{
 *         name: "Weekdays",
 *         daysOfWeeks: [
 *             "Monday",
 *             "Tuesday",
 *             "Wednesday",
 *             "Thursday",
 *             "Friday",
 *         ],
 *         rampUpStartTime: "05:00",
 *         rampUpLoadBalancingAlgorithm: "BreadthFirst",
 *         rampUpMinimumHostsPercent: 20,
 *         rampUpCapacityThresholdPercent: 10,
 *         peakStartTime: "09:00",
 *         peakLoadBalancingAlgorithm: "BreadthFirst",
 *         rampDownStartTime: "19:00",
 *         rampDownLoadBalancingAlgorithm: "DepthFirst",
 *         rampDownMinimumHostsPercent: 10,
 *         rampDownForceLogoffUsers: false,
 *         rampDownWaitTimeMinutes: 45,
 *         rampDownNotificationMessage: "Please log off in the next 45 minutes...",
 *         rampDownCapacityThresholdPercent: 5,
 *         rampDownStopHostsWhen: "ZeroSessions",
 *         offPeakStartTime: "22:00",
 *         offPeakLoadBalancingAlgorithm: "DepthFirst",
 *     }],
 *     hostPools: [{
 *         hostpoolId: exampleHostPool.id,
 *         scalingPlanEnabled: true,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Virtual Desktop Scaling Plans can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:desktopvirtualization/scalingPlan:ScalingPlan example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.DesktopVirtualization/scalingPlans/plan1
 * ```
 */
class ScalingPlan extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["exclusionTag"] = state ? state.exclusionTag : undefined;
            resourceInputs["friendlyName"] = state ? state.friendlyName : undefined;
            resourceInputs["hostPools"] = state ? state.hostPools : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["schedules"] = state ? state.schedules : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.schedules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schedules'");
            }
            if ((!args || args.timeZone === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeZone'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["exclusionTag"] = args ? args.exclusionTag : undefined;
            resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
            resourceInputs["hostPools"] = args ? args.hostPools : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["schedules"] = args ? args.schedules : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScalingPlan.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ScalingPlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ScalingPlan(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ScalingPlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScalingPlan.__pulumiType;
    }
}
exports.ScalingPlan = ScalingPlan;
/** @internal */
ScalingPlan.__pulumiType = 'azure:desktopvirtualization/scalingPlan:ScalingPlan';
//# sourceMappingURL=scalingPlan.js.map