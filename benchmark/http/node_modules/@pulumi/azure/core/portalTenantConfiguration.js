"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PortalTenantConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages Portal Tenant Configuration.
 *
 * > **Note:** User has to be `Contributor` or `Owner` at scope `/` for managing this resource.
 *
 * > **Note:** The Service Principal with Tenant Admin can be created by `az ad sp create-for-rbac --name "<sp name>" --role="Contributor" --scopes="/"`.
 *
 * > **Note:** The Service Principal can be granted Tenant Admin permission by `az role assignment create --assignee "<app id>" --role "Contributor" --scope "/"`.
 *
 * > **Note:** While assigning the role to the existing/new Service Principal at the Tenant Scope, the user assigning role must already have the `Owner` role assigned at the Tenant Scope.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.PortalTenantConfiguration("example", {
 *     privateMarkdownStorageEnforced: true,
 * });
 * ```
 *
 * ## Import
 *
 * Portal Tenant Configurations can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:core/portalTenantConfiguration:PortalTenantConfiguration example /providers/Microsoft.Portal/tenantConfigurations/default
 * ```
 */
class PortalTenantConfiguration extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["privateMarkdownStorageEnforced"] = state ? state.privateMarkdownStorageEnforced : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.privateMarkdownStorageEnforced === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateMarkdownStorageEnforced'");
            }
            resourceInputs["privateMarkdownStorageEnforced"] = args ? args.privateMarkdownStorageEnforced : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PortalTenantConfiguration.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing PortalTenantConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PortalTenantConfiguration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PortalTenantConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PortalTenantConfiguration.__pulumiType;
    }
}
exports.PortalTenantConfiguration = PortalTenantConfiguration;
/** @internal */
PortalTenantConfiguration.__pulumiType = 'azure:core/portalTenantConfiguration:PortalTenantConfiguration';
//# sourceMappingURL=portalTenantConfiguration.js.map