"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceProviderRegistration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages the registration of a Resource Provider - which allows access to the API's supported by this Resource Provider.
 *
 * > The Azure Provider will automatically register all of the Resource Providers which it supports on launch (unless opted-out using the `skipProviderRegistration` field within the provider block).
 *
 * !> **Note:** The errors returned from the Azure API when a Resource Provider is unregistered are unclear (example `API version '2019-01-01' was not found for 'Microsoft.Foo'`) - please ensure that all of the necessary Resource Providers you're using are registered - if in doubt **we strongly recommend letting the provider register these for you**.
 *
 * > **Note:** Adding or Removing a Preview Feature will re-register the Resource Provider.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceProviderRegistration("example", {});
 * ```
 * ### Registering A Preview Feature)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceProviderRegistration("example", {
 *     features: [{
 *         name: "AKS-DataPlaneAutoApprove",
 *         registered: true,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Resource Provider Registrations can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:core/resourceProviderRegistration:ResourceProviderRegistration example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.PolicyInsights
 * ```
 */
class ResourceProviderRegistration extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["features"] = state ? state.features : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        }
        else {
            const args = argsOrState;
            resourceInputs["features"] = args ? args.features : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ResourceProviderRegistration.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ResourceProviderRegistration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ResourceProviderRegistration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ResourceProviderRegistration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourceProviderRegistration.__pulumiType;
    }
}
exports.ResourceProviderRegistration = ResourceProviderRegistration;
/** @internal */
ResourceProviderRegistration.__pulumiType = 'azure:core/resourceProviderRegistration:ResourceProviderRegistration';
//# sourceMappingURL=resourceProviderRegistration.js.map