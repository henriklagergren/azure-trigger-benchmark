"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FailoverGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const primary = new azure.sql.SqlServer("primary", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     version: "12.0",
 *     administratorLogin: "sqladmin",
 *     administratorLoginPassword: `pa$$w0rd`,
 * });
 * const secondary = new azure.sql.SqlServer("secondary", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: "northeurope",
 *     version: "12.0",
 *     administratorLogin: "sqladmin",
 *     administratorLoginPassword: `pa$$w0rd`,
 * });
 * const db1 = new azure.sql.Database("db1", {
 *     resourceGroupName: primary.resourceGroupName,
 *     location: primary.location,
 *     serverName: primary.name,
 * });
 * const exampleFailoverGroup = new azure.sql.FailoverGroup("exampleFailoverGroup", {
 *     resourceGroupName: primary.resourceGroupName,
 *     serverName: primary.name,
 *     databases: [db1.id],
 *     partnerServers: [{
 *         id: secondary.id,
 *     }],
 *     readWriteEndpointFailoverPolicy: {
 *         mode: "Automatic",
 *         graceMinutes: 60,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * SQL Failover Groups can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:sql/failoverGroup:FailoverGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/servers/myserver/failovergroups/group1
 * ```
 */
class FailoverGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["databases"] = state ? state.databases : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partnerServers"] = state ? state.partnerServers : undefined;
            resourceInputs["readWriteEndpointFailoverPolicy"] = state ? state.readWriteEndpointFailoverPolicy : undefined;
            resourceInputs["readonlyEndpointFailoverPolicy"] = state ? state.readonlyEndpointFailoverPolicy : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.partnerServers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partnerServers'");
            }
            if ((!args || args.readWriteEndpointFailoverPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'readWriteEndpointFailoverPolicy'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serverName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverName'");
            }
            resourceInputs["databases"] = args ? args.databases : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partnerServers"] = args ? args.partnerServers : undefined;
            resourceInputs["readWriteEndpointFailoverPolicy"] = args ? args.readWriteEndpointFailoverPolicy : undefined;
            resourceInputs["readonlyEndpointFailoverPolicy"] = args ? args.readonlyEndpointFailoverPolicy : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["location"] = undefined /*out*/;
            resourceInputs["role"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FailoverGroup.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing FailoverGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FailoverGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FailoverGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FailoverGroup.__pulumiType;
    }
}
exports.FailoverGroup = FailoverGroup;
/** @internal */
FailoverGroup.__pulumiType = 'azure:sql/failoverGroup:FailoverGroup';
//# sourceMappingURL=failoverGroup.js.map