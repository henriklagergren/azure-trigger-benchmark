"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionAppHybridConnection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Function App Hybrid Connection.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const test = new azure.appservice.ServicePlan("test", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     osType: "Windows",
 *     skuName: "S1",
 * });
 * const exampleNamespace = new azure.relay.Namespace("exampleNamespace", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     skuName: "Standard",
 * });
 * const exampleHybridConnection = new azure.relay.HybridConnection("exampleHybridConnection", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     relayNamespaceName: exampleNamespace.name,
 * });
 * const exampleWindowsFunctionApp = new azure.appservice.WindowsFunctionApp("exampleWindowsFunctionApp", {
 *     location: azurerm_resource_group.test.location,
 *     resourceGroupName: azurerm_resource_group.test.name,
 *     servicePlanId: test.id,
 *     storageAccountName: azurerm_storage_account.test.name,
 *     storageAccountAccessKey: azurerm_storage_account.test.primary_access_key,
 *     siteConfig: {},
 * });
 * const exampleFunctionAppHybridConnection = new azure.appservice.FunctionAppHybridConnection("exampleFunctionAppHybridConnection", {
 *     functionAppId: azurerm_windows_web_app.example.id,
 *     relayId: exampleHybridConnection.id,
 *     hostname: "myhostname.example",
 *     port: 8081,
 * });
 * ```
 *
 * ## Import
 *
 * a Function App Hybrid Connection can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appservice/functionAppHybridConnection:FunctionAppHybridConnection example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1/hybridConnectionNamespaces/hybridConnectionNamespace1/relays/relay1"
 * ```
 */
class FunctionAppHybridConnection extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["functionAppId"] = state ? state.functionAppId : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["namespaceName"] = state ? state.namespaceName : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["relayId"] = state ? state.relayId : undefined;
            resourceInputs["relayName"] = state ? state.relayName : undefined;
            resourceInputs["sendKeyName"] = state ? state.sendKeyName : undefined;
            resourceInputs["sendKeyValue"] = state ? state.sendKeyValue : undefined;
            resourceInputs["serviceBusNamespace"] = state ? state.serviceBusNamespace : undefined;
            resourceInputs["serviceBusSuffix"] = state ? state.serviceBusSuffix : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.functionAppId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionAppId'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.relayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'relayId'");
            }
            resourceInputs["functionAppId"] = args ? args.functionAppId : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["relayId"] = args ? args.relayId : undefined;
            resourceInputs["sendKeyName"] = args ? args.sendKeyName : undefined;
            resourceInputs["namespaceName"] = undefined /*out*/;
            resourceInputs["relayName"] = undefined /*out*/;
            resourceInputs["sendKeyValue"] = undefined /*out*/;
            resourceInputs["serviceBusNamespace"] = undefined /*out*/;
            resourceInputs["serviceBusSuffix"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FunctionAppHybridConnection.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing FunctionAppHybridConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FunctionAppHybridConnection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FunctionAppHybridConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionAppHybridConnection.__pulumiType;
    }
}
exports.FunctionAppHybridConnection = FunctionAppHybridConnection;
/** @internal */
FunctionAppHybridConnection.__pulumiType = 'azure:appservice/functionAppHybridConnection:FunctionAppHybridConnection';
//# sourceMappingURL=functionAppHybridConnection.js.map