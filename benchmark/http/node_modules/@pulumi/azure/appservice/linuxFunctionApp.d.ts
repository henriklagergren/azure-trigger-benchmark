import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Manages a Linux Function App.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleServicePlan = new azure.appservice.ServicePlan("exampleServicePlan", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     osType: "Linux",
 *     skuName: "Y1",
 * });
 * const exampleLinuxFunctionApp = new azure.appservice.LinuxFunctionApp("exampleLinuxFunctionApp", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     storageAccountName: exampleAccount.name,
 *     servicePlanId: exampleServicePlan.id,
 *     siteConfig: {},
 * });
 * ```
 *
 * ## Import
 *
 * Linux Function Apps can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appservice/linuxFunctionApp:LinuxFunctionApp example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1
 * ```
 */
export declare class LinuxFunctionApp extends pulumi.CustomResource {
    /**
     * Get an existing LinuxFunctionApp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LinuxFunctionAppState, opts?: pulumi.CustomResourceOptions): LinuxFunctionApp;
    /**
     * Returns true if the given object is an instance of LinuxFunctionApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is LinuxFunctionApp;
    /**
     * A map of key-value pairs for [App Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
     */
    readonly appSettings: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A `authSettings` block as defined below.
     */
    readonly authSettings: pulumi.Output<outputs.appservice.LinuxFunctionAppAuthSettings>;
    /**
     * A `backup` block as defined below.
     */
    readonly backup: pulumi.Output<outputs.appservice.LinuxFunctionAppBackup | undefined>;
    /**
     * Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting.
     */
    readonly builtinLoggingEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Should the function app use Client Certificates.
     */
    readonly clientCertificateEnabled: pulumi.Output<boolean | undefined>;
    /**
     * The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`.
     */
    readonly clientCertificateMode: pulumi.Output<string | undefined>;
    /**
     * One or more `connectionString` blocks as defined below.
     */
    readonly connectionStrings: pulumi.Output<outputs.appservice.LinuxFunctionAppConnectionString[] | undefined>;
    /**
     * Force disable the content share settings.
     */
    readonly contentShareForceDisabled: pulumi.Output<boolean | undefined>;
    /**
     * The identifier used by App Service to perform domain ownership verification via DNS TXT record.
     */
    readonly customDomainVerificationId: pulumi.Output<string>;
    /**
     * The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan. Defaults to `0`.
     */
    readonly dailyMemoryTimeQuota: pulumi.Output<number | undefined>;
    /**
     * The default hostname of the Linux Function App.
     */
    readonly defaultHostname: pulumi.Output<string>;
    /**
     * Is the Function App enabled?
     */
    readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * The runtime version associated with the Function App. Defaults to `~4`.
     */
    readonly functionsExtensionVersion: pulumi.Output<string | undefined>;
    /**
     * Can the Function App only be accessed via HTTPS? Defaults to `false`.
     */
    readonly httpsOnly: pulumi.Output<boolean | undefined>;
    /**
     * A `identity` block as defined below.
     */
    readonly identity: pulumi.Output<outputs.appservice.LinuxFunctionAppIdentity | undefined>;
    /**
     * The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/en-us/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
     */
    readonly keyVaultReferenceIdentityId: pulumi.Output<string>;
    /**
     * The Kind value for this Linux Function App.
     */
    readonly kind: pulumi.Output<string>;
    /**
     * The Azure Region where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
     */
    readonly location: pulumi.Output<string>;
    /**
     * The name which should be used for this Linux Function App. Changing this forces a new Linux Function App to be created.
     */
    readonly name: pulumi.Output<string>;
    /**
     * A list of outbound IP addresses. For example `["52.23.25.3", "52.143.43.12"]`
     */
    readonly outboundIpAddressLists: pulumi.Output<string[]>;
    /**
     * A comma separated list of outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12`.
     */
    readonly outboundIpAddresses: pulumi.Output<string>;
    /**
     * A list of possible outbound IP addresses, not all of which are necessarily in use. This is a superset of `outboundIpAddressList`. For example `["52.23.25.3", "52.143.43.12"]`.
     */
    readonly possibleOutboundIpAddressLists: pulumi.Output<string[]>;
    /**
     * A comma separated list of possible outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12,52.143.43.17`. This is a superset of `outboundIpAddresses`. For example `["52.23.25.3", "52.143.43.12","52.143.43.17"]`.
     */
    readonly possibleOutboundIpAddresses: pulumi.Output<string>;
    /**
     * The name of the Resource Group where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
     */
    readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The ID of the App Service Plan within which to create this Function App.
     */
    readonly servicePlanId: pulumi.Output<string>;
    /**
     * A `siteConfig` block as defined below.
     */
    readonly siteConfig: pulumi.Output<outputs.appservice.LinuxFunctionAppSiteConfig>;
    /**
     * A `siteCredential` block as defined below.
     */
    readonly siteCredentials: pulumi.Output<outputs.appservice.LinuxFunctionAppSiteCredential[]>;
    /**
     * The access key which will be used to access the backend storage account for the Function App. Conflicts with `storageUsesManagedIdentity`.
     */
    readonly storageAccountAccessKey: pulumi.Output<string | undefined>;
    /**
     * The backend storage account name which will be used by this Function App.
     */
    readonly storageAccountName: pulumi.Output<string | undefined>;
    /**
     * The Key Vault Secret ID, optionally including version, that contains the Connection String to connect to the storage account for this Function App.
     */
    readonly storageKeyVaultSecretId: pulumi.Output<string | undefined>;
    /**
     * Should the Function App use Managed Identity to access the storage account. Conflicts with `storageAccountAccessKey`.
     */
    readonly storageUsesManagedIdentity: pulumi.Output<boolean | undefined>;
    /**
     * A mapping of tags which should be assigned to the Linux Function App.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Create a LinuxFunctionApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LinuxFunctionAppArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering LinuxFunctionApp resources.
 */
export interface LinuxFunctionAppState {
    /**
     * A map of key-value pairs for [App Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
     */
    appSettings?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A `authSettings` block as defined below.
     */
    authSettings?: pulumi.Input<inputs.appservice.LinuxFunctionAppAuthSettings>;
    /**
     * A `backup` block as defined below.
     */
    backup?: pulumi.Input<inputs.appservice.LinuxFunctionAppBackup>;
    /**
     * Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting.
     */
    builtinLoggingEnabled?: pulumi.Input<boolean>;
    /**
     * Should the function app use Client Certificates.
     */
    clientCertificateEnabled?: pulumi.Input<boolean>;
    /**
     * The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`.
     */
    clientCertificateMode?: pulumi.Input<string>;
    /**
     * One or more `connectionString` blocks as defined below.
     */
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.appservice.LinuxFunctionAppConnectionString>[]>;
    /**
     * Force disable the content share settings.
     */
    contentShareForceDisabled?: pulumi.Input<boolean>;
    /**
     * The identifier used by App Service to perform domain ownership verification via DNS TXT record.
     */
    customDomainVerificationId?: pulumi.Input<string>;
    /**
     * The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan. Defaults to `0`.
     */
    dailyMemoryTimeQuota?: pulumi.Input<number>;
    /**
     * The default hostname of the Linux Function App.
     */
    defaultHostname?: pulumi.Input<string>;
    /**
     * Is the Function App enabled?
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The runtime version associated with the Function App. Defaults to `~4`.
     */
    functionsExtensionVersion?: pulumi.Input<string>;
    /**
     * Can the Function App only be accessed via HTTPS? Defaults to `false`.
     */
    httpsOnly?: pulumi.Input<boolean>;
    /**
     * A `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.appservice.LinuxFunctionAppIdentity>;
    /**
     * The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/en-us/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
     */
    keyVaultReferenceIdentityId?: pulumi.Input<string>;
    /**
     * The Kind value for this Linux Function App.
     */
    kind?: pulumi.Input<string>;
    /**
     * The Azure Region where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Linux Function App. Changing this forces a new Linux Function App to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of outbound IP addresses. For example `["52.23.25.3", "52.143.43.12"]`
     */
    outboundIpAddressLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A comma separated list of outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12`.
     */
    outboundIpAddresses?: pulumi.Input<string>;
    /**
     * A list of possible outbound IP addresses, not all of which are necessarily in use. This is a superset of `outboundIpAddressList`. For example `["52.23.25.3", "52.143.43.12"]`.
     */
    possibleOutboundIpAddressLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A comma separated list of possible outbound IP addresses as a string. For example `52.23.25.3,52.143.43.12,52.143.43.17`. This is a superset of `outboundIpAddresses`. For example `["52.23.25.3", "52.143.43.12","52.143.43.17"]`.
     */
    possibleOutboundIpAddresses?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The ID of the App Service Plan within which to create this Function App.
     */
    servicePlanId?: pulumi.Input<string>;
    /**
     * A `siteConfig` block as defined below.
     */
    siteConfig?: pulumi.Input<inputs.appservice.LinuxFunctionAppSiteConfig>;
    /**
     * A `siteCredential` block as defined below.
     */
    siteCredentials?: pulumi.Input<pulumi.Input<inputs.appservice.LinuxFunctionAppSiteCredential>[]>;
    /**
     * The access key which will be used to access the backend storage account for the Function App. Conflicts with `storageUsesManagedIdentity`.
     */
    storageAccountAccessKey?: pulumi.Input<string>;
    /**
     * The backend storage account name which will be used by this Function App.
     */
    storageAccountName?: pulumi.Input<string>;
    /**
     * The Key Vault Secret ID, optionally including version, that contains the Connection String to connect to the storage account for this Function App.
     */
    storageKeyVaultSecretId?: pulumi.Input<string>;
    /**
     * Should the Function App use Managed Identity to access the storage account. Conflicts with `storageAccountAccessKey`.
     */
    storageUsesManagedIdentity?: pulumi.Input<boolean>;
    /**
     * A mapping of tags which should be assigned to the Linux Function App.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
/**
 * The set of arguments for constructing a LinuxFunctionApp resource.
 */
export interface LinuxFunctionAppArgs {
    /**
     * A map of key-value pairs for [App Settings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-app-settings) and custom values.
     */
    appSettings?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A `authSettings` block as defined below.
     */
    authSettings?: pulumi.Input<inputs.appservice.LinuxFunctionAppAuthSettings>;
    /**
     * A `backup` block as defined below.
     */
    backup?: pulumi.Input<inputs.appservice.LinuxFunctionAppBackup>;
    /**
     * Should built in logging be enabled. Configures `AzureWebJobsDashboard` app setting based on the configured storage setting.
     */
    builtinLoggingEnabled?: pulumi.Input<boolean>;
    /**
     * Should the function app use Client Certificates.
     */
    clientCertificateEnabled?: pulumi.Input<boolean>;
    /**
     * The mode of the Function App's client certificates requirement for incoming requests. Possible values are `Required`, `Optional`, and `OptionalInteractiveUser`.
     */
    clientCertificateMode?: pulumi.Input<string>;
    /**
     * One or more `connectionString` blocks as defined below.
     */
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.appservice.LinuxFunctionAppConnectionString>[]>;
    /**
     * Force disable the content share settings.
     */
    contentShareForceDisabled?: pulumi.Input<boolean>;
    /**
     * The amount of memory in gigabyte-seconds that your application is allowed to consume per day. Setting this value only affects function apps under the consumption plan. Defaults to `0`.
     */
    dailyMemoryTimeQuota?: pulumi.Input<number>;
    /**
     * Is the Function App enabled?
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The runtime version associated with the Function App. Defaults to `~4`.
     */
    functionsExtensionVersion?: pulumi.Input<string>;
    /**
     * Can the Function App only be accessed via HTTPS? Defaults to `false`.
     */
    httpsOnly?: pulumi.Input<boolean>;
    /**
     * A `identity` block as defined below.
     */
    identity?: pulumi.Input<inputs.appservice.LinuxFunctionAppIdentity>;
    /**
     * The User Assigned Identity ID used for accessing KeyVault secrets. The identity must be assigned to the application in the `identity` block. [For more information see - Access vaults with a user-assigned identity](https://docs.microsoft.com/en-us/azure/app-service/app-service-key-vault-references#access-vaults-with-a-user-assigned-identity)
     */
    keyVaultReferenceIdentityId?: pulumi.Input<string>;
    /**
     * The Azure Region where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The name which should be used for this Linux Function App. Changing this forces a new Linux Function App to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the Resource Group where the Linux Function App should exist. Changing this forces a new Linux Function App to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The ID of the App Service Plan within which to create this Function App.
     */
    servicePlanId: pulumi.Input<string>;
    /**
     * A `siteConfig` block as defined below.
     */
    siteConfig: pulumi.Input<inputs.appservice.LinuxFunctionAppSiteConfig>;
    /**
     * The access key which will be used to access the backend storage account for the Function App. Conflicts with `storageUsesManagedIdentity`.
     */
    storageAccountAccessKey?: pulumi.Input<string>;
    /**
     * The backend storage account name which will be used by this Function App.
     */
    storageAccountName?: pulumi.Input<string>;
    /**
     * The Key Vault Secret ID, optionally including version, that contains the Connection String to connect to the storage account for this Function App.
     */
    storageKeyVaultSecretId?: pulumi.Input<string>;
    /**
     * Should the Function App use Managed Identity to access the storage account. Conflicts with `storageAccountAccessKey`.
     */
    storageUsesManagedIdentity?: pulumi.Input<boolean>;
    /**
     * A mapping of tags which should be assigned to the Linux Function App.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
