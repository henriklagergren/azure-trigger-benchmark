import * as pulumi from "@pulumi/pulumi";
/**
 * Manages an App Service: Service Plan.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleServicePlan = new azure.appservice.ServicePlan("exampleServicePlan", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: "West Europe",
 *     osType: "Linux",
 *     skuName: "P1V2",
 * });
 * ```
 *
 * ## Import
 *
 * AppServices can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appservice/servicePlan:ServicePlan example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/serverfarms/farm1
 * ```
 */
export declare class ServicePlan extends pulumi.CustomResource {
    /**
     * Get an existing ServicePlan resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServicePlanState, opts?: pulumi.CustomResourceOptions): ServicePlan;
    /**
     * Returns true if the given object is an instance of ServicePlan.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ServicePlan;
    /**
     * The ID of the App Service Environment to create this Service Plan in.
     */
    readonly appServiceEnvironmentId: pulumi.Output<string | undefined>;
    /**
     * A string representing the Kind of Service Plan.
     */
    readonly kind: pulumi.Output<string>;
    /**
     * The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
     */
    readonly location: pulumi.Output<string>;
    /**
     * The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
     */
    readonly maximumElasticWorkerCount: pulumi.Output<number>;
    /**
     * The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`.
     */
    readonly osType: pulumi.Output<string>;
    /**
     * Should Per Site Scaling be enabled. Defaults to `false`.
     */
    readonly perSiteScalingEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Whether this is a reserved Service Plan Type. `true` if `osType` is `Linux`, otherwise `false`.
     */
    readonly reserved: pulumi.Output<boolean>;
    /**
     * The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
     */
    readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `FREE`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `P1v2`, `P2v2`, `P3v2`, `P1v3`, `P2v3`, `P3v3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, and `WS3`.
     */
    readonly skuName: pulumi.Output<string>;
    /**
     * A mapping of tags which should be assigned to the AppService.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * The number of Workers (instances) to be allocated.
     */
    readonly workerCount: pulumi.Output<number>;
    /**
     * Should the Service Plan balance across Availability Zones in the region. Defaults to `false`.
     */
    readonly zoneBalancingEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Create a ServicePlan resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServicePlanArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ServicePlan resources.
 */
export interface ServicePlanState {
    /**
     * The ID of the App Service Environment to create this Service Plan in.
     */
    appServiceEnvironmentId?: pulumi.Input<string>;
    /**
     * A string representing the Kind of Service Plan.
     */
    kind?: pulumi.Input<string>;
    /**
     * The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
     */
    maximumElasticWorkerCount?: pulumi.Input<number>;
    /**
     * The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`.
     */
    osType?: pulumi.Input<string>;
    /**
     * Should Per Site Scaling be enabled. Defaults to `false`.
     */
    perSiteScalingEnabled?: pulumi.Input<boolean>;
    /**
     * Whether this is a reserved Service Plan Type. `true` if `osType` is `Linux`, otherwise `false`.
     */
    reserved?: pulumi.Input<boolean>;
    /**
     * The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `FREE`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `P1v2`, `P2v2`, `P3v2`, `P1v3`, `P2v3`, `P3v3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, and `WS3`.
     */
    skuName?: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the AppService.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The number of Workers (instances) to be allocated.
     */
    workerCount?: pulumi.Input<number>;
    /**
     * Should the Service Plan balance across Availability Zones in the region. Defaults to `false`.
     */
    zoneBalancingEnabled?: pulumi.Input<boolean>;
}
/**
 * The set of arguments for constructing a ServicePlan resource.
 */
export interface ServicePlanArgs {
    /**
     * The ID of the App Service Environment to create this Service Plan in.
     */
    appServiceEnvironmentId?: pulumi.Input<string>;
    /**
     * The Azure Region where the Service Plan should exist. Changing this forces a new AppService to be created.
     */
    location?: pulumi.Input<string>;
    /**
     * The maximum number of workers to use in an Elastic SKU Plan. Cannot be set unless using an Elastic SKU.
     */
    maximumElasticWorkerCount?: pulumi.Input<number>;
    /**
     * The name which should be used for this Service Plan. Changing this forces a new AppService to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The O/S type for the App Services to be hosted in this plan. Possible values include `Windows`, `Linux`, and `WindowsContainer`.
     */
    osType: pulumi.Input<string>;
    /**
     * Should Per Site Scaling be enabled. Defaults to `false`.
     */
    perSiteScalingEnabled?: pulumi.Input<boolean>;
    /**
     * The name of the Resource Group where the AppService should exist. Changing this forces a new AppService to be created.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The SKU for the plan. Possible values include `B1`, `B2`, `B3`, `D1`, `F1`, `FREE`, `I1`, `I2`, `I3`, `I1v2`, `I2v2`, `I3v2`, `P1v2`, `P2v2`, `P3v2`, `P1v3`, `P2v3`, `P3v3`, `S1`, `S2`, `S3`, `SHARED`, `EP1`, `EP2`, `EP3`, `WS1`, `WS2`, and `WS3`.
     */
    skuName: pulumi.Input<string>;
    /**
     * A mapping of tags which should be assigned to the AppService.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The number of Workers (instances) to be allocated.
     */
    workerCount?: pulumi.Input<number>;
    /**
     * Should the Service Plan balance across Availability Zones in the region. Defaults to `false`.
     */
    zoneBalancingEnabled?: pulumi.Input<boolean>;
}
