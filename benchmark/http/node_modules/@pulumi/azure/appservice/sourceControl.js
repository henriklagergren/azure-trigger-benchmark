"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceControl = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an App Service Web App or Function App Source Control Configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleServicePlan = new azure.appservice.ServicePlan("exampleServicePlan", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: "West Europe",
 *     osType: "Linux",
 *     skuName: "P1V2",
 * });
 * const exampleLinuxWebApp = new azure.appservice.LinuxWebApp("exampleLinuxWebApp", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleServicePlan.location,
 *     servicePlanId: exampleServicePlan.id,
 *     siteConfig: {},
 * });
 * const exampleSourceControl = new azure.appservice.SourceControl("exampleSourceControl", {
 *     appId: exampleLinuxWebApp.id,
 *     repoUrl: "https://github.com/Azure-Samples/python-docs-hello-world",
 *     branch: "master",
 * });
 * ```
 *
 * ## Import
 *
 * App Service Source Controls can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appservice/sourceControl:SourceControl example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1
 * ```
 */
class SourceControl extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["appId"] = state ? state.appId : undefined;
            resourceInputs["branch"] = state ? state.branch : undefined;
            resourceInputs["githubActionConfiguration"] = state ? state.githubActionConfiguration : undefined;
            resourceInputs["repoUrl"] = state ? state.repoUrl : undefined;
            resourceInputs["rollbackEnabled"] = state ? state.rollbackEnabled : undefined;
            resourceInputs["scmType"] = state ? state.scmType : undefined;
            resourceInputs["useLocalGit"] = state ? state.useLocalGit : undefined;
            resourceInputs["useManualIntegration"] = state ? state.useManualIntegration : undefined;
            resourceInputs["useMercurial"] = state ? state.useMercurial : undefined;
            resourceInputs["usesGithubAction"] = state ? state.usesGithubAction : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.appId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appId'");
            }
            resourceInputs["appId"] = args ? args.appId : undefined;
            resourceInputs["branch"] = args ? args.branch : undefined;
            resourceInputs["githubActionConfiguration"] = args ? args.githubActionConfiguration : undefined;
            resourceInputs["repoUrl"] = args ? args.repoUrl : undefined;
            resourceInputs["rollbackEnabled"] = args ? args.rollbackEnabled : undefined;
            resourceInputs["useLocalGit"] = args ? args.useLocalGit : undefined;
            resourceInputs["useManualIntegration"] = args ? args.useManualIntegration : undefined;
            resourceInputs["useMercurial"] = args ? args.useMercurial : undefined;
            resourceInputs["scmType"] = undefined /*out*/;
            resourceInputs["usesGithubAction"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SourceControl.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing SourceControl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SourceControl(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SourceControl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceControl.__pulumiType;
    }
}
exports.SourceControl = SourceControl;
/** @internal */
SourceControl.__pulumiType = 'azure:appservice/sourceControl:SourceControl';
//# sourceMappingURL=sourceControl.js.map