"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedCertificate = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * This certificate can be used to secure custom domains on App Services (Windows and Linux) hosted on an App Service Plan of Basic and above (free and shared tiers are not supported).
 *
 * > NOTE: A certificate is valid for six months, and about a month before the certificateâ€™s expiration date, App Services renews/rotates the certificate. This is managed by Azure and doesn't requre this resource to be changed or reprovisioned. It will change the `thumbprint` computed attribute the next time the resource is refreshed after rotation occurs, so keep that in mind if you have any dependencies on this attribute directly.
 *
 * ## Import
 *
 * App Service Managed Certificates can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appservice/managedCertificate:ManagedCertificate example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Web/certificates/customhost.contoso.com
 * ```
 */
class ManagedCertificate extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["canonicalName"] = state ? state.canonicalName : undefined;
            resourceInputs["customHostnameBindingId"] = state ? state.customHostnameBindingId : undefined;
            resourceInputs["expirationDate"] = state ? state.expirationDate : undefined;
            resourceInputs["friendlyName"] = state ? state.friendlyName : undefined;
            resourceInputs["hostNames"] = state ? state.hostNames : undefined;
            resourceInputs["issueDate"] = state ? state.issueDate : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["subjectName"] = state ? state.subjectName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["thumbprint"] = state ? state.thumbprint : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.customHostnameBindingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customHostnameBindingId'");
            }
            resourceInputs["customHostnameBindingId"] = args ? args.customHostnameBindingId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["canonicalName"] = undefined /*out*/;
            resourceInputs["expirationDate"] = undefined /*out*/;
            resourceInputs["friendlyName"] = undefined /*out*/;
            resourceInputs["hostNames"] = undefined /*out*/;
            resourceInputs["issueDate"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["subjectName"] = undefined /*out*/;
            resourceInputs["thumbprint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedCertificate.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ManagedCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ManagedCertificate(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ManagedCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedCertificate.__pulumiType;
    }
}
exports.ManagedCertificate = ManagedCertificate;
/** @internal */
ManagedCertificate.__pulumiType = 'azure:appservice/managedCertificate:ManagedCertificate';
//# sourceMappingURL=managedCertificate.js.map