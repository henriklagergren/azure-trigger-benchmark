import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Manages a Function App Function.
 *
 * ## Example Usage
 * ### Basic HTTP Trigger
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleServicePlan = new azure.appservice.ServicePlan("exampleServicePlan", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     osType: "Linux",
 *     skuName: "S1",
 * });
 * const exampleLinuxFunctionApp = new azure.appservice.LinuxFunctionApp("exampleLinuxFunctionApp", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     servicePlanId: exampleServicePlan.id,
 *     storageAccountName: exampleAccount.name,
 *     storageAccountAccessKey: exampleAccount.primaryAccessKey,
 *     siteConfig: {
 *         applicationStack: {
 *             pythonVersion: "3.9",
 *         },
 *     },
 * });
 * const exampleFunctionAppFunction = new azure.appservice.FunctionAppFunction("exampleFunctionAppFunction", {
 *     functionAppId: exampleLinuxFunctionApp.id,
 *     language: "Python",
 *     testData: JSON.stringify({
 *         name: "Azure",
 *     }),
 *     configJson: JSON.stringify({
 *         bindings: [
 *             {
 *                 authLevel: "function",
 *                 direction: "in",
 *                 methods: [
 *                     "get",
 *                     "post",
 *                 ],
 *                 name: "req",
 *                 type: "httpTrigger",
 *             },
 *             {
 *                 direction: "out",
 *                 name: `$return`,
 *                 type: "http",
 *             },
 *         ],
 *     }),
 * });
 * ```
 * ### HTTP Trigger With Code Upload
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * from "fs";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleServicePlan = new azure.appservice.ServicePlan("exampleServicePlan", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     osType: "Windows",
 *     skuName: "S1",
 * });
 * const test = new azure.appservice.WindowsFunctionApp("test", {
 *     location: azurerm_resource_group.test.location,
 *     resourceGroupName: azurerm_resource_group.test.name,
 *     servicePlanId: azurerm_service_plan.test.id,
 *     storageAccountName: azurerm_storage_account.test.name,
 *     storageAccountAccessKey: azurerm_storage_account.test.primary_access_key,
 *     siteConfig: {
 *         applicationStack: {
 *             dotnetVersion: "6",
 *         },
 *     },
 * });
 * const exampleFunctionAppFunction = new azure.appservice.FunctionAppFunction("exampleFunctionAppFunction", {
 *     functionAppId: azurerm_linux_function_app.example.id,
 *     language: "CSharp",
 *     files: [{
 *         name: "run.csx",
 *         content: fs.readFileSync("exampledata/run.csx"),
 *     }],
 *     testData: JSON.stringify({
 *         name: "Azure",
 *     }),
 *     configJson: JSON.stringify({
 *         bindings: [
 *             {
 *                 authLevel: "function",
 *                 direction: "in",
 *                 methods: [
 *                     "get",
 *                     "post",
 *                 ],
 *                 name: "req",
 *                 type: "httpTrigger",
 *             },
 *             {
 *                 direction: "out",
 *                 name: `$return`,
 *                 type: "http",
 *             },
 *         ],
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * a Function App Function can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appservice/functionAppFunction:FunctionAppFunction example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1/functions/function1"
 * ```
 */
export declare class FunctionAppFunction extends pulumi.CustomResource {
    /**
     * Get an existing FunctionAppFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionAppFunctionState, opts?: pulumi.CustomResourceOptions): FunctionAppFunction;
    /**
     * Returns true if the given object is an instance of FunctionAppFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is FunctionAppFunction;
    /**
     * The config for this Function in JSON format.
     */
    readonly configJson: pulumi.Output<string>;
    /**
     * The URL of the configuration JSON.
     */
    readonly configUrl: pulumi.Output<string>;
    /**
     * Should this function be enabled. Defaults to `true`.
     */
    readonly enabled: pulumi.Output<boolean | undefined>;
    /**
     * A `file` block as detailed below. Changing this forces a new resource to be created.
     */
    readonly files: pulumi.Output<outputs.appservice.FunctionAppFunctionFile[] | undefined>;
    /**
     * The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
     */
    readonly functionAppId: pulumi.Output<string>;
    /**
     * The invocation URL.
     */
    readonly invocationUrl: pulumi.Output<string>;
    /**
     * The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
     */
    readonly language: pulumi.Output<string | undefined>;
    /**
     * The name of the function. Changing this forces a new resource to be created.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The Script root path URL.
     */
    readonly scriptRootPathUrl: pulumi.Output<string>;
    /**
     * The script URL.
     */
    readonly scriptUrl: pulumi.Output<string>;
    /**
     * The URL for the Secrets File.
     */
    readonly secretsFileUrl: pulumi.Output<string>;
    /**
     * The test data for the function.
     */
    readonly testData: pulumi.Output<string | undefined>;
    /**
     * The Test data URL.
     */
    readonly testDataUrl: pulumi.Output<string>;
    /**
     * The function URL.
     */
    readonly url: pulumi.Output<string>;
    /**
     * Create a FunctionAppFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionAppFunctionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering FunctionAppFunction resources.
 */
export interface FunctionAppFunctionState {
    /**
     * The config for this Function in JSON format.
     */
    configJson?: pulumi.Input<string>;
    /**
     * The URL of the configuration JSON.
     */
    configUrl?: pulumi.Input<string>;
    /**
     * Should this function be enabled. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A `file` block as detailed below. Changing this forces a new resource to be created.
     */
    files?: pulumi.Input<pulumi.Input<inputs.appservice.FunctionAppFunctionFile>[]>;
    /**
     * The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
     */
    functionAppId?: pulumi.Input<string>;
    /**
     * The invocation URL.
     */
    invocationUrl?: pulumi.Input<string>;
    /**
     * The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
     */
    language?: pulumi.Input<string>;
    /**
     * The name of the function. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The Script root path URL.
     */
    scriptRootPathUrl?: pulumi.Input<string>;
    /**
     * The script URL.
     */
    scriptUrl?: pulumi.Input<string>;
    /**
     * The URL for the Secrets File.
     */
    secretsFileUrl?: pulumi.Input<string>;
    /**
     * The test data for the function.
     */
    testData?: pulumi.Input<string>;
    /**
     * The Test data URL.
     */
    testDataUrl?: pulumi.Input<string>;
    /**
     * The function URL.
     */
    url?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a FunctionAppFunction resource.
 */
export interface FunctionAppFunctionArgs {
    /**
     * The config for this Function in JSON format.
     */
    configJson: pulumi.Input<string>;
    /**
     * Should this function be enabled. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * A `file` block as detailed below. Changing this forces a new resource to be created.
     */
    files?: pulumi.Input<pulumi.Input<inputs.appservice.FunctionAppFunctionFile>[]>;
    /**
     * The ID of the Function App in which this function should reside. Changing this forces a new resource to be created.
     */
    functionAppId: pulumi.Input<string>;
    /**
     * The language the Function is written in. Possible values are `CSharp`, `Custom`, `Java`, `Javascript`, `Python`, `PowerShell`, and `TypeScript`.
     */
    language?: pulumi.Input<string>;
    /**
     * The name of the function. Changing this forces a new resource to be created.
     */
    name?: pulumi.Input<string>;
    /**
     * The test data for the function.
     */
    testData?: pulumi.Input<string>;
}
