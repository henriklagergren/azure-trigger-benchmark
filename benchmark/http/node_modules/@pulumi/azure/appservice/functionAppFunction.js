"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionAppFunction = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Function App Function.
 *
 * ## Example Usage
 * ### Basic HTTP Trigger
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleServicePlan = new azure.appservice.ServicePlan("exampleServicePlan", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     osType: "Linux",
 *     skuName: "S1",
 * });
 * const exampleLinuxFunctionApp = new azure.appservice.LinuxFunctionApp("exampleLinuxFunctionApp", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     servicePlanId: exampleServicePlan.id,
 *     storageAccountName: exampleAccount.name,
 *     storageAccountAccessKey: exampleAccount.primaryAccessKey,
 *     siteConfig: {
 *         applicationStack: {
 *             pythonVersion: "3.9",
 *         },
 *     },
 * });
 * const exampleFunctionAppFunction = new azure.appservice.FunctionAppFunction("exampleFunctionAppFunction", {
 *     functionAppId: exampleLinuxFunctionApp.id,
 *     language: "Python",
 *     testData: JSON.stringify({
 *         name: "Azure",
 *     }),
 *     configJson: JSON.stringify({
 *         bindings: [
 *             {
 *                 authLevel: "function",
 *                 direction: "in",
 *                 methods: [
 *                     "get",
 *                     "post",
 *                 ],
 *                 name: "req",
 *                 type: "httpTrigger",
 *             },
 *             {
 *                 direction: "out",
 *                 name: `$return`,
 *                 type: "http",
 *             },
 *         ],
 *     }),
 * });
 * ```
 * ### HTTP Trigger With Code Upload
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * from "fs";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleServicePlan = new azure.appservice.ServicePlan("exampleServicePlan", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     osType: "Windows",
 *     skuName: "S1",
 * });
 * const test = new azure.appservice.WindowsFunctionApp("test", {
 *     location: azurerm_resource_group.test.location,
 *     resourceGroupName: azurerm_resource_group.test.name,
 *     servicePlanId: azurerm_service_plan.test.id,
 *     storageAccountName: azurerm_storage_account.test.name,
 *     storageAccountAccessKey: azurerm_storage_account.test.primary_access_key,
 *     siteConfig: {
 *         applicationStack: {
 *             dotnetVersion: "6",
 *         },
 *     },
 * });
 * const exampleFunctionAppFunction = new azure.appservice.FunctionAppFunction("exampleFunctionAppFunction", {
 *     functionAppId: azurerm_linux_function_app.example.id,
 *     language: "CSharp",
 *     files: [{
 *         name: "run.csx",
 *         content: fs.readFileSync("exampledata/run.csx"),
 *     }],
 *     testData: JSON.stringify({
 *         name: "Azure",
 *     }),
 *     configJson: JSON.stringify({
 *         bindings: [
 *             {
 *                 authLevel: "function",
 *                 direction: "in",
 *                 methods: [
 *                     "get",
 *                     "post",
 *                 ],
 *                 name: "req",
 *                 type: "httpTrigger",
 *             },
 *             {
 *                 direction: "out",
 *                 name: `$return`,
 *                 type: "http",
 *             },
 *         ],
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * a Function App Function can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appservice/functionAppFunction:FunctionAppFunction example "/subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resGroup1/providers/Microsoft.Web/sites/site1/functions/function1"
 * ```
 */
class FunctionAppFunction extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["configJson"] = state ? state.configJson : undefined;
            resourceInputs["configUrl"] = state ? state.configUrl : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["files"] = state ? state.files : undefined;
            resourceInputs["functionAppId"] = state ? state.functionAppId : undefined;
            resourceInputs["invocationUrl"] = state ? state.invocationUrl : undefined;
            resourceInputs["language"] = state ? state.language : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scriptRootPathUrl"] = state ? state.scriptRootPathUrl : undefined;
            resourceInputs["scriptUrl"] = state ? state.scriptUrl : undefined;
            resourceInputs["secretsFileUrl"] = state ? state.secretsFileUrl : undefined;
            resourceInputs["testData"] = state ? state.testData : undefined;
            resourceInputs["testDataUrl"] = state ? state.testDataUrl : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.configJson === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configJson'");
            }
            if ((!args || args.functionAppId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionAppId'");
            }
            resourceInputs["configJson"] = args ? args.configJson : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["files"] = args ? args.files : undefined;
            resourceInputs["functionAppId"] = args ? args.functionAppId : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["testData"] = args ? args.testData : undefined;
            resourceInputs["configUrl"] = undefined /*out*/;
            resourceInputs["invocationUrl"] = undefined /*out*/;
            resourceInputs["scriptRootPathUrl"] = undefined /*out*/;
            resourceInputs["scriptUrl"] = undefined /*out*/;
            resourceInputs["secretsFileUrl"] = undefined /*out*/;
            resourceInputs["testDataUrl"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FunctionAppFunction.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing FunctionAppFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FunctionAppFunction(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FunctionAppFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionAppFunction.__pulumiType;
    }
}
exports.FunctionAppFunction = FunctionAppFunction;
/** @internal */
FunctionAppFunction.__pulumiType = 'azure:appservice/functionAppFunction:FunctionAppFunction';
//# sourceMappingURL=functionAppFunction.js.map