"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Contact = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages the subscription's Security Center Contact.
 *
 * > **NOTE:** Owner access permission is required.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.securitycenter.Contact("example", {
 *     alertNotifications: true,
 *     alertsToAdmins: true,
 *     email: "contact@example.com",
 *     phone: "+1-555-555-5555",
 * });
 * ```
 *
 * ## Import
 *
 * The contact can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:securitycenter/contact:Contact example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Security/securityContacts/default1
 * ```
 */
class Contact extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["alertNotifications"] = state ? state.alertNotifications : undefined;
            resourceInputs["alertsToAdmins"] = state ? state.alertsToAdmins : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["phone"] = state ? state.phone : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.alertNotifications === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alertNotifications'");
            }
            if ((!args || args.alertsToAdmins === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alertsToAdmins'");
            }
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            resourceInputs["alertNotifications"] = args ? args.alertNotifications : undefined;
            resourceInputs["alertsToAdmins"] = args ? args.alertsToAdmins : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["phone"] = args ? args.phone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Contact.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Contact resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Contact(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Contact.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Contact.__pulumiType;
    }
}
exports.Contact = Contact;
/** @internal */
Contact.__pulumiType = 'azure:securitycenter/contact:Contact';
//# sourceMappingURL=contact.js.map