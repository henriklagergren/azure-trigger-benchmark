"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqlPoolWorkloadGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Synapse Sql Pool Workload Group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "west europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountKind: "BlobStorage",
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleDataLakeGen2Filesystem = new azure.storage.DataLakeGen2Filesystem("exampleDataLakeGen2Filesystem", {storageAccountId: exampleAccount.id});
 * const exampleWorkspace = new azure.synapse.Workspace("exampleWorkspace", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     storageDataLakeGen2FilesystemId: exampleDataLakeGen2Filesystem.id,
 *     sqlAdministratorLogin: "sqladminuser",
 *     sqlAdministratorLoginPassword: "H@Sh1CoR3!",
 * });
 * const exampleSqlPool = new azure.synapse.SqlPool("exampleSqlPool", {
 *     synapseWorkspaceId: exampleWorkspace.id,
 *     skuName: "DW100c",
 *     createMode: "Default",
 * });
 * const exampleSqlPoolWorkloadGroup = new azure.synapse.SqlPoolWorkloadGroup("exampleSqlPoolWorkloadGroup", {
 *     sqlPoolId: exampleSqlPool.id,
 *     importance: "normal",
 *     maxResourcePercent: 100,
 *     minResourcePercent: 0,
 *     maxResourcePercentPerRequest: 3,
 *     minResourcePercentPerRequest: 3,
 *     queryExecutionTimeoutInSeconds: 0,
 * });
 * ```
 *
 * ## Import
 *
 * Synapse Sql Pool Workload Groups can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:synapse/sqlPoolWorkloadGroup:SqlPoolWorkloadGroup example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.Synapse/workspaces/workspace1/sqlPools/sqlPool1/workloadGroups/workloadGroup1
 * ```
 */
class SqlPoolWorkloadGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["importance"] = state ? state.importance : undefined;
            resourceInputs["maxResourcePercent"] = state ? state.maxResourcePercent : undefined;
            resourceInputs["maxResourcePercentPerRequest"] = state ? state.maxResourcePercentPerRequest : undefined;
            resourceInputs["minResourcePercent"] = state ? state.minResourcePercent : undefined;
            resourceInputs["minResourcePercentPerRequest"] = state ? state.minResourcePercentPerRequest : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["queryExecutionTimeoutInSeconds"] = state ? state.queryExecutionTimeoutInSeconds : undefined;
            resourceInputs["sqlPoolId"] = state ? state.sqlPoolId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.maxResourcePercent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxResourcePercent'");
            }
            if ((!args || args.minResourcePercent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minResourcePercent'");
            }
            if ((!args || args.sqlPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sqlPoolId'");
            }
            resourceInputs["importance"] = args ? args.importance : undefined;
            resourceInputs["maxResourcePercent"] = args ? args.maxResourcePercent : undefined;
            resourceInputs["maxResourcePercentPerRequest"] = args ? args.maxResourcePercentPerRequest : undefined;
            resourceInputs["minResourcePercent"] = args ? args.minResourcePercent : undefined;
            resourceInputs["minResourcePercentPerRequest"] = args ? args.minResourcePercentPerRequest : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["queryExecutionTimeoutInSeconds"] = args ? args.queryExecutionTimeoutInSeconds : undefined;
            resourceInputs["sqlPoolId"] = args ? args.sqlPoolId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SqlPoolWorkloadGroup.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing SqlPoolWorkloadGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SqlPoolWorkloadGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SqlPoolWorkloadGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlPoolWorkloadGroup.__pulumiType;
    }
}
exports.SqlPoolWorkloadGroup = SqlPoolWorkloadGroup;
/** @internal */
SqlPoolWorkloadGroup.__pulumiType = 'azure:synapse/sqlPoolWorkloadGroup:SqlPoolWorkloadGroup';
//# sourceMappingURL=sqlPoolWorkloadGroup.js.map