"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualNetworkGatewayConnection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a connection in an existing Virtual Network Gateway.
 *
 * ## Example Usage
 * ### Site-to-Site connection
 *
 * The following example shows a connection between an Azure virtual network
 * and an on-premises VPN device and network.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West US"});
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("exampleVirtualNetwork", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     addressSpaces: ["10.0.0.0/16"],
 * });
 * const exampleSubnet = new azure.network.Subnet("exampleSubnet", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.1.0/24"],
 * });
 * const onpremiseLocalNetworkGateway = new azure.network.LocalNetworkGateway("onpremiseLocalNetworkGateway", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     gatewayAddress: "168.62.225.23",
 *     addressSpaces: ["10.1.1.0/24"],
 * });
 * const examplePublicIp = new azure.network.PublicIp("examplePublicIp", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     allocationMethod: "Dynamic",
 * });
 * const exampleVirtualNetworkGateway = new azure.network.VirtualNetworkGateway("exampleVirtualNetworkGateway", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     type: "Vpn",
 *     vpnType: "RouteBased",
 *     activeActive: false,
 *     enableBgp: false,
 *     sku: "Basic",
 *     ipConfigurations: [{
 *         publicIpAddressId: examplePublicIp.id,
 *         privateIpAddressAllocation: "Dynamic",
 *         subnetId: exampleSubnet.id,
 *     }],
 * });
 * const onpremiseVirtualNetworkGatewayConnection = new azure.network.VirtualNetworkGatewayConnection("onpremiseVirtualNetworkGatewayConnection", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     type: "IPsec",
 *     virtualNetworkGatewayId: exampleVirtualNetworkGateway.id,
 *     localNetworkGatewayId: onpremiseLocalNetworkGateway.id,
 *     sharedKey: "4-v3ry-53cr37-1p53c-5h4r3d-k3y",
 * });
 * ```
 * ### VNet-to-VNet connection
 *
 * The following example shows a connection between two Azure virtual network
 * in different locations/regions.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const usResourceGroup = new azure.core.ResourceGroup("usResourceGroup", {location: "East US"});
 * const usVirtualNetwork = new azure.network.VirtualNetwork("usVirtualNetwork", {
 *     location: usResourceGroup.location,
 *     resourceGroupName: usResourceGroup.name,
 *     addressSpaces: ["10.0.0.0/16"],
 * });
 * const usGateway = new azure.network.Subnet("usGateway", {
 *     resourceGroupName: usResourceGroup.name,
 *     virtualNetworkName: usVirtualNetwork.name,
 *     addressPrefixes: ["10.0.1.0/24"],
 * });
 * const usPublicIp = new azure.network.PublicIp("usPublicIp", {
 *     location: usResourceGroup.location,
 *     resourceGroupName: usResourceGroup.name,
 *     allocationMethod: "Dynamic",
 * });
 * const usVirtualNetworkGateway = new azure.network.VirtualNetworkGateway("usVirtualNetworkGateway", {
 *     location: usResourceGroup.location,
 *     resourceGroupName: usResourceGroup.name,
 *     type: "Vpn",
 *     vpnType: "RouteBased",
 *     sku: "Basic",
 *     ipConfigurations: [{
 *         publicIpAddressId: usPublicIp.id,
 *         privateIpAddressAllocation: "Dynamic",
 *         subnetId: usGateway.id,
 *     }],
 * });
 * const europeResourceGroup = new azure.core.ResourceGroup("europeResourceGroup", {location: "West Europe"});
 * const europeVirtualNetwork = new azure.network.VirtualNetwork("europeVirtualNetwork", {
 *     location: europeResourceGroup.location,
 *     resourceGroupName: europeResourceGroup.name,
 *     addressSpaces: ["10.1.0.0/16"],
 * });
 * const europeGateway = new azure.network.Subnet("europeGateway", {
 *     resourceGroupName: europeResourceGroup.name,
 *     virtualNetworkName: europeVirtualNetwork.name,
 *     addressPrefixes: ["10.1.1.0/24"],
 * });
 * const europePublicIp = new azure.network.PublicIp("europePublicIp", {
 *     location: europeResourceGroup.location,
 *     resourceGroupName: europeResourceGroup.name,
 *     allocationMethod: "Dynamic",
 * });
 * const europeVirtualNetworkGateway = new azure.network.VirtualNetworkGateway("europeVirtualNetworkGateway", {
 *     location: europeResourceGroup.location,
 *     resourceGroupName: europeResourceGroup.name,
 *     type: "Vpn",
 *     vpnType: "RouteBased",
 *     sku: "Basic",
 *     ipConfigurations: [{
 *         publicIpAddressId: europePublicIp.id,
 *         privateIpAddressAllocation: "Dynamic",
 *         subnetId: europeGateway.id,
 *     }],
 * });
 * const usToEurope = new azure.network.VirtualNetworkGatewayConnection("usToEurope", {
 *     location: usResourceGroup.location,
 *     resourceGroupName: usResourceGroup.name,
 *     type: "Vnet2Vnet",
 *     virtualNetworkGatewayId: usVirtualNetworkGateway.id,
 *     peerVirtualNetworkGatewayId: europeVirtualNetworkGateway.id,
 *     sharedKey: "4-v3ry-53cr37-1p53c-5h4r3d-k3y",
 * });
 * const europeToUs = new azure.network.VirtualNetworkGatewayConnection("europeToUs", {
 *     location: europeResourceGroup.location,
 *     resourceGroupName: europeResourceGroup.name,
 *     type: "Vnet2Vnet",
 *     virtualNetworkGatewayId: europeVirtualNetworkGateway.id,
 *     peerVirtualNetworkGatewayId: usVirtualNetworkGateway.id,
 *     sharedKey: "4-v3ry-53cr37-1p53c-5h4r3d-k3y",
 * });
 * ```
 *
 * ## Import
 *
 * Virtual Network Gateway Connections can be imported using their `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:network/virtualNetworkGatewayConnection:VirtualNetworkGatewayConnection exampleConnection /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.Network/connections/myConnection1
 * ```
 */
class VirtualNetworkGatewayConnection extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authorizationKey"] = state ? state.authorizationKey : undefined;
            resourceInputs["connectionMode"] = state ? state.connectionMode : undefined;
            resourceInputs["connectionProtocol"] = state ? state.connectionProtocol : undefined;
            resourceInputs["dpdTimeoutSeconds"] = state ? state.dpdTimeoutSeconds : undefined;
            resourceInputs["enableBgp"] = state ? state.enableBgp : undefined;
            resourceInputs["expressRouteCircuitId"] = state ? state.expressRouteCircuitId : undefined;
            resourceInputs["expressRouteGatewayBypass"] = state ? state.expressRouteGatewayBypass : undefined;
            resourceInputs["ipsecPolicy"] = state ? state.ipsecPolicy : undefined;
            resourceInputs["localAzureIpAddressEnabled"] = state ? state.localAzureIpAddressEnabled : undefined;
            resourceInputs["localNetworkGatewayId"] = state ? state.localNetworkGatewayId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["peerVirtualNetworkGatewayId"] = state ? state.peerVirtualNetworkGatewayId : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["routingWeight"] = state ? state.routingWeight : undefined;
            resourceInputs["sharedKey"] = state ? state.sharedKey : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trafficSelectorPolicy"] = state ? state.trafficSelectorPolicy : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["usePolicyBasedTrafficSelectors"] = state ? state.usePolicyBasedTrafficSelectors : undefined;
            resourceInputs["virtualNetworkGatewayId"] = state ? state.virtualNetworkGatewayId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.virtualNetworkGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualNetworkGatewayId'");
            }
            resourceInputs["authorizationKey"] = args ? args.authorizationKey : undefined;
            resourceInputs["connectionMode"] = args ? args.connectionMode : undefined;
            resourceInputs["connectionProtocol"] = args ? args.connectionProtocol : undefined;
            resourceInputs["dpdTimeoutSeconds"] = args ? args.dpdTimeoutSeconds : undefined;
            resourceInputs["enableBgp"] = args ? args.enableBgp : undefined;
            resourceInputs["expressRouteCircuitId"] = args ? args.expressRouteCircuitId : undefined;
            resourceInputs["expressRouteGatewayBypass"] = args ? args.expressRouteGatewayBypass : undefined;
            resourceInputs["ipsecPolicy"] = args ? args.ipsecPolicy : undefined;
            resourceInputs["localAzureIpAddressEnabled"] = args ? args.localAzureIpAddressEnabled : undefined;
            resourceInputs["localNetworkGatewayId"] = args ? args.localNetworkGatewayId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["peerVirtualNetworkGatewayId"] = args ? args.peerVirtualNetworkGatewayId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["routingWeight"] = args ? args.routingWeight : undefined;
            resourceInputs["sharedKey"] = args ? args.sharedKey : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trafficSelectorPolicy"] = args ? args.trafficSelectorPolicy : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["usePolicyBasedTrafficSelectors"] = args ? args.usePolicyBasedTrafficSelectors : undefined;
            resourceInputs["virtualNetworkGatewayId"] = args ? args.virtualNetworkGatewayId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualNetworkGatewayConnection.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing VirtualNetworkGatewayConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VirtualNetworkGatewayConnection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VirtualNetworkGatewayConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualNetworkGatewayConnection.__pulumiType;
    }
}
exports.VirtualNetworkGatewayConnection = VirtualNetworkGatewayConnection;
/** @internal */
VirtualNetworkGatewayConnection.__pulumiType = 'azure:network/virtualNetworkGatewayConnection:VirtualNetworkGatewayConnection';
//# sourceMappingURL=virtualNetworkGatewayConnection.js.map