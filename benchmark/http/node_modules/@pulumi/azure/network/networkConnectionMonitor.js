"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkConnectionMonitor = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Network Connection Monitor.
 *
 * > **NOTE:** Any Network Connection Monitor resource created with API versions 2019-06-01 or earlier (v1) are now incompatible with this provider, which now only supports v2.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleNetworkWatcher = new azure.network.NetworkWatcher("exampleNetworkWatcher", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("exampleVirtualNetwork", {
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("exampleSubnet", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const exampleNetworkInterface = new azure.network.NetworkInterface("exampleNetworkInterface", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     ipConfigurations: [{
 *         name: "testconfiguration1",
 *         subnetId: exampleSubnet.id,
 *         privateIpAddressAllocation: "Dynamic",
 *     }],
 * });
 * const exampleVirtualMachine = new azure.compute.VirtualMachine("exampleVirtualMachine", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     networkInterfaceIds: [exampleNetworkInterface.id],
 *     vmSize: "Standard_D2s_v3",
 *     storageImageReference: {
 *         publisher: "Canonical",
 *         offer: "UbuntuServer",
 *         sku: "16.04-LTS",
 *         version: "latest",
 *     },
 *     storageOsDisk: {
 *         name: "osdisk-example01",
 *         caching: "ReadWrite",
 *         createOption: "FromImage",
 *         managedDiskType: "Standard_LRS",
 *     },
 *     osProfile: {
 *         computerName: "hostnametest01",
 *         adminUsername: "testadmin",
 *         adminPassword: "Password1234!",
 *     },
 *     osProfileLinuxConfig: {
 *         disablePasswordAuthentication: false,
 *     },
 * });
 * const exampleExtension = new azure.compute.Extension("exampleExtension", {
 *     virtualMachineId: exampleVirtualMachine.id,
 *     publisher: "Microsoft.Azure.NetworkWatcher",
 *     type: "NetworkWatcherAgentLinux",
 *     typeHandlerVersion: "1.4",
 *     autoUpgradeMinorVersion: true,
 * });
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("exampleAnalyticsWorkspace", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     sku: "pergb2018",
 * });
 * const exampleNetworkConnectionMonitor = new azure.network.NetworkConnectionMonitor("exampleNetworkConnectionMonitor", {
 *     networkWatcherName: exampleNetworkWatcher.name,
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleNetworkWatcher.location,
 *     endpoints: [
 *         {
 *             name: "source",
 *             targetResourceId: exampleVirtualMachine.id,
 *             filter: {
 *                 items: [{
 *                     address: exampleVirtualMachine.id,
 *                     type: "AgentAddress",
 *                 }],
 *                 type: "Include",
 *             },
 *         },
 *         {
 *             name: "destination",
 *             address: "mycompany.io",
 *         },
 *     ],
 *     testConfigurations: [{
 *         name: "tcpName",
 *         protocol: "Tcp",
 *         testFrequencyInSeconds: 60,
 *         tcpConfiguration: {
 *             port: 80,
 *         },
 *     }],
 *     testGroups: [{
 *         name: "exampletg",
 *         destinationEndpoints: ["destination"],
 *         sourceEndpoints: ["source"],
 *         testConfigurationNames: ["tcpName"],
 *         disable: false,
 *     }],
 *     notes: "examplenote",
 *     outputWorkspaceResourceIds: [exampleAnalyticsWorkspace.id],
 * }, {
 *     dependsOn: [exampleExtension],
 * });
 * ```
 *
 * ## Import
 *
 * Network Connection Monitors can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:network/networkConnectionMonitor:NetworkConnectionMonitor example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Network/networkWatchers/watcher1/connectionMonitors/connectionMonitor1
 * ```
 */
class NetworkConnectionMonitor extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkWatcherId"] = state ? state.networkWatcherId : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["outputWorkspaceResourceIds"] = state ? state.outputWorkspaceResourceIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["testConfigurations"] = state ? state.testConfigurations : undefined;
            resourceInputs["testGroups"] = state ? state.testGroups : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.endpoints === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpoints'");
            }
            if ((!args || args.networkWatcherId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkWatcherId'");
            }
            if ((!args || args.testConfigurations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'testConfigurations'");
            }
            if ((!args || args.testGroups === undefined) && !opts.urn) {
                throw new Error("Missing required property 'testGroups'");
            }
            resourceInputs["endpoints"] = args ? args.endpoints : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkWatcherId"] = args ? args.networkWatcherId : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["outputWorkspaceResourceIds"] = args ? args.outputWorkspaceResourceIds : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["testConfigurations"] = args ? args.testConfigurations : undefined;
            resourceInputs["testGroups"] = args ? args.testGroups : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NetworkConnectionMonitor.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing NetworkConnectionMonitor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NetworkConnectionMonitor(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkConnectionMonitor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkConnectionMonitor.__pulumiType;
    }
}
exports.NetworkConnectionMonitor = NetworkConnectionMonitor;
/** @internal */
NetworkConnectionMonitor.__pulumiType = 'azure:network/networkConnectionMonitor:NetworkConnectionMonitor';
//# sourceMappingURL=networkConnectionMonitor.js.map