"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscription = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a ServiceBus Subscription.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleNamespace = new azure.servicebus.Namespace("exampleNamespace", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     sku: "Standard",
 *     tags: {
 *         source: "example",
 *     },
 * });
 * const exampleTopic = new azure.servicebus.Topic("exampleTopic", {
 *     namespaceId: exampleNamespace.id,
 *     enablePartitioning: true,
 * });
 * const exampleSubscription = new azure.servicebus.Subscription("exampleSubscription", {
 *     topicId: exampleTopic.id,
 *     maxDeliveryCount: 1,
 * });
 * ```
 *
 * ## Import
 *
 * Service Bus Subscriptions can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:eventhub/subscription:Subscription example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/microsoft.servicebus/namespaces/sbns1/topics/sntopic1/subscriptions/sbsub1
 * ```
 *
 * @deprecated azure.eventhub.Subscription has been deprecated in favor of azure.servicebus.Subscription
 */
class Subscription extends pulumi.CustomResource {
    /** @deprecated azure.eventhub.Subscription has been deprecated in favor of azure.servicebus.Subscription */
    constructor(name, argsOrState, opts) {
        pulumi.log.warn("Subscription is deprecated: azure.eventhub.Subscription has been deprecated in favor of azure.servicebus.Subscription");
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["autoDeleteOnIdle"] = state ? state.autoDeleteOnIdle : undefined;
            resourceInputs["deadLetteringOnFilterEvaluationError"] = state ? state.deadLetteringOnFilterEvaluationError : undefined;
            resourceInputs["deadLetteringOnMessageExpiration"] = state ? state.deadLetteringOnMessageExpiration : undefined;
            resourceInputs["defaultMessageTtl"] = state ? state.defaultMessageTtl : undefined;
            resourceInputs["enableBatchedOperations"] = state ? state.enableBatchedOperations : undefined;
            resourceInputs["forwardDeadLetteredMessagesTo"] = state ? state.forwardDeadLetteredMessagesTo : undefined;
            resourceInputs["forwardTo"] = state ? state.forwardTo : undefined;
            resourceInputs["lockDuration"] = state ? state.lockDuration : undefined;
            resourceInputs["maxDeliveryCount"] = state ? state.maxDeliveryCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["requiresSession"] = state ? state.requiresSession : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["topicId"] = state ? state.topicId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.maxDeliveryCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxDeliveryCount'");
            }
            if ((!args || args.topicId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicId'");
            }
            resourceInputs["autoDeleteOnIdle"] = args ? args.autoDeleteOnIdle : undefined;
            resourceInputs["deadLetteringOnFilterEvaluationError"] = args ? args.deadLetteringOnFilterEvaluationError : undefined;
            resourceInputs["deadLetteringOnMessageExpiration"] = args ? args.deadLetteringOnMessageExpiration : undefined;
            resourceInputs["defaultMessageTtl"] = args ? args.defaultMessageTtl : undefined;
            resourceInputs["enableBatchedOperations"] = args ? args.enableBatchedOperations : undefined;
            resourceInputs["forwardDeadLetteredMessagesTo"] = args ? args.forwardDeadLetteredMessagesTo : undefined;
            resourceInputs["forwardTo"] = args ? args.forwardTo : undefined;
            resourceInputs["lockDuration"] = args ? args.lockDuration : undefined;
            resourceInputs["maxDeliveryCount"] = args ? args.maxDeliveryCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["requiresSession"] = args ? args.requiresSession : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["topicId"] = args ? args.topicId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subscription.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Subscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        pulumi.log.warn("Subscription is deprecated: azure.eventhub.Subscription has been deprecated in favor of azure.servicebus.Subscription");
        return new Subscription(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Subscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subscription.__pulumiType;
    }
}
exports.Subscription = Subscription;
/** @internal */
Subscription.__pulumiType = 'azure:eventhub/subscription:Subscription';
//# sourceMappingURL=subscription.js.map