"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Policy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Policy within a Dev Test Policy Set.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleLab = new azure.devtest.Lab("exampleLab", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     tags: {
 *         Sydney: "Australia",
 *     },
 * });
 * const examplePolicy = new azure.devtest.Policy("examplePolicy", {
 *     policySetName: "default",
 *     labName: exampleLab.name,
 *     resourceGroupName: exampleResourceGroup.name,
 *     factData: "",
 *     threshold: "999",
 *     evaluatorType: "MaxValuePolicy",
 *     tags: {
 *         Acceptance: "Test",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Dev Test Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:devtest/policy:Policy policy1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevTestLab/labs/lab1/policysets/default/policies/policy1
 * ```
 */
class Policy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["evaluatorType"] = state ? state.evaluatorType : undefined;
            resourceInputs["factData"] = state ? state.factData : undefined;
            resourceInputs["labName"] = state ? state.labName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["policySetName"] = state ? state.policySetName : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["threshold"] = state ? state.threshold : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.evaluatorType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'evaluatorType'");
            }
            if ((!args || args.labName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'labName'");
            }
            if ((!args || args.policySetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policySetName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.threshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'threshold'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["evaluatorType"] = args ? args.evaluatorType : undefined;
            resourceInputs["factData"] = args ? args.factData : undefined;
            resourceInputs["labName"] = args ? args.labName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["policySetName"] = args ? args.policySetName : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["threshold"] = args ? args.threshold : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Policy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }
}
exports.Policy = Policy;
/** @internal */
Policy.__pulumiType = 'azure:devtest/policy:Policy';
//# sourceMappingURL=policy.js.map