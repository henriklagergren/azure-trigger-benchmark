"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamingEndpoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Streaming Endpoint.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleServiceAccount = new azure.media.ServiceAccount("exampleServiceAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     storageAccounts: [{
 *         id: exampleAccount.id,
 *         isPrimary: true,
 *     }],
 * });
 * const exampleStreamingEndpoint = new azure.media.StreamingEndpoint("exampleStreamingEndpoint", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     mediaServicesAccountName: exampleServiceAccount.name,
 *     scaleUnits: 2,
 * });
 * ```
 * ### With Access Control
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleServiceAccount = new azure.media.ServiceAccount("exampleServiceAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     storageAccounts: [{
 *         id: exampleAccount.id,
 *         isPrimary: true,
 *     }],
 * });
 * const exampleStreamingEndpoint = new azure.media.StreamingEndpoint("exampleStreamingEndpoint", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     mediaServicesAccountName: exampleServiceAccount.name,
 *     scaleUnits: 2,
 *     accessControl: {
 *         ipAllows: [
 *             {
 *                 name: "AllowedIP",
 *                 address: "192.168.1.1",
 *             },
 *             {
 *                 name: "AnotherIp",
 *                 address: "192.168.1.2",
 *             },
 *         ],
 *         akamaiSignatureHeaderAuthenticationKeys: [
 *             {
 *                 identifier: "id1",
 *                 expiration: "2030-12-31T16:00:00Z",
 *                 base64Key: "dGVzdGlkMQ==",
 *             },
 *             {
 *                 identifier: "id2",
 *                 expiration: "2032-01-28T16:00:00Z",
 *                 base64Key: "dGVzdGlkMQ==",
 *             },
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Streaming Endpoints can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:media/streamingEndpoint:StreamingEndpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaservices/service1/streamingendpoints/endpoint1
 * ```
 */
class StreamingEndpoint extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessControl"] = state ? state.accessControl : undefined;
            resourceInputs["autoStartEnabled"] = state ? state.autoStartEnabled : undefined;
            resourceInputs["cdnEnabled"] = state ? state.cdnEnabled : undefined;
            resourceInputs["cdnProfile"] = state ? state.cdnProfile : undefined;
            resourceInputs["cdnProvider"] = state ? state.cdnProvider : undefined;
            resourceInputs["crossSiteAccessPolicy"] = state ? state.crossSiteAccessPolicy : undefined;
            resourceInputs["customHostNames"] = state ? state.customHostNames : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maxCacheAgeSeconds"] = state ? state.maxCacheAgeSeconds : undefined;
            resourceInputs["mediaServicesAccountName"] = state ? state.mediaServicesAccountName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["scaleUnits"] = state ? state.scaleUnits : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.mediaServicesAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mediaServicesAccountName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.scaleUnits === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scaleUnits'");
            }
            resourceInputs["accessControl"] = args ? args.accessControl : undefined;
            resourceInputs["autoStartEnabled"] = args ? args.autoStartEnabled : undefined;
            resourceInputs["cdnEnabled"] = args ? args.cdnEnabled : undefined;
            resourceInputs["cdnProfile"] = args ? args.cdnProfile : undefined;
            resourceInputs["cdnProvider"] = args ? args.cdnProvider : undefined;
            resourceInputs["crossSiteAccessPolicy"] = args ? args.crossSiteAccessPolicy : undefined;
            resourceInputs["customHostNames"] = args ? args.customHostNames : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maxCacheAgeSeconds"] = args ? args.maxCacheAgeSeconds : undefined;
            resourceInputs["mediaServicesAccountName"] = args ? args.mediaServicesAccountName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["scaleUnits"] = args ? args.scaleUnits : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["hostName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamingEndpoint.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing StreamingEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StreamingEndpoint(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StreamingEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamingEndpoint.__pulumiType;
    }
}
exports.StreamingEndpoint = StreamingEndpoint;
/** @internal */
StreamingEndpoint.__pulumiType = 'azure:media/streamingEndpoint:StreamingEndpoint';
//# sourceMappingURL=streamingEndpoint.js.map