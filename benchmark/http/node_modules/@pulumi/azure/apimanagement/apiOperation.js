"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiOperation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an API Operation within an API Management Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleApi = azure.apimanagement.getApi({
 *     name: "search-api",
 *     apiManagementName: "search-api-management",
 *     resourceGroupName: "search-service",
 *     revision: "2",
 * });
 * const exampleApiOperation = new azure.apimanagement.ApiOperation("exampleApiOperation", {
 *     operationId: "user-delete",
 *     apiName: exampleApi.then(exampleApi => exampleApi.name),
 *     apiManagementName: exampleApi.then(exampleApi => exampleApi.apiManagementName),
 *     resourceGroupName: exampleApi.then(exampleApi => exampleApi.resourceGroupName),
 *     displayName: "Delete User Operation",
 *     method: "DELETE",
 *     urlTemplate: "/users/{id}/delete",
 *     description: "This can only be done by the logged in user.",
 *     responses: [{
 *         statusCode: 200,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * API Management API Operation's can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:apimanagement/apiOperation:ApiOperation example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/apis/api1/operations/operation1
 * ```
 */
class ApiOperation extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apiManagementName"] = state ? state.apiManagementName : undefined;
            resourceInputs["apiName"] = state ? state.apiName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["operationId"] = state ? state.operationId : undefined;
            resourceInputs["request"] = state ? state.request : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["responses"] = state ? state.responses : undefined;
            resourceInputs["templateParameters"] = state ? state.templateParameters : undefined;
            resourceInputs["urlTemplate"] = state ? state.urlTemplate : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.apiManagementName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiManagementName'");
            }
            if ((!args || args.apiName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiName'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.method === undefined) && !opts.urn) {
                throw new Error("Missing required property 'method'");
            }
            if ((!args || args.operationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'operationId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.urlTemplate === undefined) && !opts.urn) {
                throw new Error("Missing required property 'urlTemplate'");
            }
            resourceInputs["apiManagementName"] = args ? args.apiManagementName : undefined;
            resourceInputs["apiName"] = args ? args.apiName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["operationId"] = args ? args.operationId : undefined;
            resourceInputs["request"] = args ? args.request : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["responses"] = args ? args.responses : undefined;
            resourceInputs["templateParameters"] = args ? args.templateParameters : undefined;
            resourceInputs["urlTemplate"] = args ? args.urlTemplate : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiOperation.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ApiOperation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ApiOperation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ApiOperation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiOperation.__pulumiType;
    }
}
exports.ApiOperation = ApiOperation;
/** @internal */
ApiOperation.__pulumiType = 'azure:apimanagement/apiOperation:ApiOperation';
//# sourceMappingURL=apiOperation.js.map