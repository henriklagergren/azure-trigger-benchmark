"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorizationServer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Authorization Server within an API Management Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleApi = azure.apimanagement.getApi({
 *     name: "search-api",
 *     apiManagementName: "search-api-management",
 *     resourceGroupName: "search-service",
 *     revision: "2",
 * });
 * const exampleAuthorizationServer = new azure.apimanagement.AuthorizationServer("exampleAuthorizationServer", {
 *     apiManagementName: data.azurerm_api_management.example.name,
 *     resourceGroupName: data.azurerm_api_management.example.resource_group_name,
 *     displayName: "Test Server",
 *     authorizationEndpoint: "https://example.mydomain.com/client/authorize",
 *     clientId: "42424242-4242-4242-4242-424242424242",
 *     clientRegistrationEndpoint: "https://example.mydomain.com/client/register",
 *     grantTypes: ["authorizationCode"],
 * });
 * ```
 *
 * ## Import
 *
 * API Management Authorization Servers can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:apimanagement/authorizationServer:AuthorizationServer example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/service1/authorizationServers/server1
 * ```
 */
class AuthorizationServer extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apiManagementName"] = state ? state.apiManagementName : undefined;
            resourceInputs["authorizationEndpoint"] = state ? state.authorizationEndpoint : undefined;
            resourceInputs["authorizationMethods"] = state ? state.authorizationMethods : undefined;
            resourceInputs["bearerTokenSendingMethods"] = state ? state.bearerTokenSendingMethods : undefined;
            resourceInputs["clientAuthenticationMethods"] = state ? state.clientAuthenticationMethods : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["clientRegistrationEndpoint"] = state ? state.clientRegistrationEndpoint : undefined;
            resourceInputs["clientSecret"] = state ? state.clientSecret : undefined;
            resourceInputs["defaultScope"] = state ? state.defaultScope : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["grantTypes"] = state ? state.grantTypes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["resourceOwnerPassword"] = state ? state.resourceOwnerPassword : undefined;
            resourceInputs["resourceOwnerUsername"] = state ? state.resourceOwnerUsername : undefined;
            resourceInputs["supportState"] = state ? state.supportState : undefined;
            resourceInputs["tokenBodyParameters"] = state ? state.tokenBodyParameters : undefined;
            resourceInputs["tokenEndpoint"] = state ? state.tokenEndpoint : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.apiManagementName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiManagementName'");
            }
            if ((!args || args.authorizationEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizationEndpoint'");
            }
            if ((!args || args.authorizationMethods === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizationMethods'");
            }
            if ((!args || args.clientId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientId'");
            }
            if ((!args || args.clientRegistrationEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientRegistrationEndpoint'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.grantTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'grantTypes'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["apiManagementName"] = args ? args.apiManagementName : undefined;
            resourceInputs["authorizationEndpoint"] = args ? args.authorizationEndpoint : undefined;
            resourceInputs["authorizationMethods"] = args ? args.authorizationMethods : undefined;
            resourceInputs["bearerTokenSendingMethods"] = args ? args.bearerTokenSendingMethods : undefined;
            resourceInputs["clientAuthenticationMethods"] = args ? args.clientAuthenticationMethods : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["clientRegistrationEndpoint"] = args ? args.clientRegistrationEndpoint : undefined;
            resourceInputs["clientSecret"] = args ? args.clientSecret : undefined;
            resourceInputs["defaultScope"] = args ? args.defaultScope : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["grantTypes"] = args ? args.grantTypes : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["resourceOwnerPassword"] = args ? args.resourceOwnerPassword : undefined;
            resourceInputs["resourceOwnerUsername"] = args ? args.resourceOwnerUsername : undefined;
            resourceInputs["supportState"] = args ? args.supportState : undefined;
            resourceInputs["tokenBodyParameters"] = args ? args.tokenBodyParameters : undefined;
            resourceInputs["tokenEndpoint"] = args ? args.tokenEndpoint : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuthorizationServer.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing AuthorizationServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AuthorizationServer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AuthorizationServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuthorizationServer.__pulumiType;
    }
}
exports.AuthorizationServer = AuthorizationServer;
/** @internal */
AuthorizationServer.__pulumiType = 'azure:apimanagement/authorizationServer:AuthorizationServer';
//# sourceMappingURL=authorizationServer.js.map