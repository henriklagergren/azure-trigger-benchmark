"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataFlow = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Data Flow inside an Azure Data Factory.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleFactory = new azure.datafactory.Factory("exampleFactory", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleLinkedCustomService = new azure.datafactory.LinkedCustomService("exampleLinkedCustomService", {
 *     dataFactoryId: exampleFactory.id,
 *     type: "AzureBlobStorage",
 *     typePropertiesJson: pulumi.interpolate`{
 *   "connectionString": "${exampleAccount.primaryConnectionString}"
 * }
 * `,
 * });
 * const example1 = new azure.datafactory.DatasetJson("example1", {
 *     dataFactoryId: exampleFactory.id,
 *     linkedServiceName: exampleLinkedCustomService.name,
 *     azureBlobStorageLocation: {
 *         container: "container",
 *         path: "foo/bar/",
 *         filename: "foo.txt",
 *     },
 *     encoding: "UTF-8",
 * });
 * const example2 = new azure.datafactory.DatasetJson("example2", {
 *     dataFactoryId: exampleFactory.id,
 *     linkedServiceName: exampleLinkedCustomService.name,
 *     azureBlobStorageLocation: {
 *         container: "container",
 *         path: "foo/bar/",
 *         filename: "bar.txt",
 *     },
 *     encoding: "UTF-8",
 * });
 * const exampleDataFlow = new azure.datafactory.DataFlow("exampleDataFlow", {
 *     dataFactoryId: exampleFactory.id,
 *     sources: [{
 *         name: "source1",
 *         dataset: {
 *             name: example1.name,
 *         },
 *     }],
 *     sinks: [{
 *         name: "sink1",
 *         dataset: {
 *             name: example2.name,
 *         },
 *     }],
 *     script: `source(
 *   allowSchemaDrift: true,
 *   validateSchema: false,
 *   limit: 100,
 *   ignoreNoFilesFound: false,
 *   documentForm: 'documentPerLine') ~> source1
 * source1 sink(
 *   allowSchemaDrift: true,
 *   validateSchema: false,
 *   skipDuplicateMapInputs: true,
 *   skipDuplicateMapOutputs: true) ~> sink1
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * Data Factory Data Flow can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:datafactory/dataFlow:DataFlow example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/dataflows/example
 * ```
 */
class DataFlow extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["dataFactoryId"] = state ? state.dataFactoryId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["script"] = state ? state.script : undefined;
            resourceInputs["sinks"] = state ? state.sinks : undefined;
            resourceInputs["sources"] = state ? state.sources : undefined;
            resourceInputs["transformations"] = state ? state.transformations : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dataFactoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            if ((!args || args.script === undefined) && !opts.urn) {
                throw new Error("Missing required property 'script'");
            }
            if ((!args || args.sinks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sinks'");
            }
            if ((!args || args.sources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sources'");
            }
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["dataFactoryId"] = args ? args.dataFactoryId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["script"] = args ? args.script : undefined;
            resourceInputs["sinks"] = args ? args.sinks : undefined;
            resourceInputs["sources"] = args ? args.sources : undefined;
            resourceInputs["transformations"] = args ? args.transformations : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataFlow.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing DataFlow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DataFlow(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DataFlow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataFlow.__pulumiType;
    }
}
exports.DataFlow = DataFlow;
/** @internal */
DataFlow.__pulumiType = 'azure:datafactory/dataFlow:DataFlow';
//# sourceMappingURL=dataFlow.js.map