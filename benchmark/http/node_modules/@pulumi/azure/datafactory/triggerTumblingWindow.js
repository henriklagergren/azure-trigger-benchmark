"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TriggerTumblingWindow = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Tumbling Window Trigger inside an Azure Data Factory.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleFactory = new azure.datafactory.Factory("exampleFactory", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const examplePipeline = new azure.datafactory.Pipeline("examplePipeline", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     dataFactoryId: exampleFactory.id,
 * });
 * const exampleTriggerTumblingWindow = new azure.datafactory.TriggerTumblingWindow("exampleTriggerTumblingWindow", {
 *     dataFactoryId: exampleFactory.id,
 *     startTime: "2022-09-21T00:00:00Z",
 *     endTime: "2022-09-21T08:00:00Z",
 *     frequency: "Minute",
 *     interval: 15,
 *     delay: "16:00:00",
 *     annotations: [
 *         "example1",
 *         "example2",
 *         "example3",
 *     ],
 *     description: "example description",
 *     retry: {
 *         count: 1,
 *         interval: 30,
 *     },
 *     pipeline: {
 *         name: azurerm_data_factory_pipeline.test.name,
 *         parameters: {
 *             Env: "Prod",
 *         },
 *     },
 *     triggerDependencies: [{
 *         size: "24:00:00",
 *         offset: "-24:00:00",
 *     }],
 *     additionalProperties: {
 *         foo: "value1",
 *         bar: "value2",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Data Factory Tumbling Window Trigger can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:datafactory/triggerTumblingWindow:TriggerTumblingWindow example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.DataFactory/factories/example/triggers/example
 * ```
 */
class TriggerTumblingWindow extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["activated"] = state ? state.activated : undefined;
            resourceInputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            resourceInputs["annotations"] = state ? state.annotations : undefined;
            resourceInputs["dataFactoryId"] = state ? state.dataFactoryId : undefined;
            resourceInputs["delay"] = state ? state.delay : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["maxConcurrency"] = state ? state.maxConcurrency : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pipeline"] = state ? state.pipeline : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["triggerDependencies"] = state ? state.triggerDependencies : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dataFactoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.pipeline === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipeline'");
            }
            if ((!args || args.startTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startTime'");
            }
            resourceInputs["activated"] = args ? args.activated : undefined;
            resourceInputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            resourceInputs["annotations"] = args ? args.annotations : undefined;
            resourceInputs["dataFactoryId"] = args ? args.dataFactoryId : undefined;
            resourceInputs["delay"] = args ? args.delay : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["endTime"] = args ? args.endTime : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["maxConcurrency"] = args ? args.maxConcurrency : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pipeline"] = args ? args.pipeline : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["startTime"] = args ? args.startTime : undefined;
            resourceInputs["triggerDependencies"] = args ? args.triggerDependencies : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TriggerTumblingWindow.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing TriggerTumblingWindow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TriggerTumblingWindow(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TriggerTumblingWindow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TriggerTumblingWindow.__pulumiType;
    }
}
exports.TriggerTumblingWindow = TriggerTumblingWindow;
/** @internal */
TriggerTumblingWindow.__pulumiType = 'azure:datafactory/triggerTumblingWindow:TriggerTumblingWindow';
//# sourceMappingURL=triggerTumblingWindow.js.map