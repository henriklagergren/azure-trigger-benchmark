"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./customDataset"), exports);
__exportStar(require("./dataFlow"), exports);
__exportStar(require("./datasetAzureBlob"), exports);
__exportStar(require("./datasetBinary"), exports);
__exportStar(require("./datasetCosmosDBApi"), exports);
__exportStar(require("./datasetDelimitedText"), exports);
__exportStar(require("./datasetHttp"), exports);
__exportStar(require("./datasetJson"), exports);
__exportStar(require("./datasetMysql"), exports);
__exportStar(require("./datasetParquet"), exports);
__exportStar(require("./datasetPostgresql"), exports);
__exportStar(require("./datasetSnowflake"), exports);
__exportStar(require("./datasetSqlServerTable"), exports);
__exportStar(require("./factory"), exports);
__exportStar(require("./getFactory"), exports);
__exportStar(require("./integrationRuntimeManaged"), exports);
__exportStar(require("./integrationRuntimeRule"), exports);
__exportStar(require("./integrationRuntimeSelfHosted"), exports);
__exportStar(require("./integrationRuntimeSsis"), exports);
__exportStar(require("./linkedCustomService"), exports);
__exportStar(require("./linkedServiceAzureBlobStorage"), exports);
__exportStar(require("./linkedServiceAzureDatabricks"), exports);
__exportStar(require("./linkedServiceAzureFileStorage"), exports);
__exportStar(require("./linkedServiceAzureFunction"), exports);
__exportStar(require("./linkedServiceAzureSearch"), exports);
__exportStar(require("./linkedServiceAzureSqlDatabase"), exports);
__exportStar(require("./linkedServiceAzureTableStorage"), exports);
__exportStar(require("./linkedServiceCosmosDb"), exports);
__exportStar(require("./linkedServiceCosmosDbMongoApi"), exports);
__exportStar(require("./linkedServiceDataLakeStorageGen2"), exports);
__exportStar(require("./linkedServiceKeyVault"), exports);
__exportStar(require("./linkedServiceKusto"), exports);
__exportStar(require("./linkedServiceMysql"), exports);
__exportStar(require("./linkedServiceOdata"), exports);
__exportStar(require("./linkedServiceOdbc"), exports);
__exportStar(require("./linkedServicePostgresql"), exports);
__exportStar(require("./linkedServiceSftp"), exports);
__exportStar(require("./linkedServiceSnowflake"), exports);
__exportStar(require("./linkedServiceSqlServer"), exports);
__exportStar(require("./linkedServiceSynapse"), exports);
__exportStar(require("./linkedServiceWeb"), exports);
__exportStar(require("./managedPrivateEndpoint"), exports);
__exportStar(require("./pipeline"), exports);
__exportStar(require("./triggerBlobEvent"), exports);
__exportStar(require("./triggerCustomEvent"), exports);
__exportStar(require("./triggerSchedule"), exports);
__exportStar(require("./triggerTumblingWindow"), exports);
// Import resources to register:
const customDataset_1 = require("./customDataset");
const dataFlow_1 = require("./dataFlow");
const datasetAzureBlob_1 = require("./datasetAzureBlob");
const datasetBinary_1 = require("./datasetBinary");
const datasetCosmosDBApi_1 = require("./datasetCosmosDBApi");
const datasetDelimitedText_1 = require("./datasetDelimitedText");
const datasetHttp_1 = require("./datasetHttp");
const datasetJson_1 = require("./datasetJson");
const datasetMysql_1 = require("./datasetMysql");
const datasetParquet_1 = require("./datasetParquet");
const datasetPostgresql_1 = require("./datasetPostgresql");
const datasetSnowflake_1 = require("./datasetSnowflake");
const datasetSqlServerTable_1 = require("./datasetSqlServerTable");
const factory_1 = require("./factory");
const integrationRuntimeManaged_1 = require("./integrationRuntimeManaged");
const integrationRuntimeRule_1 = require("./integrationRuntimeRule");
const integrationRuntimeSelfHosted_1 = require("./integrationRuntimeSelfHosted");
const integrationRuntimeSsis_1 = require("./integrationRuntimeSsis");
const linkedCustomService_1 = require("./linkedCustomService");
const linkedServiceAzureBlobStorage_1 = require("./linkedServiceAzureBlobStorage");
const linkedServiceAzureDatabricks_1 = require("./linkedServiceAzureDatabricks");
const linkedServiceAzureFileStorage_1 = require("./linkedServiceAzureFileStorage");
const linkedServiceAzureFunction_1 = require("./linkedServiceAzureFunction");
const linkedServiceAzureSearch_1 = require("./linkedServiceAzureSearch");
const linkedServiceAzureSqlDatabase_1 = require("./linkedServiceAzureSqlDatabase");
const linkedServiceAzureTableStorage_1 = require("./linkedServiceAzureTableStorage");
const linkedServiceCosmosDb_1 = require("./linkedServiceCosmosDb");
const linkedServiceCosmosDbMongoApi_1 = require("./linkedServiceCosmosDbMongoApi");
const linkedServiceDataLakeStorageGen2_1 = require("./linkedServiceDataLakeStorageGen2");
const linkedServiceKeyVault_1 = require("./linkedServiceKeyVault");
const linkedServiceKusto_1 = require("./linkedServiceKusto");
const linkedServiceMysql_1 = require("./linkedServiceMysql");
const linkedServiceOdata_1 = require("./linkedServiceOdata");
const linkedServiceOdbc_1 = require("./linkedServiceOdbc");
const linkedServicePostgresql_1 = require("./linkedServicePostgresql");
const linkedServiceSftp_1 = require("./linkedServiceSftp");
const linkedServiceSnowflake_1 = require("./linkedServiceSnowflake");
const linkedServiceSqlServer_1 = require("./linkedServiceSqlServer");
const linkedServiceSynapse_1 = require("./linkedServiceSynapse");
const linkedServiceWeb_1 = require("./linkedServiceWeb");
const managedPrivateEndpoint_1 = require("./managedPrivateEndpoint");
const pipeline_1 = require("./pipeline");
const triggerBlobEvent_1 = require("./triggerBlobEvent");
const triggerCustomEvent_1 = require("./triggerCustomEvent");
const triggerSchedule_1 = require("./triggerSchedule");
const triggerTumblingWindow_1 = require("./triggerTumblingWindow");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:datafactory/customDataset:CustomDataset":
                return new customDataset_1.CustomDataset(name, undefined, { urn });
            case "azure:datafactory/dataFlow:DataFlow":
                return new dataFlow_1.DataFlow(name, undefined, { urn });
            case "azure:datafactory/datasetAzureBlob:DatasetAzureBlob":
                return new datasetAzureBlob_1.DatasetAzureBlob(name, undefined, { urn });
            case "azure:datafactory/datasetBinary:DatasetBinary":
                return new datasetBinary_1.DatasetBinary(name, undefined, { urn });
            case "azure:datafactory/datasetCosmosDBApi:DatasetCosmosDBApi":
                return new datasetCosmosDBApi_1.DatasetCosmosDBApi(name, undefined, { urn });
            case "azure:datafactory/datasetDelimitedText:DatasetDelimitedText":
                return new datasetDelimitedText_1.DatasetDelimitedText(name, undefined, { urn });
            case "azure:datafactory/datasetHttp:DatasetHttp":
                return new datasetHttp_1.DatasetHttp(name, undefined, { urn });
            case "azure:datafactory/datasetJson:DatasetJson":
                return new datasetJson_1.DatasetJson(name, undefined, { urn });
            case "azure:datafactory/datasetMysql:DatasetMysql":
                return new datasetMysql_1.DatasetMysql(name, undefined, { urn });
            case "azure:datafactory/datasetParquet:DatasetParquet":
                return new datasetParquet_1.DatasetParquet(name, undefined, { urn });
            case "azure:datafactory/datasetPostgresql:DatasetPostgresql":
                return new datasetPostgresql_1.DatasetPostgresql(name, undefined, { urn });
            case "azure:datafactory/datasetSnowflake:DatasetSnowflake":
                return new datasetSnowflake_1.DatasetSnowflake(name, undefined, { urn });
            case "azure:datafactory/datasetSqlServerTable:DatasetSqlServerTable":
                return new datasetSqlServerTable_1.DatasetSqlServerTable(name, undefined, { urn });
            case "azure:datafactory/factory:Factory":
                return new factory_1.Factory(name, undefined, { urn });
            case "azure:datafactory/integrationRuntimeManaged:IntegrationRuntimeManaged":
                return new integrationRuntimeManaged_1.IntegrationRuntimeManaged(name, undefined, { urn });
            case "azure:datafactory/integrationRuntimeRule:IntegrationRuntimeRule":
                return new integrationRuntimeRule_1.IntegrationRuntimeRule(name, undefined, { urn });
            case "azure:datafactory/integrationRuntimeSelfHosted:IntegrationRuntimeSelfHosted":
                return new integrationRuntimeSelfHosted_1.IntegrationRuntimeSelfHosted(name, undefined, { urn });
            case "azure:datafactory/integrationRuntimeSsis:IntegrationRuntimeSsis":
                return new integrationRuntimeSsis_1.IntegrationRuntimeSsis(name, undefined, { urn });
            case "azure:datafactory/linkedCustomService:LinkedCustomService":
                return new linkedCustomService_1.LinkedCustomService(name, undefined, { urn });
            case "azure:datafactory/linkedServiceAzureBlobStorage:LinkedServiceAzureBlobStorage":
                return new linkedServiceAzureBlobStorage_1.LinkedServiceAzureBlobStorage(name, undefined, { urn });
            case "azure:datafactory/linkedServiceAzureDatabricks:LinkedServiceAzureDatabricks":
                return new linkedServiceAzureDatabricks_1.LinkedServiceAzureDatabricks(name, undefined, { urn });
            case "azure:datafactory/linkedServiceAzureFileStorage:LinkedServiceAzureFileStorage":
                return new linkedServiceAzureFileStorage_1.LinkedServiceAzureFileStorage(name, undefined, { urn });
            case "azure:datafactory/linkedServiceAzureFunction:LinkedServiceAzureFunction":
                return new linkedServiceAzureFunction_1.LinkedServiceAzureFunction(name, undefined, { urn });
            case "azure:datafactory/linkedServiceAzureSearch:LinkedServiceAzureSearch":
                return new linkedServiceAzureSearch_1.LinkedServiceAzureSearch(name, undefined, { urn });
            case "azure:datafactory/linkedServiceAzureSqlDatabase:LinkedServiceAzureSqlDatabase":
                return new linkedServiceAzureSqlDatabase_1.LinkedServiceAzureSqlDatabase(name, undefined, { urn });
            case "azure:datafactory/linkedServiceAzureTableStorage:LinkedServiceAzureTableStorage":
                return new linkedServiceAzureTableStorage_1.LinkedServiceAzureTableStorage(name, undefined, { urn });
            case "azure:datafactory/linkedServiceCosmosDb:LinkedServiceCosmosDb":
                return new linkedServiceCosmosDb_1.LinkedServiceCosmosDb(name, undefined, { urn });
            case "azure:datafactory/linkedServiceCosmosDbMongoApi:LinkedServiceCosmosDbMongoApi":
                return new linkedServiceCosmosDbMongoApi_1.LinkedServiceCosmosDbMongoApi(name, undefined, { urn });
            case "azure:datafactory/linkedServiceDataLakeStorageGen2:LinkedServiceDataLakeStorageGen2":
                return new linkedServiceDataLakeStorageGen2_1.LinkedServiceDataLakeStorageGen2(name, undefined, { urn });
            case "azure:datafactory/linkedServiceKeyVault:LinkedServiceKeyVault":
                return new linkedServiceKeyVault_1.LinkedServiceKeyVault(name, undefined, { urn });
            case "azure:datafactory/linkedServiceKusto:LinkedServiceKusto":
                return new linkedServiceKusto_1.LinkedServiceKusto(name, undefined, { urn });
            case "azure:datafactory/linkedServiceMysql:LinkedServiceMysql":
                return new linkedServiceMysql_1.LinkedServiceMysql(name, undefined, { urn });
            case "azure:datafactory/linkedServiceOdata:LinkedServiceOdata":
                return new linkedServiceOdata_1.LinkedServiceOdata(name, undefined, { urn });
            case "azure:datafactory/linkedServiceOdbc:LinkedServiceOdbc":
                return new linkedServiceOdbc_1.LinkedServiceOdbc(name, undefined, { urn });
            case "azure:datafactory/linkedServicePostgresql:LinkedServicePostgresql":
                return new linkedServicePostgresql_1.LinkedServicePostgresql(name, undefined, { urn });
            case "azure:datafactory/linkedServiceSftp:LinkedServiceSftp":
                return new linkedServiceSftp_1.LinkedServiceSftp(name, undefined, { urn });
            case "azure:datafactory/linkedServiceSnowflake:LinkedServiceSnowflake":
                return new linkedServiceSnowflake_1.LinkedServiceSnowflake(name, undefined, { urn });
            case "azure:datafactory/linkedServiceSqlServer:LinkedServiceSqlServer":
                return new linkedServiceSqlServer_1.LinkedServiceSqlServer(name, undefined, { urn });
            case "azure:datafactory/linkedServiceSynapse:LinkedServiceSynapse":
                return new linkedServiceSynapse_1.LinkedServiceSynapse(name, undefined, { urn });
            case "azure:datafactory/linkedServiceWeb:LinkedServiceWeb":
                return new linkedServiceWeb_1.LinkedServiceWeb(name, undefined, { urn });
            case "azure:datafactory/managedPrivateEndpoint:ManagedPrivateEndpoint":
                return new managedPrivateEndpoint_1.ManagedPrivateEndpoint(name, undefined, { urn });
            case "azure:datafactory/pipeline:Pipeline":
                return new pipeline_1.Pipeline(name, undefined, { urn });
            case "azure:datafactory/triggerBlobEvent:TriggerBlobEvent":
                return new triggerBlobEvent_1.TriggerBlobEvent(name, undefined, { urn });
            case "azure:datafactory/triggerCustomEvent:TriggerCustomEvent":
                return new triggerCustomEvent_1.TriggerCustomEvent(name, undefined, { urn });
            case "azure:datafactory/triggerSchedule:TriggerSchedule":
                return new triggerSchedule_1.TriggerSchedule(name, undefined, { urn });
            case "azure:datafactory/triggerTumblingWindow:TriggerTumblingWindow":
                return new triggerTumblingWindow_1.TriggerTumblingWindow(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "datafactory/customDataset", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/dataFlow", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetAzureBlob", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetBinary", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetCosmosDBApi", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetDelimitedText", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetHttp", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetJson", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetMysql", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetParquet", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetPostgresql", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetSnowflake", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/datasetSqlServerTable", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/factory", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/integrationRuntimeManaged", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/integrationRuntimeRule", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/integrationRuntimeSelfHosted", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/integrationRuntimeSsis", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedCustomService", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureBlobStorage", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureDatabricks", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureFileStorage", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureFunction", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureSearch", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureSqlDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceAzureTableStorage", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceCosmosDb", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceCosmosDbMongoApi", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceDataLakeStorageGen2", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceKeyVault", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceKusto", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceMysql", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceOdata", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceOdbc", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServicePostgresql", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceSftp", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceSnowflake", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceSqlServer", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceSynapse", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/linkedServiceWeb", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/managedPrivateEndpoint", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/pipeline", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/triggerBlobEvent", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/triggerCustomEvent", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/triggerSchedule", _module);
pulumi.runtime.registerResourceModule("azure", "datafactory/triggerTumblingWindow", _module);
//# sourceMappingURL=index.js.map