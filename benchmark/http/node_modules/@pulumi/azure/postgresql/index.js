"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./activeDirectoryAdministrator"), exports);
__exportStar(require("./configuration"), exports);
__exportStar(require("./database"), exports);
__exportStar(require("./firewallRule"), exports);
__exportStar(require("./flexibleServer"), exports);
__exportStar(require("./flexibleServerConfiguration"), exports);
__exportStar(require("./flexibleServerDatabase"), exports);
__exportStar(require("./flexibleServerFirewallRule"), exports);
__exportStar(require("./getFlexibleServer"), exports);
__exportStar(require("./getServer"), exports);
__exportStar(require("./server"), exports);
__exportStar(require("./serverKey"), exports);
__exportStar(require("./virtualNetworkRule"), exports);
// Import resources to register:
const activeDirectoryAdministrator_1 = require("./activeDirectoryAdministrator");
const configuration_1 = require("./configuration");
const database_1 = require("./database");
const firewallRule_1 = require("./firewallRule");
const flexibleServer_1 = require("./flexibleServer");
const flexibleServerConfiguration_1 = require("./flexibleServerConfiguration");
const flexibleServerDatabase_1 = require("./flexibleServerDatabase");
const flexibleServerFirewallRule_1 = require("./flexibleServerFirewallRule");
const server_1 = require("./server");
const serverKey_1 = require("./serverKey");
const virtualNetworkRule_1 = require("./virtualNetworkRule");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:postgresql/activeDirectoryAdministrator:ActiveDirectoryAdministrator":
                return new activeDirectoryAdministrator_1.ActiveDirectoryAdministrator(name, undefined, { urn });
            case "azure:postgresql/configuration:Configuration":
                return new configuration_1.Configuration(name, undefined, { urn });
            case "azure:postgresql/database:Database":
                return new database_1.Database(name, undefined, { urn });
            case "azure:postgresql/firewallRule:FirewallRule":
                return new firewallRule_1.FirewallRule(name, undefined, { urn });
            case "azure:postgresql/flexibleServer:FlexibleServer":
                return new flexibleServer_1.FlexibleServer(name, undefined, { urn });
            case "azure:postgresql/flexibleServerConfiguration:FlexibleServerConfiguration":
                return new flexibleServerConfiguration_1.FlexibleServerConfiguration(name, undefined, { urn });
            case "azure:postgresql/flexibleServerDatabase:FlexibleServerDatabase":
                return new flexibleServerDatabase_1.FlexibleServerDatabase(name, undefined, { urn });
            case "azure:postgresql/flexibleServerFirewallRule:FlexibleServerFirewallRule":
                return new flexibleServerFirewallRule_1.FlexibleServerFirewallRule(name, undefined, { urn });
            case "azure:postgresql/server:Server":
                return new server_1.Server(name, undefined, { urn });
            case "azure:postgresql/serverKey:ServerKey":
                return new serverKey_1.ServerKey(name, undefined, { urn });
            case "azure:postgresql/virtualNetworkRule:VirtualNetworkRule":
                return new virtualNetworkRule_1.VirtualNetworkRule(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "postgresql/activeDirectoryAdministrator", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/configuration", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/database", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/firewallRule", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/flexibleServer", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/flexibleServerConfiguration", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/flexibleServerDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/flexibleServerFirewallRule", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/server", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/serverKey", _module);
pulumi.runtime.registerResourceModule("azure", "postgresql/virtualNetworkRule", _module);
//# sourceMappingURL=index.js.map