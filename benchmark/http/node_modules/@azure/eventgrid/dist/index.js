'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreAuth = require('@azure/core-auth');
var coreClient = require('@azure/core-client');
var coreTracing = require('@azure/core-tracing');
var uuid = require('uuid');
var coreRestPipeline = require('@azure/core-rest-pipeline');
var crypto = require('crypto');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Stringifies a Date object in the format expected by the Event Grid service, for use in a Shared Access Signiture.
 *
 * The service expects this time string to be in the same format as what is returned by the .NET DateTime.ToString
 * method, using the "en-US" culture.
 *
 * This corresponds to the .NET format string: "M/d/yyyy h:mm:ss tt".  For example, the date "June 5th, 2020, 12:09:03 PM"
 * is represented as the string "6/5/2020 12:09:03 PM"
 *
 * The service expects a UTC time, so this method returns a string based on the UTC time of the provided Date.
 *
 * @param d - The Date object to convert to a string.
 */
function dateToServiceTimeString(d) {
    const month = d.getUTCMonth() + 1; // getUTCMonth returns 0-11 not 1-12.
    const day = d.getUTCDate();
    const year = d.getUTCFullYear();
    const hour = d.getUTCHours() === 0 ? 12 : d.getUTCHours() % 12; // getUTCHours returns 0-23, and we want this in 12 hour format.
    const minute = d.getUTCMinutes().toString().padStart(2, "0");
    const second = d.getUTCSeconds().toString().padStart(2, "0");
    const am = d.getUTCHours() >= 13 ? "PM" : "AM";
    return `${month}/${day}/${year} ${hour}:${minute}:${second} ${am}`;
}
/**
 * Returns `true` if the credential object is like the KeyCredential interface (i.e. it has a
 * key property).
 *
 * @param credential - The object to test
 */
function isKeyCredentialLike(o) {
    const castO = o;
    return castO.key !== undefined;
}
function parseAndWrap(jsonStringOrObject) {
    if (typeof jsonStringOrObject === "string") {
        const o = JSON.parse(jsonStringOrObject);
        if (Array.isArray(o)) {
            return o;
        }
        else {
            return [o];
        }
    }
    if (Array.isArray(jsonStringOrObject)) {
        return jsonStringOrObject;
    }
    else {
        return [jsonStringOrObject];
    }
}
const EVENT_GRID_SCHEMA_METADATA_VERSION = "1";
function validateEventGridEvent(o) {
    if (typeof o !== "object") {
        throw new TypeError("event is not an object");
    }
    const castO = o;
    validateRequiredStringProperties(o, [
        "eventType",
        "eventTime",
        "id",
        "subject",
        "topic",
        "dataVersion",
        "metadataVersion",
    ]);
    validateRequiredAnyProperties(o, ["data"]);
    if (castO.metadataVersion !== EVENT_GRID_SCHEMA_METADATA_VERSION) {
        throw new TypeError("event is not in the Event Grid schema");
    }
}
const CLOUD_EVENT_1_0_SPEC_VERSION = "1.0";
function validateCloudEventEvent(o) {
    validateRequiredStringProperties(o, ["type", "source", "id", "specversion"]);
    validateOptionalStringProperties(o, ["time", "dataschema", "datacontenttype", "subject"]);
    if (typeof o !== "object") {
        throw new TypeError("event is not an object");
    }
    const castO = o;
    if (castO.specversion !== CLOUD_EVENT_1_0_SPEC_VERSION) {
        throw new Error("event is not in the Cloud Event 1.0 schema");
    }
}
function validateRequiredStringProperties(o, propertyNames) {
    for (const propertyName of propertyNames) {
        if (typeof o[propertyName] === "undefined") {
            throw new Error(`event is missing required property '${propertyName}'`);
        }
        if (typeof o[propertyName] !== "string") {
            throw new TypeError(`event property '${propertyName} should be a 'string', but is '${typeof o[propertyName]}'`);
        }
    }
}
function validateRequiredAnyProperties(o, propertyNames) {
    for (const propertyName of propertyNames) {
        if (typeof o[propertyName] === "undefined") {
            throw new Error(`event is missing required property '${propertyName}'`);
        }
    }
}
function validateOptionalStringProperties(o, propertyNames) {
    for (const propertyName of propertyNames) {
        if (typeof o[propertyName] !== "undefined" && typeof o[propertyName] !== "string") {
            throw new TypeError(`event property '${propertyName}' should be a 'string' but it is a '${typeof o[propertyName]}'`);
        }
    }
}

// Copyright (c) Microsoft Corporation.
/**
 * The name of the header to include when a Shared Key is used for authentication.
 */
const API_KEY_HEADER_NAME = "aeg-sas-key";
/**
 * The name of the header to include when Shared Access Signature is used for authentication.
 */
const SAS_TOKEN_HEADER_NAME = "aeg-sas-token";
/**
 * The programmatic identifier of the eventGridCredentialPolicy.
 */
const eventGridCredentialPolicyName = "eventGridCredentialPolicy";
/**
 * A concrete implementation of an AzureKeyCredential policy
 * using the appropriate header for Event Grid
 */
function eventGridCredentialPolicy(credential) {
    return {
        name: eventGridCredentialPolicyName,
        async sendRequest(request, next) {
            if (isKeyCredentialLike(credential)) {
                request.headers.set(API_KEY_HEADER_NAME, credential.key);
            }
            else {
                request.headers.set(SAS_TOKEN_HEADER_NAME, credential.signature);
            }
            return next(request);
        },
    };
}

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const DEFAULT_API_VERSION = "2018-01-01";
const DEFAULT_EVENTGRID_SCOPE = "https://eventgrid.azure.net/.default";

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Property names defined by the CloudEvents 1.0 specification, these may not be reused as the names of extension properties.
 */
const cloudEventReservedPropertyNames = [
    "specversion",
    "id",
    "source",
    "type",
    "datacontenttype",
    "dataschema",
    "subject",
    "time",
    "data",
];

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const events = {
    parameterPath: "events",
    mapper: {
        serializedName: "events",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Composite",
                    className: "EventGridEvent"
                }
            }
        }
    }
};
const topicHostname = {
    parameterPath: "topicHostname",
    mapper: {
        serializedName: "topicHostname",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2018-01-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const contentType1 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/cloudevents-batch+json; charset=utf-8",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const events1 = {
    parameterPath: "events",
    mapper: {
        serializedName: "events",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "Composite",
                    className: "CloudEvent"
                }
            }
        }
    }
};
const aegChannelName = {
    parameterPath: ["options", "aegChannelName"],
    mapper: {
        serializedName: "aeg-channel-name",
        type: {
            name: "String"
        }
    }
};
const events2 = {
    parameterPath: "events",
    mapper: {
        serializedName: "events",
        required: true,
        type: {
            name: "Sequence",
            element: {
                type: {
                    name: "any"
                }
            }
        }
    }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const EventGridEvent = {
    type: {
        name: "Composite",
        className: "EventGridEvent",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            topic: {
                serializedName: "topic",
                type: {
                    name: "String"
                }
            },
            subject: {
                serializedName: "subject",
                required: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                required: true,
                type: {
                    name: "any"
                }
            },
            eventType: {
                serializedName: "eventType",
                required: true,
                type: {
                    name: "String"
                }
            },
            eventTime: {
                serializedName: "eventTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            metadataVersion: {
                serializedName: "metadataVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            dataVersion: {
                serializedName: "dataVersion",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const CloudEvent = {
    type: {
        name: "Composite",
        className: "CloudEvent",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            source: {
                serializedName: "source",
                required: true,
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "any"
                }
            },
            dataBase64: {
                serializedName: "data_base64",
                type: {
                    name: "ByteArray"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            time: {
                serializedName: "time",
                type: {
                    name: "DateTime"
                }
            },
            specversion: {
                serializedName: "specversion",
                required: true,
                type: {
                    name: "String"
                }
            },
            dataschema: {
                serializedName: "dataschema",
                type: {
                    name: "String"
                }
            },
            datacontenttype: {
                serializedName: "datacontenttype",
                type: {
                    name: "String"
                }
            },
            subject: {
                serializedName: "subject",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageBlobCreatedEventData = {
    type: {
        name: "Composite",
        className: "StorageBlobCreatedEventData",
        modelProperties: {
            api: {
                serializedName: "api",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            eTag: {
                serializedName: "eTag",
                required: true,
                type: {
                    name: "String"
                }
            },
            contentType: {
                serializedName: "contentType",
                required: true,
                type: {
                    name: "String"
                }
            },
            contentLength: {
                serializedName: "contentLength",
                required: true,
                type: {
                    name: "Number"
                }
            },
            contentOffset: {
                serializedName: "contentOffset",
                required: true,
                type: {
                    name: "Number"
                }
            },
            blobType: {
                serializedName: "blobType",
                required: true,
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "String"
                }
            },
            sequencer: {
                serializedName: "sequencer",
                required: true,
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                required: true,
                type: {
                    name: "String"
                }
            },
            storageDiagnostics: {
                serializedName: "storageDiagnostics",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const StorageBlobDeletedEventData = {
    type: {
        name: "Composite",
        className: "StorageBlobDeletedEventData",
        modelProperties: {
            api: {
                serializedName: "api",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            contentType: {
                serializedName: "contentType",
                required: true,
                type: {
                    name: "String"
                }
            },
            blobType: {
                serializedName: "blobType",
                required: true,
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "String"
                }
            },
            sequencer: {
                serializedName: "sequencer",
                required: true,
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                required: true,
                type: {
                    name: "String"
                }
            },
            storageDiagnostics: {
                serializedName: "storageDiagnostics",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const StorageDirectoryCreatedEventData = {
    type: {
        name: "Composite",
        className: "StorageDirectoryCreatedEventData",
        modelProperties: {
            api: {
                serializedName: "api",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            eTag: {
                serializedName: "eTag",
                required: true,
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "String"
                }
            },
            sequencer: {
                serializedName: "sequencer",
                required: true,
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                required: true,
                type: {
                    name: "String"
                }
            },
            storageDiagnostics: {
                serializedName: "storageDiagnostics",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const StorageDirectoryDeletedEventData = {
    type: {
        name: "Composite",
        className: "StorageDirectoryDeletedEventData",
        modelProperties: {
            api: {
                serializedName: "api",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "String"
                }
            },
            recursive: {
                serializedName: "recursive",
                required: true,
                type: {
                    name: "String"
                }
            },
            sequencer: {
                serializedName: "sequencer",
                required: true,
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                required: true,
                type: {
                    name: "String"
                }
            },
            storageDiagnostics: {
                serializedName: "storageDiagnostics",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const StorageBlobRenamedEventData = {
    type: {
        name: "Composite",
        className: "StorageBlobRenamedEventData",
        modelProperties: {
            api: {
                serializedName: "api",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            sourceUrl: {
                serializedName: "sourceUrl",
                required: true,
                type: {
                    name: "String"
                }
            },
            destinationUrl: {
                serializedName: "destinationUrl",
                required: true,
                type: {
                    name: "String"
                }
            },
            sequencer: {
                serializedName: "sequencer",
                required: true,
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                required: true,
                type: {
                    name: "String"
                }
            },
            storageDiagnostics: {
                serializedName: "storageDiagnostics",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const StorageDirectoryRenamedEventData = {
    type: {
        name: "Composite",
        className: "StorageDirectoryRenamedEventData",
        modelProperties: {
            api: {
                serializedName: "api",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            sourceUrl: {
                serializedName: "sourceUrl",
                required: true,
                type: {
                    name: "String"
                }
            },
            destinationUrl: {
                serializedName: "destinationUrl",
                required: true,
                type: {
                    name: "String"
                }
            },
            sequencer: {
                serializedName: "sequencer",
                required: true,
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                required: true,
                type: {
                    name: "String"
                }
            },
            storageDiagnostics: {
                serializedName: "storageDiagnostics",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const StorageLifecyclePolicyCompletedEventData = {
    type: {
        name: "Composite",
        className: "StorageLifecyclePolicyCompletedEventData",
        modelProperties: {
            scheduleTime: {
                serializedName: "scheduleTime",
                required: true,
                type: {
                    name: "String"
                }
            },
            deleteSummary: {
                serializedName: "deleteSummary",
                type: {
                    name: "Composite",
                    className: "StorageLifecyclePolicyActionSummaryDetail"
                }
            },
            tierToCoolSummary: {
                serializedName: "tierToCoolSummary",
                type: {
                    name: "Composite",
                    className: "StorageLifecyclePolicyActionSummaryDetail"
                }
            },
            tierToArchiveSummary: {
                serializedName: "tierToArchiveSummary",
                type: {
                    name: "Composite",
                    className: "StorageLifecyclePolicyActionSummaryDetail"
                }
            }
        }
    }
};
const StorageLifecyclePolicyActionSummaryDetail = {
    type: {
        name: "Composite",
        className: "StorageLifecyclePolicyActionSummaryDetail",
        modelProperties: {
            totalObjectsCount: {
                serializedName: "totalObjectsCount",
                required: true,
                type: {
                    name: "Number"
                }
            },
            successCount: {
                serializedName: "successCount",
                required: true,
                type: {
                    name: "Number"
                }
            },
            errorList: {
                serializedName: "errorList",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const StorageBlobTierChangedEventData = {
    type: {
        name: "Composite",
        className: "StorageBlobTierChangedEventData",
        modelProperties: {
            api: {
                serializedName: "api",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            contentType: {
                serializedName: "contentType",
                required: true,
                type: {
                    name: "String"
                }
            },
            contentLength: {
                serializedName: "contentLength",
                required: true,
                type: {
                    name: "Number"
                }
            },
            blobType: {
                serializedName: "blobType",
                required: true,
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "String"
                }
            },
            sequencer: {
                serializedName: "sequencer",
                required: true,
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                required: true,
                type: {
                    name: "String"
                }
            },
            storageDiagnostics: {
                serializedName: "storageDiagnostics",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const StorageAsyncOperationInitiatedEventData = {
    type: {
        name: "Composite",
        className: "StorageAsyncOperationInitiatedEventData",
        modelProperties: {
            api: {
                serializedName: "api",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            contentType: {
                serializedName: "contentType",
                required: true,
                type: {
                    name: "String"
                }
            },
            contentLength: {
                serializedName: "contentLength",
                required: true,
                type: {
                    name: "Number"
                }
            },
            blobType: {
                serializedName: "blobType",
                required: true,
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "String"
                }
            },
            sequencer: {
                serializedName: "sequencer",
                required: true,
                type: {
                    name: "String"
                }
            },
            identity: {
                serializedName: "identity",
                required: true,
                type: {
                    name: "String"
                }
            },
            storageDiagnostics: {
                serializedName: "storageDiagnostics",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const StorageBlobInventoryPolicyCompletedEventData = {
    type: {
        name: "Composite",
        className: "StorageBlobInventoryPolicyCompletedEventData",
        modelProperties: {
            scheduleDateTime: {
                serializedName: "scheduleDateTime",
                required: true,
                type: {
                    name: "String"
                }
            },
            accountName: {
                serializedName: "accountName",
                required: true,
                type: {
                    name: "String"
                }
            },
            ruleName: {
                serializedName: "ruleName",
                required: true,
                type: {
                    name: "String"
                }
            },
            policyRunStatus: {
                serializedName: "policyRunStatus",
                required: true,
                type: {
                    name: "String"
                }
            },
            policyRunStatusMessage: {
                serializedName: "policyRunStatusMessage",
                required: true,
                type: {
                    name: "String"
                }
            },
            policyRunId: {
                serializedName: "policyRunId",
                required: true,
                type: {
                    name: "String"
                }
            },
            manifestBlobUrl: {
                serializedName: "manifestBlobUrl",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const EventHubCaptureFileCreatedEventData = {
    type: {
        name: "Composite",
        className: "EventHubCaptureFileCreatedEventData",
        modelProperties: {
            fileUrl: {
                serializedName: "fileUrl",
                required: true,
                type: {
                    name: "String"
                }
            },
            fileType: {
                serializedName: "fileType",
                required: true,
                type: {
                    name: "String"
                }
            },
            partitionId: {
                serializedName: "partitionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            sizeInBytes: {
                serializedName: "sizeInBytes",
                required: true,
                type: {
                    name: "Number"
                }
            },
            eventCount: {
                serializedName: "eventCount",
                required: true,
                type: {
                    name: "Number"
                }
            },
            firstSequenceNumber: {
                serializedName: "firstSequenceNumber",
                required: true,
                type: {
                    name: "Number"
                }
            },
            lastSequenceNumber: {
                serializedName: "lastSequenceNumber",
                required: true,
                type: {
                    name: "Number"
                }
            },
            firstEnqueueTime: {
                serializedName: "firstEnqueueTime",
                required: true,
                type: {
                    name: "String"
                }
            },
            lastEnqueueTime: {
                serializedName: "lastEnqueueTime",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceWriteSuccessEventData = {
    type: {
        name: "Composite",
        className: "ResourceWriteSuccessEventData",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceProvider: {
                serializedName: "resourceProvider",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            operationName: {
                serializedName: "operationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            authorization: {
                serializedName: "authorization",
                type: {
                    name: "Composite",
                    className: "ResourceAuthorization"
                }
            },
            claims: {
                serializedName: "claims",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            correlationId: {
                serializedName: "correlationId",
                required: true,
                type: {
                    name: "String"
                }
            },
            httpRequest: {
                serializedName: "httpRequest",
                type: {
                    name: "Composite",
                    className: "ResourceHttpRequest"
                }
            }
        }
    }
};
const ResourceAuthorization = {
    type: {
        name: "Composite",
        className: "ResourceAuthorization",
        modelProperties: {
            scope: {
                serializedName: "scope",
                required: true,
                type: {
                    name: "String"
                }
            },
            action: {
                serializedName: "action",
                required: true,
                type: {
                    name: "String"
                }
            },
            evidence: {
                serializedName: "evidence",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ResourceHttpRequest = {
    type: {
        name: "Composite",
        className: "ResourceHttpRequest",
        modelProperties: {
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientIpAddress: {
                serializedName: "clientIpAddress",
                required: true,
                type: {
                    name: "String"
                }
            },
            method: {
                serializedName: "method",
                required: true,
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ResourceWriteFailureEventData = {
    type: {
        name: "Composite",
        className: "ResourceWriteFailureEventData",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceProvider: {
                serializedName: "resourceProvider",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            operationName: {
                serializedName: "operationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            authorization: {
                serializedName: "authorization",
                type: {
                    name: "Composite",
                    className: "ResourceAuthorization"
                }
            },
            claims: {
                serializedName: "claims",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            correlationId: {
                serializedName: "correlationId",
                required: true,
                type: {
                    name: "String"
                }
            },
            httpRequest: {
                serializedName: "httpRequest",
                type: {
                    name: "Composite",
                    className: "ResourceHttpRequest"
                }
            }
        }
    }
};
const ResourceWriteCancelEventData = {
    type: {
        name: "Composite",
        className: "ResourceWriteCancelEventData",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceProvider: {
                serializedName: "resourceProvider",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            operationName: {
                serializedName: "operationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            authorization: {
                serializedName: "authorization",
                type: {
                    name: "Composite",
                    className: "ResourceAuthorization"
                }
            },
            claims: {
                serializedName: "claims",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            correlationId: {
                serializedName: "correlationId",
                required: true,
                type: {
                    name: "String"
                }
            },
            httpRequest: {
                serializedName: "httpRequest",
                type: {
                    name: "Composite",
                    className: "ResourceHttpRequest"
                }
            }
        }
    }
};
const ResourceDeleteSuccessEventData = {
    type: {
        name: "Composite",
        className: "ResourceDeleteSuccessEventData",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceProvider: {
                serializedName: "resourceProvider",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            operationName: {
                serializedName: "operationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            authorization: {
                serializedName: "authorization",
                type: {
                    name: "Composite",
                    className: "ResourceAuthorization"
                }
            },
            claims: {
                serializedName: "claims",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            correlationId: {
                serializedName: "correlationId",
                required: true,
                type: {
                    name: "String"
                }
            },
            httpRequest: {
                serializedName: "httpRequest",
                type: {
                    name: "Composite",
                    className: "ResourceHttpRequest"
                }
            }
        }
    }
};
const ResourceDeleteFailureEventData = {
    type: {
        name: "Composite",
        className: "ResourceDeleteFailureEventData",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceProvider: {
                serializedName: "resourceProvider",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            operationName: {
                serializedName: "operationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            authorization: {
                serializedName: "authorization",
                type: {
                    name: "Composite",
                    className: "ResourceAuthorization"
                }
            },
            claims: {
                serializedName: "claims",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            correlationId: {
                serializedName: "correlationId",
                required: true,
                type: {
                    name: "String"
                }
            },
            httpRequest: {
                serializedName: "httpRequest",
                type: {
                    name: "Composite",
                    className: "ResourceHttpRequest"
                }
            }
        }
    }
};
const ResourceDeleteCancelEventData = {
    type: {
        name: "Composite",
        className: "ResourceDeleteCancelEventData",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceProvider: {
                serializedName: "resourceProvider",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            operationName: {
                serializedName: "operationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            authorization: {
                serializedName: "authorization",
                type: {
                    name: "Composite",
                    className: "ResourceAuthorization"
                }
            },
            claims: {
                serializedName: "claims",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            correlationId: {
                serializedName: "correlationId",
                required: true,
                type: {
                    name: "String"
                }
            },
            httpRequest: {
                serializedName: "httpRequest",
                type: {
                    name: "Composite",
                    className: "ResourceHttpRequest"
                }
            }
        }
    }
};
const ResourceActionSuccessEventData = {
    type: {
        name: "Composite",
        className: "ResourceActionSuccessEventData",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceProvider: {
                serializedName: "resourceProvider",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            operationName: {
                serializedName: "operationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            authorization: {
                serializedName: "authorization",
                type: {
                    name: "Composite",
                    className: "ResourceAuthorization"
                }
            },
            claims: {
                serializedName: "claims",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            correlationId: {
                serializedName: "correlationId",
                required: true,
                type: {
                    name: "String"
                }
            },
            httpRequest: {
                serializedName: "httpRequest",
                type: {
                    name: "Composite",
                    className: "ResourceHttpRequest"
                }
            }
        }
    }
};
const ResourceActionFailureEventData = {
    type: {
        name: "Composite",
        className: "ResourceActionFailureEventData",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceProvider: {
                serializedName: "resourceProvider",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            operationName: {
                serializedName: "operationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            authorization: {
                serializedName: "authorization",
                type: {
                    name: "Composite",
                    className: "ResourceAuthorization"
                }
            },
            claims: {
                serializedName: "claims",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            correlationId: {
                serializedName: "correlationId",
                required: true,
                type: {
                    name: "String"
                }
            },
            httpRequest: {
                serializedName: "httpRequest",
                type: {
                    name: "Composite",
                    className: "ResourceHttpRequest"
                }
            }
        }
    }
};
const ResourceActionCancelEventData = {
    type: {
        name: "Composite",
        className: "ResourceActionCancelEventData",
        modelProperties: {
            tenantId: {
                serializedName: "tenantId",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceGroup: {
                serializedName: "resourceGroup",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceProvider: {
                serializedName: "resourceProvider",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            operationName: {
                serializedName: "operationName",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            authorization: {
                serializedName: "authorization",
                type: {
                    name: "Composite",
                    className: "ResourceAuthorization"
                }
            },
            claims: {
                serializedName: "claims",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            correlationId: {
                serializedName: "correlationId",
                required: true,
                type: {
                    name: "String"
                }
            },
            httpRequest: {
                serializedName: "httpRequest",
                type: {
                    name: "Composite",
                    className: "ResourceHttpRequest"
                }
            }
        }
    }
};
const SubscriptionValidationEventData = {
    type: {
        name: "Composite",
        className: "SubscriptionValidationEventData",
        modelProperties: {
            validationCode: {
                serializedName: "validationCode",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            validationUrl: {
                serializedName: "validationUrl",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SubscriptionValidationResponse = {
    type: {
        name: "Composite",
        className: "SubscriptionValidationResponse",
        modelProperties: {
            validationResponse: {
                serializedName: "validationResponse",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SubscriptionDeletedEventData = {
    type: {
        name: "Composite",
        className: "SubscriptionDeletedEventData",
        modelProperties: {
            eventSubscriptionId: {
                serializedName: "eventSubscriptionId",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeviceLifeCycleEvent = {
    type: {
        name: "Composite",
        className: "DeviceLifeCycleEvent",
        modelProperties: {
            deviceId: {
                serializedName: "deviceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            hubName: {
                serializedName: "hubName",
                required: true,
                type: {
                    name: "String"
                }
            },
            twin: {
                serializedName: "twin",
                type: {
                    name: "Composite",
                    className: "DeviceTwinInfo"
                }
            }
        }
    }
};
const DeviceTwinInfo = {
    type: {
        name: "Composite",
        className: "DeviceTwinInfo",
        modelProperties: {
            authenticationType: {
                serializedName: "authenticationType",
                required: true,
                type: {
                    name: "String"
                }
            },
            cloudToDeviceMessageCount: {
                serializedName: "cloudToDeviceMessageCount",
                required: true,
                type: {
                    name: "Number"
                }
            },
            connectionState: {
                serializedName: "connectionState",
                required: true,
                type: {
                    name: "String"
                }
            },
            deviceId: {
                serializedName: "deviceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                required: true,
                type: {
                    name: "String"
                }
            },
            lastActivityTime: {
                serializedName: "lastActivityTime",
                required: true,
                type: {
                    name: "String"
                }
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DeviceTwinInfoProperties"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            },
            statusUpdateTime: {
                serializedName: "statusUpdateTime",
                required: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                required: true,
                type: {
                    name: "Number"
                }
            },
            x509Thumbprint: {
                serializedName: "x509Thumbprint",
                type: {
                    name: "Composite",
                    className: "DeviceTwinInfoX509Thumbprint"
                }
            }
        }
    }
};
const DeviceTwinInfoProperties = {
    type: {
        name: "Composite",
        className: "DeviceTwinInfoProperties",
        modelProperties: {
            desired: {
                serializedName: "desired",
                type: {
                    name: "Composite",
                    className: "DeviceTwin"
                }
            },
            reported: {
                serializedName: "reported",
                type: {
                    name: "Composite",
                    className: "DeviceTwin"
                }
            }
        }
    }
};
const DeviceTwin = {
    type: {
        name: "Composite",
        className: "DeviceTwin",
        modelProperties: {
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "DeviceTwinMetadata"
                }
            },
            version: {
                serializedName: "version",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const DeviceTwinMetadata = {
    type: {
        name: "Composite",
        className: "DeviceTwinMetadata",
        modelProperties: {
            lastUpdated: {
                serializedName: "lastUpdated",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeviceTwinInfoX509Thumbprint = {
    type: {
        name: "Composite",
        className: "DeviceTwinInfoX509Thumbprint",
        modelProperties: {
            primaryThumbprint: {
                serializedName: "primaryThumbprint",
                type: {
                    name: "String"
                }
            },
            secondaryThumbprint: {
                serializedName: "secondaryThumbprint",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeviceConnectionStateEvent = {
    type: {
        name: "Composite",
        className: "DeviceConnectionStateEvent",
        modelProperties: {
            deviceId: {
                serializedName: "deviceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            moduleId: {
                serializedName: "moduleId",
                required: true,
                type: {
                    name: "String"
                }
            },
            hubName: {
                serializedName: "hubName",
                required: true,
                type: {
                    name: "String"
                }
            },
            deviceConnectionStateEventInfo: {
                serializedName: "deviceConnectionStateEventInfo",
                type: {
                    name: "Composite",
                    className: "DeviceConnectionStateEventInfo"
                }
            }
        }
    }
};
const DeviceConnectionStateEventInfo = {
    type: {
        name: "Composite",
        className: "DeviceConnectionStateEventInfo",
        modelProperties: {
            sequenceNumber: {
                serializedName: "sequenceNumber",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const DeviceTelemetryEvent = {
    type: {
        name: "Composite",
        className: "DeviceTelemetryEvent",
        modelProperties: {
            body: {
                serializedName: "body",
                required: true,
                type: {
                    name: "any"
                }
            },
            properties: {
                serializedName: "properties",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            systemProperties: {
                serializedName: "systemProperties",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const ContainerRegistryEventData = {
    type: {
        name: "Composite",
        className: "ContainerRegistryEventData",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            timestamp: {
                serializedName: "timestamp",
                required: true,
                type: {
                    name: "String"
                }
            },
            action: {
                serializedName: "action",
                required: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "Composite",
                    className: "ContainerRegistryEventTarget"
                }
            },
            request: {
                serializedName: "request",
                type: {
                    name: "Composite",
                    className: "ContainerRegistryEventRequest"
                }
            },
            actor: {
                serializedName: "actor",
                type: {
                    name: "Composite",
                    className: "ContainerRegistryEventActor"
                }
            },
            source: {
                serializedName: "source",
                type: {
                    name: "Composite",
                    className: "ContainerRegistryEventSource"
                }
            },
            connectedRegistry: {
                serializedName: "connectedRegistry",
                type: {
                    name: "Composite",
                    className: "ContainerRegistryEventConnectedRegistry"
                }
            }
        }
    }
};
const ContainerRegistryEventTarget = {
    type: {
        name: "Composite",
        className: "ContainerRegistryEventTarget",
        modelProperties: {
            mediaType: {
                serializedName: "mediaType",
                required: true,
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "size",
                required: true,
                type: {
                    name: "Number"
                }
            },
            digest: {
                serializedName: "digest",
                required: true,
                type: {
                    name: "String"
                }
            },
            length: {
                serializedName: "length",
                required: true,
                type: {
                    name: "Number"
                }
            },
            repository: {
                serializedName: "repository",
                required: true,
                type: {
                    name: "String"
                }
            },
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "String"
                }
            },
            tag: {
                serializedName: "tag",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerRegistryEventRequest = {
    type: {
        name: "Composite",
        className: "ContainerRegistryEventRequest",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            addr: {
                serializedName: "addr",
                required: true,
                type: {
                    name: "String"
                }
            },
            host: {
                serializedName: "host",
                required: true,
                type: {
                    name: "String"
                }
            },
            method: {
                serializedName: "method",
                required: true,
                type: {
                    name: "String"
                }
            },
            useragent: {
                serializedName: "useragent",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerRegistryEventActor = {
    type: {
        name: "Composite",
        className: "ContainerRegistryEventActor",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerRegistryEventSource = {
    type: {
        name: "Composite",
        className: "ContainerRegistryEventSource",
        modelProperties: {
            addr: {
                serializedName: "addr",
                required: true,
                type: {
                    name: "String"
                }
            },
            instanceID: {
                serializedName: "instanceID",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerRegistryEventConnectedRegistry = {
    type: {
        name: "Composite",
        className: "ContainerRegistryEventConnectedRegistry",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerRegistryArtifactEventData = {
    type: {
        name: "Composite",
        className: "ContainerRegistryArtifactEventData",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            timestamp: {
                serializedName: "timestamp",
                required: true,
                type: {
                    name: "String"
                }
            },
            action: {
                serializedName: "action",
                required: true,
                type: {
                    name: "String"
                }
            },
            location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                type: {
                    name: "Composite",
                    className: "ContainerRegistryArtifactEventTarget"
                }
            },
            connectedRegistry: {
                serializedName: "connectedRegistry",
                type: {
                    name: "Composite",
                    className: "ContainerRegistryEventConnectedRegistry"
                }
            }
        }
    }
};
const ContainerRegistryArtifactEventTarget = {
    type: {
        name: "Composite",
        className: "ContainerRegistryArtifactEventTarget",
        modelProperties: {
            mediaType: {
                serializedName: "mediaType",
                required: true,
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "size",
                required: true,
                type: {
                    name: "Number"
                }
            },
            digest: {
                serializedName: "digest",
                required: true,
                type: {
                    name: "String"
                }
            },
            repository: {
                serializedName: "repository",
                required: true,
                type: {
                    name: "String"
                }
            },
            tag: {
                serializedName: "tag",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "version",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceBusActiveMessagesAvailableWithNoListenersEventData = {
    type: {
        name: "Composite",
        className: "ServiceBusActiveMessagesAvailableWithNoListenersEventData",
        modelProperties: {
            namespaceName: {
                serializedName: "namespaceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestUri: {
                serializedName: "requestUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            entityType: {
                serializedName: "entityType",
                required: true,
                type: {
                    name: "String"
                }
            },
            queueName: {
                serializedName: "queueName",
                required: true,
                type: {
                    name: "String"
                }
            },
            topicName: {
                serializedName: "topicName",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionName: {
                serializedName: "subscriptionName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceBusDeadletterMessagesAvailableWithNoListenersEventData = {
    type: {
        name: "Composite",
        className: "ServiceBusDeadletterMessagesAvailableWithNoListenersEventData",
        modelProperties: {
            namespaceName: {
                serializedName: "namespaceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestUri: {
                serializedName: "requestUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            entityType: {
                serializedName: "entityType",
                required: true,
                type: {
                    name: "String"
                }
            },
            queueName: {
                serializedName: "queueName",
                required: true,
                type: {
                    name: "String"
                }
            },
            topicName: {
                serializedName: "topicName",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionName: {
                serializedName: "subscriptionName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceBusActiveMessagesAvailablePeriodicNotificationsEventData = {
    type: {
        name: "Composite",
        className: "ServiceBusActiveMessagesAvailablePeriodicNotificationsEventData",
        modelProperties: {
            namespaceName: {
                serializedName: "namespaceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestUri: {
                serializedName: "requestUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            entityType: {
                serializedName: "entityType",
                required: true,
                type: {
                    name: "String"
                }
            },
            queueName: {
                serializedName: "queueName",
                required: true,
                type: {
                    name: "String"
                }
            },
            topicName: {
                serializedName: "topicName",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionName: {
                serializedName: "subscriptionName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ServiceBusDeadletterMessagesAvailablePeriodicNotificationsEventData = {
    type: {
        name: "Composite",
        className: "ServiceBusDeadletterMessagesAvailablePeriodicNotificationsEventData",
        modelProperties: {
            namespaceName: {
                serializedName: "namespaceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestUri: {
                serializedName: "requestUri",
                required: true,
                type: {
                    name: "String"
                }
            },
            entityType: {
                serializedName: "entityType",
                required: true,
                type: {
                    name: "String"
                }
            },
            queueName: {
                serializedName: "queueName",
                required: true,
                type: {
                    name: "String"
                }
            },
            topicName: {
                serializedName: "topicName",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionName: {
                serializedName: "subscriptionName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MediaJobStateChangeEventData = {
    type: {
        name: "Composite",
        className: "MediaJobStateChangeEventData",
        modelProperties: {
            previousState: {
                serializedName: "previousState",
                required: true,
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Canceled",
                        "Canceling",
                        "Error",
                        "Finished",
                        "Processing",
                        "Queued",
                        "Scheduled"
                    ]
                }
            },
            state: {
                serializedName: "state",
                required: true,
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Canceled",
                        "Canceling",
                        "Error",
                        "Finished",
                        "Processing",
                        "Queued",
                        "Scheduled"
                    ]
                }
            },
            correlationData: {
                serializedName: "correlationData",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const MediaJobError = {
    type: {
        name: "Composite",
        className: "MediaJobError",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "ServiceError",
                        "ServiceTransientError",
                        "DownloadNotAccessible",
                        "DownloadTransientError",
                        "UploadNotAccessible",
                        "UploadTransientError",
                        "ConfigurationUnsupported",
                        "ContentMalformed",
                        "ContentUnsupported",
                        "IdentityUnsupported"
                    ]
                }
            },
            message: {
                serializedName: "message",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            category: {
                serializedName: "category",
                required: true,
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Service",
                        "Download",
                        "Upload",
                        "Configuration",
                        "Content",
                        "Account"
                    ]
                }
            },
            retry: {
                serializedName: "retry",
                required: true,
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: ["DoNotRetry", "MayRetry"]
                }
            },
            details: {
                serializedName: "details",
                required: true,
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MediaJobErrorDetail"
                        }
                    }
                }
            }
        }
    }
};
const MediaJobErrorDetail = {
    type: {
        name: "Composite",
        className: "MediaJobErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MediaJobOutput = {
    type: {
        name: "Composite",
        className: "MediaJobOutput",
        uberParent: "MediaJobOutput",
        polymorphicDiscriminator: {
            serializedName: "@odata\\.type",
            clientName: "@odata\\.type"
        },
        modelProperties: {
            odataType: {
                serializedName: "@odata\\.type",
                required: true,
                type: {
                    name: "String"
                }
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "MediaJobError"
                }
            },
            label: {
                serializedName: "label",
                type: {
                    name: "String"
                }
            },
            progress: {
                serializedName: "progress",
                required: true,
                type: {
                    name: "Number"
                }
            },
            state: {
                serializedName: "state",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Canceled",
                        "Canceling",
                        "Error",
                        "Finished",
                        "Processing",
                        "Queued",
                        "Scheduled"
                    ]
                }
            }
        }
    }
};
const MediaJobOutputProgressEventData = {
    serializedName: "#Microsoft.Media.JobOutputProgress",
    type: {
        name: "Composite",
        className: "MediaJobOutputProgressEventData",
        modelProperties: {
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String"
                }
            },
            progress: {
                serializedName: "progress",
                required: true,
                type: {
                    name: "Number"
                }
            },
            jobCorrelationData: {
                serializedName: "jobCorrelationData",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const MediaJobOutputStateChangeEventData = {
    type: {
        name: "Composite",
        className: "MediaJobOutputStateChangeEventData",
        modelProperties: {
            previousState: {
                serializedName: "previousState",
                required: true,
                readOnly: true,
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Canceled",
                        "Canceling",
                        "Error",
                        "Finished",
                        "Processing",
                        "Queued",
                        "Scheduled"
                    ]
                }
            },
            output: {
                serializedName: "output",
                type: {
                    name: "Composite",
                    className: "MediaJobOutput"
                }
            },
            jobCorrelationData: {
                serializedName: "jobCorrelationData",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
const MediaLiveEventEncoderConnectedEventData = {
    type: {
        name: "Composite",
        className: "MediaLiveEventEncoderConnectedEventData",
        modelProperties: {
            ingestUrl: {
                serializedName: "ingestUrl",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            streamId: {
                serializedName: "streamId",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            encoderIp: {
                serializedName: "encoderIp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            encoderPort: {
                serializedName: "encoderPort",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MediaLiveEventConnectionRejectedEventData = {
    type: {
        name: "Composite",
        className: "MediaLiveEventConnectionRejectedEventData",
        modelProperties: {
            ingestUrl: {
                serializedName: "ingestUrl",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            streamId: {
                serializedName: "streamId",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            encoderIp: {
                serializedName: "encoderIp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            encoderPort: {
                serializedName: "encoderPort",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resultCode: {
                serializedName: "resultCode",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MediaLiveEventEncoderDisconnectedEventData = {
    type: {
        name: "Composite",
        className: "MediaLiveEventEncoderDisconnectedEventData",
        modelProperties: {
            ingestUrl: {
                serializedName: "ingestUrl",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            streamId: {
                serializedName: "streamId",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            encoderIp: {
                serializedName: "encoderIp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            encoderPort: {
                serializedName: "encoderPort",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resultCode: {
                serializedName: "resultCode",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MediaLiveEventIncomingStreamReceivedEventData = {
    type: {
        name: "Composite",
        className: "MediaLiveEventIncomingStreamReceivedEventData",
        modelProperties: {
            ingestUrl: {
                serializedName: "ingestUrl",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            trackType: {
                serializedName: "trackType",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            trackName: {
                serializedName: "trackName",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            bitrate: {
                serializedName: "bitrate",
                required: true,
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            encoderIp: {
                serializedName: "encoderIp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            encoderPort: {
                serializedName: "encoderPort",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            timestamp: {
                serializedName: "timestamp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            duration: {
                serializedName: "duration",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            timescale: {
                serializedName: "timescale",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MediaLiveEventIncomingStreamsOutOfSyncEventData = {
    type: {
        name: "Composite",
        className: "MediaLiveEventIncomingStreamsOutOfSyncEventData",
        modelProperties: {
            minLastTimestamp: {
                serializedName: "minLastTimestamp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            typeOfStreamWithMinLastTimestamp: {
                serializedName: "typeOfStreamWithMinLastTimestamp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            maxLastTimestamp: {
                serializedName: "maxLastTimestamp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            typeOfStreamWithMaxLastTimestamp: {
                serializedName: "typeOfStreamWithMaxLastTimestamp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            timescaleOfMinLastTimestamp: {
                serializedName: "timescaleOfMinLastTimestamp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            timescaleOfMaxLastTimestamp: {
                serializedName: "timescaleOfMaxLastTimestamp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MediaLiveEventIncomingVideoStreamsOutOfSyncEventData = {
    type: {
        name: "Composite",
        className: "MediaLiveEventIncomingVideoStreamsOutOfSyncEventData",
        modelProperties: {
            firstTimestamp: {
                serializedName: "firstTimestamp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            firstDuration: {
                serializedName: "firstDuration",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            secondTimestamp: {
                serializedName: "secondTimestamp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            secondDuration: {
                serializedName: "secondDuration",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            timescale: {
                serializedName: "timescale",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MediaLiveEventIncomingDataChunkDroppedEventData = {
    type: {
        name: "Composite",
        className: "MediaLiveEventIncomingDataChunkDroppedEventData",
        modelProperties: {
            timestamp: {
                serializedName: "timestamp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            trackType: {
                serializedName: "trackType",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            bitrate: {
                serializedName: "bitrate",
                required: true,
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            timescale: {
                serializedName: "timescale",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resultCode: {
                serializedName: "resultCode",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            trackName: {
                serializedName: "trackName",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MediaLiveEventIngestHeartbeatEventData = {
    type: {
        name: "Composite",
        className: "MediaLiveEventIngestHeartbeatEventData",
        modelProperties: {
            trackType: {
                serializedName: "trackType",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            trackName: {
                serializedName: "trackName",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            transcriptionLanguage: {
                serializedName: "transcriptionLanguage",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            transcriptionState: {
                serializedName: "transcriptionState",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            bitrate: {
                serializedName: "bitrate",
                required: true,
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            incomingBitrate: {
                serializedName: "incomingBitrate",
                required: true,
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            ingestDriftValue: {
                serializedName: "ingestDriftValue",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lastFragmentArrivalTime: {
                serializedName: "lastFragmentArrivalTime",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            lastTimestamp: {
                serializedName: "lastTimestamp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            timescale: {
                serializedName: "timescale",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            overlapCount: {
                serializedName: "overlapCount",
                required: true,
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            discontinuityCount: {
                serializedName: "discontinuityCount",
                required: true,
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            nonincreasingCount: {
                serializedName: "nonincreasingCount",
                required: true,
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            unexpectedBitrate: {
                serializedName: "unexpectedBitrate",
                required: true,
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            state: {
                serializedName: "state",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            healthy: {
                serializedName: "healthy",
                required: true,
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const MediaLiveEventTrackDiscontinuityDetectedEventData = {
    type: {
        name: "Composite",
        className: "MediaLiveEventTrackDiscontinuityDetectedEventData",
        modelProperties: {
            trackType: {
                serializedName: "trackType",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            trackName: {
                serializedName: "trackName",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            bitrate: {
                serializedName: "bitrate",
                required: true,
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            previousTimestamp: {
                serializedName: "previousTimestamp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            newTimestamp: {
                serializedName: "newTimestamp",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            timescale: {
                serializedName: "timescale",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            discontinuityGap: {
                serializedName: "discontinuityGap",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MediaLiveEventChannelArchiveHeartbeatEventData = {
    type: {
        name: "Composite",
        className: "MediaLiveEventChannelArchiveHeartbeatEventData",
        modelProperties: {
            channelLatencyMs: {
                serializedName: "channelLatencyMs",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            latencyResultCode: {
                serializedName: "latencyResultCode",
                required: true,
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MapsGeofenceEvent = {
    type: {
        name: "Composite",
        className: "MapsGeofenceEvent",
        modelProperties: {
            expiredGeofenceGeometryId: {
                serializedName: "expiredGeofenceGeometryId",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            geometries: {
                serializedName: "geometries",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MapsGeofenceGeometry"
                        }
                    }
                }
            },
            invalidPeriodGeofenceGeometryId: {
                serializedName: "invalidPeriodGeofenceGeometryId",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            isEventPublished: {
                serializedName: "isEventPublished",
                required: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
const MapsGeofenceGeometry = {
    type: {
        name: "Composite",
        className: "MapsGeofenceGeometry",
        modelProperties: {
            deviceId: {
                serializedName: "deviceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            distance: {
                serializedName: "distance",
                required: true,
                type: {
                    name: "Number"
                }
            },
            geometryId: {
                serializedName: "geometryId",
                required: true,
                type: {
                    name: "String"
                }
            },
            nearestLat: {
                serializedName: "nearestLat",
                required: true,
                type: {
                    name: "Number"
                }
            },
            nearestLon: {
                serializedName: "nearestLon",
                required: true,
                type: {
                    name: "Number"
                }
            },
            udId: {
                serializedName: "udId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppConfigurationKeyValueModifiedEventData = {
    type: {
        name: "Composite",
        className: "AppConfigurationKeyValueModifiedEventData",
        modelProperties: {
            key: {
                serializedName: "key",
                required: true,
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                required: true,
                type: {
                    name: "String"
                }
            },
            syncToken: {
                serializedName: "syncToken",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppConfigurationKeyValueDeletedEventData = {
    type: {
        name: "Composite",
        className: "AppConfigurationKeyValueDeletedEventData",
        modelProperties: {
            key: {
                serializedName: "key",
                required: true,
                type: {
                    name: "String"
                }
            },
            label: {
                serializedName: "label",
                required: true,
                type: {
                    name: "String"
                }
            },
            etag: {
                serializedName: "etag",
                required: true,
                type: {
                    name: "String"
                }
            },
            syncToken: {
                serializedName: "syncToken",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SignalRServiceClientConnectionConnectedEventData = {
    type: {
        name: "Composite",
        className: "SignalRServiceClientConnectionConnectedEventData",
        modelProperties: {
            timestamp: {
                serializedName: "timestamp",
                required: true,
                type: {
                    name: "String"
                }
            },
            hubName: {
                serializedName: "hubName",
                required: true,
                type: {
                    name: "String"
                }
            },
            connectionId: {
                serializedName: "connectionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            userId: {
                serializedName: "userId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const SignalRServiceClientConnectionDisconnectedEventData = {
    type: {
        name: "Composite",
        className: "SignalRServiceClientConnectionDisconnectedEventData",
        modelProperties: {
            timestamp: {
                serializedName: "timestamp",
                required: true,
                type: {
                    name: "String"
                }
            },
            hubName: {
                serializedName: "hubName",
                required: true,
                type: {
                    name: "String"
                }
            },
            connectionId: {
                serializedName: "connectionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            userId: {
                serializedName: "userId",
                required: true,
                type: {
                    name: "String"
                }
            },
            errorMessage: {
                serializedName: "errorMessage",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const KeyVaultCertificateNewVersionCreatedEventData = {
    type: {
        name: "Composite",
        className: "KeyVaultCertificateNewVersionCreatedEventData",
        modelProperties: {
            id: {
                serializedName: "Id",
                required: true,
                type: {
                    name: "String"
                }
            },
            vaultName: {
                serializedName: "VaultName",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectType: {
                serializedName: "ObjectType",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectName: {
                serializedName: "ObjectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "Version",
                required: true,
                type: {
                    name: "String"
                }
            },
            nbf: {
                serializedName: "NBF",
                required: true,
                type: {
                    name: "Number"
                }
            },
            exp: {
                serializedName: "EXP",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const KeyVaultCertificateNearExpiryEventData = {
    type: {
        name: "Composite",
        className: "KeyVaultCertificateNearExpiryEventData",
        modelProperties: {
            id: {
                serializedName: "Id",
                required: true,
                type: {
                    name: "String"
                }
            },
            vaultName: {
                serializedName: "VaultName",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectType: {
                serializedName: "ObjectType",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectName: {
                serializedName: "ObjectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "Version",
                required: true,
                type: {
                    name: "String"
                }
            },
            nbf: {
                serializedName: "NBF",
                required: true,
                type: {
                    name: "Number"
                }
            },
            exp: {
                serializedName: "EXP",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const KeyVaultCertificateExpiredEventData = {
    type: {
        name: "Composite",
        className: "KeyVaultCertificateExpiredEventData",
        modelProperties: {
            id: {
                serializedName: "Id",
                required: true,
                type: {
                    name: "String"
                }
            },
            vaultName: {
                serializedName: "VaultName",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectType: {
                serializedName: "ObjectType",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectName: {
                serializedName: "ObjectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "Version",
                required: true,
                type: {
                    name: "String"
                }
            },
            nbf: {
                serializedName: "NBF",
                required: true,
                type: {
                    name: "Number"
                }
            },
            exp: {
                serializedName: "EXP",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const KeyVaultKeyNewVersionCreatedEventData = {
    type: {
        name: "Composite",
        className: "KeyVaultKeyNewVersionCreatedEventData",
        modelProperties: {
            id: {
                serializedName: "Id",
                required: true,
                type: {
                    name: "String"
                }
            },
            vaultName: {
                serializedName: "VaultName",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectType: {
                serializedName: "ObjectType",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectName: {
                serializedName: "ObjectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "Version",
                required: true,
                type: {
                    name: "String"
                }
            },
            nbf: {
                serializedName: "NBF",
                required: true,
                type: {
                    name: "Number"
                }
            },
            exp: {
                serializedName: "EXP",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const KeyVaultKeyNearExpiryEventData = {
    type: {
        name: "Composite",
        className: "KeyVaultKeyNearExpiryEventData",
        modelProperties: {
            id: {
                serializedName: "Id",
                required: true,
                type: {
                    name: "String"
                }
            },
            vaultName: {
                serializedName: "VaultName",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectType: {
                serializedName: "ObjectType",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectName: {
                serializedName: "ObjectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "Version",
                required: true,
                type: {
                    name: "String"
                }
            },
            nbf: {
                serializedName: "NBF",
                required: true,
                type: {
                    name: "Number"
                }
            },
            exp: {
                serializedName: "EXP",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const KeyVaultKeyExpiredEventData = {
    type: {
        name: "Composite",
        className: "KeyVaultKeyExpiredEventData",
        modelProperties: {
            id: {
                serializedName: "Id",
                required: true,
                type: {
                    name: "String"
                }
            },
            vaultName: {
                serializedName: "VaultName",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectType: {
                serializedName: "ObjectType",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectName: {
                serializedName: "ObjectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "Version",
                required: true,
                type: {
                    name: "String"
                }
            },
            nbf: {
                serializedName: "NBF",
                required: true,
                type: {
                    name: "Number"
                }
            },
            exp: {
                serializedName: "EXP",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const KeyVaultSecretNewVersionCreatedEventData = {
    type: {
        name: "Composite",
        className: "KeyVaultSecretNewVersionCreatedEventData",
        modelProperties: {
            id: {
                serializedName: "Id",
                required: true,
                type: {
                    name: "String"
                }
            },
            vaultName: {
                serializedName: "VaultName",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectType: {
                serializedName: "ObjectType",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectName: {
                serializedName: "ObjectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "Version",
                required: true,
                type: {
                    name: "String"
                }
            },
            nbf: {
                serializedName: "NBF",
                required: true,
                type: {
                    name: "Number"
                }
            },
            exp: {
                serializedName: "EXP",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const KeyVaultSecretNearExpiryEventData = {
    type: {
        name: "Composite",
        className: "KeyVaultSecretNearExpiryEventData",
        modelProperties: {
            id: {
                serializedName: "Id",
                required: true,
                type: {
                    name: "String"
                }
            },
            vaultName: {
                serializedName: "VaultName",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectType: {
                serializedName: "ObjectType",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectName: {
                serializedName: "ObjectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "Version",
                required: true,
                type: {
                    name: "String"
                }
            },
            nbf: {
                serializedName: "NBF",
                required: true,
                type: {
                    name: "Number"
                }
            },
            exp: {
                serializedName: "EXP",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const KeyVaultSecretExpiredEventData = {
    type: {
        name: "Composite",
        className: "KeyVaultSecretExpiredEventData",
        modelProperties: {
            id: {
                serializedName: "Id",
                required: true,
                type: {
                    name: "String"
                }
            },
            vaultName: {
                serializedName: "VaultName",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectType: {
                serializedName: "ObjectType",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectName: {
                serializedName: "ObjectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "Version",
                required: true,
                type: {
                    name: "String"
                }
            },
            nbf: {
                serializedName: "NBF",
                required: true,
                type: {
                    name: "Number"
                }
            },
            exp: {
                serializedName: "EXP",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const KeyVaultAccessPolicyChangedEventData = {
    type: {
        name: "Composite",
        className: "KeyVaultAccessPolicyChangedEventData",
        modelProperties: {
            id: {
                serializedName: "Id",
                required: true,
                type: {
                    name: "String"
                }
            },
            vaultName: {
                serializedName: "VaultName",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectType: {
                serializedName: "ObjectType",
                required: true,
                type: {
                    name: "String"
                }
            },
            objectName: {
                serializedName: "ObjectName",
                required: true,
                type: {
                    name: "String"
                }
            },
            version: {
                serializedName: "Version",
                required: true,
                type: {
                    name: "String"
                }
            },
            nbf: {
                serializedName: "NBF",
                required: true,
                type: {
                    name: "Number"
                }
            },
            exp: {
                serializedName: "EXP",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const MachineLearningServicesModelRegisteredEventData = {
    type: {
        name: "Composite",
        className: "MachineLearningServicesModelRegisteredEventData",
        modelProperties: {
            modelName: {
                serializedName: "modelName",
                required: true,
                type: {
                    name: "String"
                }
            },
            modelVersion: {
                serializedName: "modelVersion",
                required: true,
                type: {
                    name: "String"
                }
            },
            modelTags: {
                serializedName: "modelTags",
                required: true,
                type: {
                    name: "any"
                }
            },
            modelProperties: {
                serializedName: "modelProperties",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const MachineLearningServicesModelDeployedEventData = {
    type: {
        name: "Composite",
        className: "MachineLearningServicesModelDeployedEventData",
        modelProperties: {
            serviceName: {
                serializedName: "serviceName",
                required: true,
                type: {
                    name: "String"
                }
            },
            serviceComputeType: {
                serializedName: "serviceComputeType",
                required: true,
                type: {
                    name: "String"
                }
            },
            modelIds: {
                serializedName: "modelIds",
                required: true,
                type: {
                    name: "String"
                }
            },
            serviceTags: {
                serializedName: "serviceTags",
                required: true,
                type: {
                    name: "any"
                }
            },
            serviceProperties: {
                serializedName: "serviceProperties",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const MachineLearningServicesRunCompletedEventData = {
    type: {
        name: "Composite",
        className: "MachineLearningServicesRunCompletedEventData",
        modelProperties: {
            experimentId: {
                serializedName: "experimentId",
                required: true,
                type: {
                    name: "String"
                }
            },
            experimentName: {
                serializedName: "experimentName",
                required: true,
                type: {
                    name: "String"
                }
            },
            runId: {
                serializedName: "runId",
                required: true,
                type: {
                    name: "String"
                }
            },
            runType: {
                serializedName: "runType",
                required: true,
                type: {
                    name: "String"
                }
            },
            runTags: {
                serializedName: "runTags",
                required: true,
                type: {
                    name: "any"
                }
            },
            runProperties: {
                serializedName: "runProperties",
                required: true,
                type: {
                    name: "any"
                }
            }
        }
    }
};
const MachineLearningServicesDatasetDriftDetectedEventData = {
    type: {
        name: "Composite",
        className: "MachineLearningServicesDatasetDriftDetectedEventData",
        modelProperties: {
            dataDriftId: {
                serializedName: "dataDriftId",
                required: true,
                type: {
                    name: "String"
                }
            },
            dataDriftName: {
                serializedName: "dataDriftName",
                required: true,
                type: {
                    name: "String"
                }
            },
            runId: {
                serializedName: "runId",
                required: true,
                type: {
                    name: "String"
                }
            },
            baseDatasetId: {
                serializedName: "baseDatasetId",
                required: true,
                type: {
                    name: "String"
                }
            },
            targetDatasetId: {
                serializedName: "targetDatasetId",
                required: true,
                type: {
                    name: "String"
                }
            },
            driftCoefficient: {
                serializedName: "driftCoefficient",
                required: true,
                type: {
                    name: "Number"
                }
            },
            startTime: {
                serializedName: "startTime",
                required: true,
                type: {
                    name: "String"
                }
            },
            endTime: {
                serializedName: "endTime",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MachineLearningServicesRunStatusChangedEventData = {
    type: {
        name: "Composite",
        className: "MachineLearningServicesRunStatusChangedEventData",
        modelProperties: {
            experimentId: {
                serializedName: "experimentId",
                required: true,
                type: {
                    name: "String"
                }
            },
            experimentName: {
                serializedName: "experimentName",
                required: true,
                type: {
                    name: "String"
                }
            },
            runId: {
                serializedName: "runId",
                required: true,
                type: {
                    name: "String"
                }
            },
            runType: {
                serializedName: "runType",
                required: true,
                type: {
                    name: "String"
                }
            },
            runTags: {
                serializedName: "runTags",
                required: true,
                type: {
                    name: "any"
                }
            },
            runProperties: {
                serializedName: "runProperties",
                required: true,
                type: {
                    name: "any"
                }
            },
            runStatus: {
                serializedName: "runStatus",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RedisPatchingCompletedEventData = {
    type: {
        name: "Composite",
        className: "RedisPatchingCompletedEventData",
        modelProperties: {
            timestamp: {
                serializedName: "timestamp",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RedisScalingCompletedEventData = {
    type: {
        name: "Composite",
        className: "RedisScalingCompletedEventData",
        modelProperties: {
            timestamp: {
                serializedName: "timestamp",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RedisExportRDBCompletedEventData = {
    type: {
        name: "Composite",
        className: "RedisExportRDBCompletedEventData",
        modelProperties: {
            timestamp: {
                serializedName: "timestamp",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RedisImportRDBCompletedEventData = {
    type: {
        name: "Composite",
        className: "RedisImportRDBCompletedEventData",
        modelProperties: {
            timestamp: {
                serializedName: "timestamp",
                required: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebAppUpdatedEventData = {
    type: {
        name: "Composite",
        className: "WebAppUpdatedEventData",
        modelProperties: {
            appEventTypeDetail: {
                serializedName: "appEventTypeDetail",
                type: {
                    name: "Composite",
                    className: "AppEventTypeDetail"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            correlationRequestId: {
                serializedName: "correlationRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            address: {
                serializedName: "address",
                required: true,
                type: {
                    name: "String"
                }
            },
            verb: {
                serializedName: "verb",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppEventTypeDetail = {
    type: {
        name: "Composite",
        className: "AppEventTypeDetail",
        modelProperties: {
            action: {
                serializedName: "action",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebBackupOperationStartedEventData = {
    type: {
        name: "Composite",
        className: "WebBackupOperationStartedEventData",
        modelProperties: {
            appEventTypeDetail: {
                serializedName: "appEventTypeDetail",
                type: {
                    name: "Composite",
                    className: "AppEventTypeDetail"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            correlationRequestId: {
                serializedName: "correlationRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            address: {
                serializedName: "address",
                required: true,
                type: {
                    name: "String"
                }
            },
            verb: {
                serializedName: "verb",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebBackupOperationCompletedEventData = {
    type: {
        name: "Composite",
        className: "WebBackupOperationCompletedEventData",
        modelProperties: {
            appEventTypeDetail: {
                serializedName: "appEventTypeDetail",
                type: {
                    name: "Composite",
                    className: "AppEventTypeDetail"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            correlationRequestId: {
                serializedName: "correlationRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            address: {
                serializedName: "address",
                required: true,
                type: {
                    name: "String"
                }
            },
            verb: {
                serializedName: "verb",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebBackupOperationFailedEventData = {
    type: {
        name: "Composite",
        className: "WebBackupOperationFailedEventData",
        modelProperties: {
            appEventTypeDetail: {
                serializedName: "appEventTypeDetail",
                type: {
                    name: "Composite",
                    className: "AppEventTypeDetail"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            correlationRequestId: {
                serializedName: "correlationRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            address: {
                serializedName: "address",
                required: true,
                type: {
                    name: "String"
                }
            },
            verb: {
                serializedName: "verb",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebRestoreOperationStartedEventData = {
    type: {
        name: "Composite",
        className: "WebRestoreOperationStartedEventData",
        modelProperties: {
            appEventTypeDetail: {
                serializedName: "appEventTypeDetail",
                type: {
                    name: "Composite",
                    className: "AppEventTypeDetail"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            correlationRequestId: {
                serializedName: "correlationRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            address: {
                serializedName: "address",
                required: true,
                type: {
                    name: "String"
                }
            },
            verb: {
                serializedName: "verb",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebRestoreOperationCompletedEventData = {
    type: {
        name: "Composite",
        className: "WebRestoreOperationCompletedEventData",
        modelProperties: {
            appEventTypeDetail: {
                serializedName: "appEventTypeDetail",
                type: {
                    name: "Composite",
                    className: "AppEventTypeDetail"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            correlationRequestId: {
                serializedName: "correlationRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            address: {
                serializedName: "address",
                required: true,
                type: {
                    name: "String"
                }
            },
            verb: {
                serializedName: "verb",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebRestoreOperationFailedEventData = {
    type: {
        name: "Composite",
        className: "WebRestoreOperationFailedEventData",
        modelProperties: {
            appEventTypeDetail: {
                serializedName: "appEventTypeDetail",
                type: {
                    name: "Composite",
                    className: "AppEventTypeDetail"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            correlationRequestId: {
                serializedName: "correlationRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            address: {
                serializedName: "address",
                required: true,
                type: {
                    name: "String"
                }
            },
            verb: {
                serializedName: "verb",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebSlotSwapStartedEventData = {
    type: {
        name: "Composite",
        className: "WebSlotSwapStartedEventData",
        modelProperties: {
            appEventTypeDetail: {
                serializedName: "appEventTypeDetail",
                type: {
                    name: "Composite",
                    className: "AppEventTypeDetail"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            correlationRequestId: {
                serializedName: "correlationRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            address: {
                serializedName: "address",
                required: true,
                type: {
                    name: "String"
                }
            },
            verb: {
                serializedName: "verb",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebSlotSwapCompletedEventData = {
    type: {
        name: "Composite",
        className: "WebSlotSwapCompletedEventData",
        modelProperties: {
            appEventTypeDetail: {
                serializedName: "appEventTypeDetail",
                type: {
                    name: "Composite",
                    className: "AppEventTypeDetail"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            correlationRequestId: {
                serializedName: "correlationRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            address: {
                serializedName: "address",
                required: true,
                type: {
                    name: "String"
                }
            },
            verb: {
                serializedName: "verb",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebSlotSwapFailedEventData = {
    type: {
        name: "Composite",
        className: "WebSlotSwapFailedEventData",
        modelProperties: {
            appEventTypeDetail: {
                serializedName: "appEventTypeDetail",
                type: {
                    name: "Composite",
                    className: "AppEventTypeDetail"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            correlationRequestId: {
                serializedName: "correlationRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            address: {
                serializedName: "address",
                required: true,
                type: {
                    name: "String"
                }
            },
            verb: {
                serializedName: "verb",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebSlotSwapWithPreviewStartedEventData = {
    type: {
        name: "Composite",
        className: "WebSlotSwapWithPreviewStartedEventData",
        modelProperties: {
            appEventTypeDetail: {
                serializedName: "appEventTypeDetail",
                type: {
                    name: "Composite",
                    className: "AppEventTypeDetail"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            correlationRequestId: {
                serializedName: "correlationRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            address: {
                serializedName: "address",
                required: true,
                type: {
                    name: "String"
                }
            },
            verb: {
                serializedName: "verb",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebSlotSwapWithPreviewCancelledEventData = {
    type: {
        name: "Composite",
        className: "WebSlotSwapWithPreviewCancelledEventData",
        modelProperties: {
            appEventTypeDetail: {
                serializedName: "appEventTypeDetail",
                type: {
                    name: "Composite",
                    className: "AppEventTypeDetail"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            correlationRequestId: {
                serializedName: "correlationRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            address: {
                serializedName: "address",
                required: true,
                type: {
                    name: "String"
                }
            },
            verb: {
                serializedName: "verb",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebAppServicePlanUpdatedEventData = {
    type: {
        name: "Composite",
        className: "WebAppServicePlanUpdatedEventData",
        modelProperties: {
            appServicePlanEventTypeDetail: {
                serializedName: "appServicePlanEventTypeDetail",
                type: {
                    name: "Composite",
                    className: "AppServicePlanEventTypeDetail"
                }
            },
            sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "WebAppServicePlanUpdatedEventDataSku"
                }
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            clientRequestId: {
                serializedName: "clientRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            correlationRequestId: {
                serializedName: "correlationRequestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            requestId: {
                serializedName: "requestId",
                required: true,
                type: {
                    name: "String"
                }
            },
            address: {
                serializedName: "address",
                required: true,
                type: {
                    name: "String"
                }
            },
            verb: {
                serializedName: "verb",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AppServicePlanEventTypeDetail = {
    type: {
        name: "Composite",
        className: "AppServicePlanEventTypeDetail",
        modelProperties: {
            stampKind: {
                serializedName: "stampKind",
                required: true,
                type: {
                    name: "String"
                }
            },
            action: {
                serializedName: "action",
                required: true,
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const WebAppServicePlanUpdatedEventDataSku = {
    type: {
        name: "Composite",
        className: "WebAppServicePlanUpdatedEventDataSku",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            tier: {
                serializedName: "Tier",
                type: {
                    name: "String"
                }
            },
            size: {
                serializedName: "Size",
                type: {
                    name: "String"
                }
            },
            family: {
                serializedName: "Family",
                type: {
                    name: "String"
                }
            },
            capacity: {
                serializedName: "Capacity",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AcsUserDisconnectedEventData = {
    type: {
        name: "Composite",
        className: "AcsUserDisconnectedEventData",
        modelProperties: {
            userCommunicationIdentifier: {
                serializedName: "userCommunicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            }
        }
    }
};
const CommunicationIdentifierModel = {
    type: {
        name: "Composite",
        className: "CommunicationIdentifierModel",
        modelProperties: {
            rawId: {
                serializedName: "rawId",
                required: true,
                type: {
                    name: "String"
                }
            },
            communicationUser: {
                serializedName: "communicationUser",
                type: {
                    name: "Composite",
                    className: "CommunicationUserIdentifierModel"
                }
            },
            phoneNumber: {
                serializedName: "phoneNumber",
                type: {
                    name: "Composite",
                    className: "PhoneNumberIdentifierModel"
                }
            },
            microsoftTeamsUser: {
                serializedName: "microsoftTeamsUser",
                type: {
                    name: "Composite",
                    className: "MicrosoftTeamsUserIdentifierModel"
                }
            }
        }
    }
};
const CommunicationUserIdentifierModel = {
    type: {
        name: "Composite",
        className: "CommunicationUserIdentifierModel",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PhoneNumberIdentifierModel = {
    type: {
        name: "Composite",
        className: "PhoneNumberIdentifierModel",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const MicrosoftTeamsUserIdentifierModel = {
    type: {
        name: "Composite",
        className: "MicrosoftTeamsUserIdentifierModel",
        modelProperties: {
            userId: {
                serializedName: "userId",
                required: true,
                type: {
                    name: "String"
                }
            },
            isAnonymous: {
                serializedName: "isAnonymous",
                type: {
                    name: "Boolean"
                }
            },
            cloud: {
                serializedName: "cloud",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AcsChatEventBase = {
    type: {
        name: "Composite",
        className: "AcsChatEventBase",
        modelProperties: {
            recipientCommunicationIdentifier: {
                serializedName: "recipientCommunicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            },
            transactionId: {
                serializedName: "transactionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            threadId: {
                serializedName: "threadId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AcsChatEventInThreadBase = {
    type: {
        name: "Composite",
        className: "AcsChatEventInThreadBase",
        modelProperties: {
            transactionId: {
                serializedName: "transactionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            threadId: {
                serializedName: "threadId",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AcsChatThreadParticipant = {
    type: {
        name: "Composite",
        className: "AcsChatThreadParticipant",
        modelProperties: {
            displayName: {
                serializedName: "displayName",
                required: true,
                type: {
                    name: "String"
                }
            },
            participantCommunicationIdentifier: {
                serializedName: "participantCommunicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            }
        }
    }
};
const AcsSmsDeliveryAttempt = {
    type: {
        name: "Composite",
        className: "AcsSmsDeliveryAttempt",
        modelProperties: {
            timestamp: {
                serializedName: "timestamp",
                required: true,
                type: {
                    name: "String"
                }
            },
            segmentsSucceeded: {
                serializedName: "segmentsSucceeded",
                required: true,
                type: {
                    name: "Number"
                }
            },
            segmentsFailed: {
                serializedName: "segmentsFailed",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const AcsSmsEventBase = {
    type: {
        name: "Composite",
        className: "AcsSmsEventBase",
        modelProperties: {
            messageId: {
                serializedName: "messageId",
                required: true,
                type: {
                    name: "String"
                }
            },
            from: {
                serializedName: "from",
                required: true,
                type: {
                    name: "String"
                }
            },
            to: {
                serializedName: "to",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AcsRecordingFileStatusUpdatedEventData = {
    type: {
        name: "Composite",
        className: "AcsRecordingFileStatusUpdatedEventData",
        modelProperties: {
            recordingStorageInfo: {
                serializedName: "recordingStorageInfo",
                type: {
                    name: "Composite",
                    className: "AcsRecordingStorageInfo"
                }
            },
            recordingStartTime: {
                serializedName: "recordingStartTime",
                required: true,
                type: {
                    name: "String"
                }
            },
            recordingDurationMs: {
                serializedName: "recordingDurationMs",
                required: true,
                type: {
                    name: "Number"
                }
            },
            recordingContentType: {
                serializedName: "recordingContentType",
                required: true,
                type: {
                    name: "String"
                }
            },
            recordingChannelType: {
                serializedName: "recordingChannelType",
                required: true,
                type: {
                    name: "String"
                }
            },
            recordingFormatType: {
                serializedName: "recordingFormatType",
                required: true,
                type: {
                    name: "String"
                }
            },
            sessionEndReason: {
                serializedName: "sessionEndReason",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const AcsRecordingStorageInfo = {
    type: {
        name: "Composite",
        className: "AcsRecordingStorageInfo",
        modelProperties: {
            recordingChunks: {
                serializedName: "recordingChunks",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AcsRecordingChunkInfo"
                        }
                    }
                }
            }
        }
    }
};
const AcsRecordingChunkInfo = {
    type: {
        name: "Composite",
        className: "AcsRecordingChunkInfo",
        modelProperties: {
            documentId: {
                serializedName: "documentId",
                required: true,
                type: {
                    name: "String"
                }
            },
            index: {
                serializedName: "index",
                required: true,
                type: {
                    name: "Number"
                }
            },
            endReason: {
                serializedName: "endReason",
                required: true,
                type: {
                    name: "String"
                }
            },
            metadataLocation: {
                serializedName: "metadataLocation",
                required: true,
                type: {
                    name: "String"
                }
            },
            contentLocation: {
                serializedName: "contentLocation",
                required: true,
                type: {
                    name: "String"
                }
            },
            deleteLocation: {
                serializedName: "deleteLocation",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PolicyInsightsPolicyStateCreatedEventData = {
    type: {
        name: "Composite",
        className: "PolicyInsightsPolicyStateCreatedEventData",
        modelProperties: {
            timestamp: {
                serializedName: "timestamp",
                required: true,
                type: {
                    name: "String"
                }
            },
            policyAssignmentId: {
                serializedName: "policyAssignmentId",
                required: true,
                type: {
                    name: "String"
                }
            },
            policyDefinitionId: {
                serializedName: "policyDefinitionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            policyDefinitionReferenceId: {
                serializedName: "policyDefinitionReferenceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            complianceState: {
                serializedName: "complianceState",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            complianceReasonCode: {
                serializedName: "complianceReasonCode",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PolicyInsightsPolicyStateChangedEventData = {
    type: {
        name: "Composite",
        className: "PolicyInsightsPolicyStateChangedEventData",
        modelProperties: {
            timestamp: {
                serializedName: "timestamp",
                required: true,
                type: {
                    name: "String"
                }
            },
            policyAssignmentId: {
                serializedName: "policyAssignmentId",
                required: true,
                type: {
                    name: "String"
                }
            },
            policyDefinitionId: {
                serializedName: "policyDefinitionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            policyDefinitionReferenceId: {
                serializedName: "policyDefinitionReferenceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            complianceState: {
                serializedName: "complianceState",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            complianceReasonCode: {
                serializedName: "complianceReasonCode",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const PolicyInsightsPolicyStateDeletedEventData = {
    type: {
        name: "Composite",
        className: "PolicyInsightsPolicyStateDeletedEventData",
        modelProperties: {
            timestamp: {
                serializedName: "timestamp",
                required: true,
                type: {
                    name: "String"
                }
            },
            policyAssignmentId: {
                serializedName: "policyAssignmentId",
                required: true,
                type: {
                    name: "String"
                }
            },
            policyDefinitionId: {
                serializedName: "policyDefinitionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            policyDefinitionReferenceId: {
                serializedName: "policyDefinitionReferenceId",
                required: true,
                type: {
                    name: "String"
                }
            },
            complianceState: {
                serializedName: "complianceState",
                required: true,
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            complianceReasonCode: {
                serializedName: "complianceReasonCode",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ContainerServiceNewKubernetesVersionAvailableEventData = {
    type: {
        name: "Composite",
        className: "ContainerServiceNewKubernetesVersionAvailableEventData",
        modelProperties: {
            latestSupportedKubernetesVersion: {
                serializedName: "latestSupportedKubernetesVersion",
                required: true,
                type: {
                    name: "String"
                }
            },
            latestStableKubernetesVersion: {
                serializedName: "latestStableKubernetesVersion",
                required: true,
                type: {
                    name: "String"
                }
            },
            lowestMinorKubernetesVersion: {
                serializedName: "lowestMinorKubernetesVersion",
                required: true,
                type: {
                    name: "String"
                }
            },
            latestPreviewKubernetesVersion: {
                serializedName: "latestPreviewKubernetesVersion",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiManagementUserCreatedEventData = {
    type: {
        name: "Composite",
        className: "ApiManagementUserCreatedEventData",
        modelProperties: {
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiManagementUserUpdatedEventData = {
    type: {
        name: "Composite",
        className: "ApiManagementUserUpdatedEventData",
        modelProperties: {
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiManagementUserDeletedEventData = {
    type: {
        name: "Composite",
        className: "ApiManagementUserDeletedEventData",
        modelProperties: {
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiManagementSubscriptionCreatedEventData = {
    type: {
        name: "Composite",
        className: "ApiManagementSubscriptionCreatedEventData",
        modelProperties: {
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiManagementSubscriptionUpdatedEventData = {
    type: {
        name: "Composite",
        className: "ApiManagementSubscriptionUpdatedEventData",
        modelProperties: {
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiManagementSubscriptionDeletedEventData = {
    type: {
        name: "Composite",
        className: "ApiManagementSubscriptionDeletedEventData",
        modelProperties: {
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiManagementProductCreatedEventData = {
    type: {
        name: "Composite",
        className: "ApiManagementProductCreatedEventData",
        modelProperties: {
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiManagementProductUpdatedEventData = {
    type: {
        name: "Composite",
        className: "ApiManagementProductUpdatedEventData",
        modelProperties: {
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiManagementProductDeletedEventData = {
    type: {
        name: "Composite",
        className: "ApiManagementProductDeletedEventData",
        modelProperties: {
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiManagementApiCreatedEventData = {
    type: {
        name: "Composite",
        className: "ApiManagementApiCreatedEventData",
        modelProperties: {
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiManagementApiUpdatedEventData = {
    type: {
        name: "Composite",
        className: "ApiManagementApiUpdatedEventData",
        modelProperties: {
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiManagementApiDeletedEventData = {
    type: {
        name: "Composite",
        className: "ApiManagementApiDeletedEventData",
        modelProperties: {
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiManagementApiReleaseCreatedEventData = {
    type: {
        name: "Composite",
        className: "ApiManagementApiReleaseCreatedEventData",
        modelProperties: {
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiManagementApiReleaseUpdatedEventData = {
    type: {
        name: "Composite",
        className: "ApiManagementApiReleaseUpdatedEventData",
        modelProperties: {
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const ApiManagementApiReleaseDeletedEventData = {
    type: {
        name: "Composite",
        className: "ApiManagementApiReleaseDeletedEventData",
        modelProperties: {
            resourceUri: {
                serializedName: "resourceUri",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const HealthcareFhirResourceCreatedEventData = {
    type: {
        name: "Composite",
        className: "HealthcareFhirResourceCreatedEventData",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceFhirAccount: {
                serializedName: "resourceFhirAccount",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceFhirId: {
                serializedName: "resourceFhirId",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceVersionId: {
                serializedName: "resourceVersionId",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const HealthcareFhirResourceUpdatedEventData = {
    type: {
        name: "Composite",
        className: "HealthcareFhirResourceUpdatedEventData",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceFhirAccount: {
                serializedName: "resourceFhirAccount",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceFhirId: {
                serializedName: "resourceFhirId",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceVersionId: {
                serializedName: "resourceVersionId",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const HealthcareFhirResourceDeletedEventData = {
    type: {
        name: "Composite",
        className: "HealthcareFhirResourceDeletedEventData",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceFhirAccount: {
                serializedName: "resourceFhirAccount",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceFhirId: {
                serializedName: "resourceFhirId",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceVersionId: {
                serializedName: "resourceVersionId",
                required: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
const IotHubDeviceCreatedEventData = {
    type: {
        name: "Composite",
        className: "IotHubDeviceCreatedEventData",
        modelProperties: Object.assign({}, DeviceLifeCycleEvent.type.modelProperties)
    }
};
const IotHubDeviceDeletedEventData = {
    type: {
        name: "Composite",
        className: "IotHubDeviceDeletedEventData",
        modelProperties: Object.assign({}, DeviceLifeCycleEvent.type.modelProperties)
    }
};
const IotHubDeviceConnectedEventData = {
    type: {
        name: "Composite",
        className: "IotHubDeviceConnectedEventData",
        modelProperties: Object.assign({}, DeviceConnectionStateEvent.type.modelProperties)
    }
};
const IotHubDeviceDisconnectedEventData = {
    type: {
        name: "Composite",
        className: "IotHubDeviceDisconnectedEventData",
        modelProperties: Object.assign({}, DeviceConnectionStateEvent.type.modelProperties)
    }
};
const IotHubDeviceTelemetryEventData = {
    type: {
        name: "Composite",
        className: "IotHubDeviceTelemetryEventData",
        modelProperties: Object.assign({}, DeviceTelemetryEvent.type.modelProperties)
    }
};
const ContainerRegistryImagePushedEventData = {
    type: {
        name: "Composite",
        className: "ContainerRegistryImagePushedEventData",
        modelProperties: Object.assign({}, ContainerRegistryEventData.type.modelProperties)
    }
};
const ContainerRegistryImageDeletedEventData = {
    type: {
        name: "Composite",
        className: "ContainerRegistryImageDeletedEventData",
        modelProperties: Object.assign({}, ContainerRegistryEventData.type.modelProperties)
    }
};
const ContainerRegistryChartPushedEventData = {
    type: {
        name: "Composite",
        className: "ContainerRegistryChartPushedEventData",
        modelProperties: Object.assign({}, ContainerRegistryArtifactEventData.type.modelProperties)
    }
};
const ContainerRegistryChartDeletedEventData = {
    type: {
        name: "Composite",
        className: "ContainerRegistryChartDeletedEventData",
        modelProperties: Object.assign({}, ContainerRegistryArtifactEventData.type.modelProperties)
    }
};
const MediaJobScheduledEventData = {
    serializedName: "#Microsoft.Media.JobScheduled",
    type: {
        name: "Composite",
        className: "MediaJobScheduledEventData",
        modelProperties: Object.assign({}, MediaJobStateChangeEventData.type.modelProperties)
    }
};
const MediaJobProcessingEventData = {
    serializedName: "#Microsoft.Media.JobProcessing",
    type: {
        name: "Composite",
        className: "MediaJobProcessingEventData",
        modelProperties: Object.assign({}, MediaJobStateChangeEventData.type.modelProperties)
    }
};
const MediaJobCancelingEventData = {
    serializedName: "#Microsoft.Media.JobCanceling",
    type: {
        name: "Composite",
        className: "MediaJobCancelingEventData",
        modelProperties: Object.assign({}, MediaJobStateChangeEventData.type.modelProperties)
    }
};
const MediaJobFinishedEventData = {
    serializedName: "#Microsoft.Media.JobFinished",
    type: {
        name: "Composite",
        className: "MediaJobFinishedEventData",
        modelProperties: Object.assign(Object.assign({}, MediaJobStateChangeEventData.type.modelProperties), { outputs: {
                serializedName: "outputs",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MediaJobOutput"
                        }
                    }
                }
            } })
    }
};
const MediaJobCanceledEventData = {
    serializedName: "#Microsoft.Media.JobCanceled",
    type: {
        name: "Composite",
        className: "MediaJobCanceledEventData",
        modelProperties: Object.assign(Object.assign({}, MediaJobStateChangeEventData.type.modelProperties), { outputs: {
                serializedName: "outputs",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MediaJobOutput"
                        }
                    }
                }
            } })
    }
};
const MediaJobErroredEventData = {
    serializedName: "#Microsoft.Media.JobErrored",
    type: {
        name: "Composite",
        className: "MediaJobErroredEventData",
        modelProperties: Object.assign(Object.assign({}, MediaJobStateChangeEventData.type.modelProperties), { outputs: {
                serializedName: "outputs",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MediaJobOutput"
                        }
                    }
                }
            } })
    }
};
const MediaJobOutputAsset = {
    serializedName: "#Microsoft.Media.JobOutputAsset",
    type: {
        name: "Composite",
        className: "MediaJobOutputAsset",
        uberParent: "MediaJobOutput",
        polymorphicDiscriminator: MediaJobOutput.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, MediaJobOutput.type.modelProperties), { assetName: {
                serializedName: "assetName",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const MediaJobOutputCanceledEventData = {
    serializedName: "#Microsoft.Media.JobOutputCanceled",
    type: {
        name: "Composite",
        className: "MediaJobOutputCanceledEventData",
        modelProperties: Object.assign({}, MediaJobOutputStateChangeEventData.type.modelProperties)
    }
};
const MediaJobOutputCancelingEventData = {
    serializedName: "#Microsoft.Media.JobOutputCanceling",
    type: {
        name: "Composite",
        className: "MediaJobOutputCancelingEventData",
        modelProperties: Object.assign({}, MediaJobOutputStateChangeEventData.type.modelProperties)
    }
};
const MediaJobOutputErroredEventData = {
    serializedName: "#Microsoft.Media.JobOutputErrored",
    type: {
        name: "Composite",
        className: "MediaJobOutputErroredEventData",
        modelProperties: Object.assign({}, MediaJobOutputStateChangeEventData.type.modelProperties)
    }
};
const MediaJobOutputFinishedEventData = {
    serializedName: "#Microsoft.Media.JobOutputFinished",
    type: {
        name: "Composite",
        className: "MediaJobOutputFinishedEventData",
        modelProperties: Object.assign({}, MediaJobOutputStateChangeEventData.type.modelProperties)
    }
};
const MediaJobOutputProcessingEventData = {
    serializedName: "#Microsoft.Media.JobOutputProcessing",
    type: {
        name: "Composite",
        className: "MediaJobOutputProcessingEventData",
        modelProperties: Object.assign({}, MediaJobOutputStateChangeEventData.type.modelProperties)
    }
};
const MediaJobOutputScheduledEventData = {
    serializedName: "#Microsoft.Media.JobOutputScheduled",
    type: {
        name: "Composite",
        className: "MediaJobOutputScheduledEventData",
        modelProperties: Object.assign({}, MediaJobOutputStateChangeEventData.type.modelProperties)
    }
};
const MapsGeofenceEnteredEventData = {
    type: {
        name: "Composite",
        className: "MapsGeofenceEnteredEventData",
        modelProperties: Object.assign({}, MapsGeofenceEvent.type.modelProperties)
    }
};
const MapsGeofenceExitedEventData = {
    type: {
        name: "Composite",
        className: "MapsGeofenceExitedEventData",
        modelProperties: Object.assign({}, MapsGeofenceEvent.type.modelProperties)
    }
};
const MapsGeofenceResultEventData = {
    type: {
        name: "Composite",
        className: "MapsGeofenceResultEventData",
        modelProperties: Object.assign({}, MapsGeofenceEvent.type.modelProperties)
    }
};
const AcsChatMessageEventBase = {
    type: {
        name: "Composite",
        className: "AcsChatMessageEventBase",
        modelProperties: Object.assign(Object.assign({}, AcsChatEventBase.type.modelProperties), { messageId: {
                serializedName: "messageId",
                required: true,
                type: {
                    name: "String"
                }
            }, senderCommunicationIdentifier: {
                serializedName: "senderCommunicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            }, senderDisplayName: {
                serializedName: "senderDisplayName",
                required: true,
                type: {
                    name: "String"
                }
            }, composeTime: {
                serializedName: "composeTime",
                required: true,
                type: {
                    name: "String"
                }
            }, type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "version",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const AcsChatThreadEventBase = {
    type: {
        name: "Composite",
        className: "AcsChatThreadEventBase",
        modelProperties: Object.assign(Object.assign({}, AcsChatEventBase.type.modelProperties), { createTime: {
                serializedName: "createTime",
                required: true,
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "version",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const AcsChatMessageEventInThreadBase = {
    type: {
        name: "Composite",
        className: "AcsChatMessageEventInThreadBase",
        modelProperties: Object.assign(Object.assign({}, AcsChatEventInThreadBase.type.modelProperties), { messageId: {
                serializedName: "messageId",
                required: true,
                type: {
                    name: "String"
                }
            }, senderCommunicationIdentifier: {
                serializedName: "senderCommunicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            }, senderDisplayName: {
                serializedName: "senderDisplayName",
                required: true,
                type: {
                    name: "String"
                }
            }, composeTime: {
                serializedName: "composeTime",
                required: true,
                type: {
                    name: "String"
                }
            }, type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "version",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const AcsChatThreadEventInThreadBase = {
    type: {
        name: "Composite",
        className: "AcsChatThreadEventInThreadBase",
        modelProperties: Object.assign(Object.assign({}, AcsChatEventInThreadBase.type.modelProperties), { createTime: {
                serializedName: "createTime",
                required: true,
                type: {
                    name: "String"
                }
            }, version: {
                serializedName: "version",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const AcsChatParticipantAddedToThreadEventData = {
    type: {
        name: "Composite",
        className: "AcsChatParticipantAddedToThreadEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatEventInThreadBase.type.modelProperties), { time: {
                serializedName: "time",
                required: true,
                type: {
                    name: "String"
                }
            }, addedByCommunicationIdentifier: {
                serializedName: "addedByCommunicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            }, participantAdded: {
                serializedName: "participantAdded",
                type: {
                    name: "Composite",
                    className: "AcsChatThreadParticipant"
                }
            }, version: {
                serializedName: "version",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const AcsChatParticipantRemovedFromThreadEventData = {
    type: {
        name: "Composite",
        className: "AcsChatParticipantRemovedFromThreadEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatEventInThreadBase.type.modelProperties), { time: {
                serializedName: "time",
                required: true,
                type: {
                    name: "String"
                }
            }, removedByCommunicationIdentifier: {
                serializedName: "removedByCommunicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            }, participantRemoved: {
                serializedName: "participantRemoved",
                type: {
                    name: "Composite",
                    className: "AcsChatThreadParticipant"
                }
            }, version: {
                serializedName: "version",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
const AcsSmsDeliveryReportReceivedEventData = {
    type: {
        name: "Composite",
        className: "AcsSmsDeliveryReportReceivedEventData",
        modelProperties: Object.assign(Object.assign({}, AcsSmsEventBase.type.modelProperties), { deliveryStatus: {
                serializedName: "deliveryStatus",
                required: true,
                type: {
                    name: "String"
                }
            }, deliveryStatusDetails: {
                serializedName: "deliveryStatusDetails",
                required: true,
                type: {
                    name: "String"
                }
            }, deliveryAttempts: {
                serializedName: "deliveryAttempts",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AcsSmsDeliveryAttempt"
                        }
                    }
                }
            }, receivedTimestamp: {
                serializedName: "receivedTimestamp",
                required: true,
                type: {
                    name: "String"
                }
            }, tag: {
                serializedName: "tag",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AcsSmsReceivedEventData = {
    type: {
        name: "Composite",
        className: "AcsSmsReceivedEventData",
        modelProperties: Object.assign(Object.assign({}, AcsSmsEventBase.type.modelProperties), { message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            }, receivedTimestamp: {
                serializedName: "receivedTimestamp",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AcsChatMessageReceivedEventData = {
    type: {
        name: "Composite",
        className: "AcsChatMessageReceivedEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatMessageEventBase.type.modelProperties), { messageBody: {
                serializedName: "messageBody",
                required: true,
                type: {
                    name: "String"
                }
            }, metadata: {
                serializedName: "metadata",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const AcsChatMessageEditedEventData = {
    type: {
        name: "Composite",
        className: "AcsChatMessageEditedEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatMessageEventBase.type.modelProperties), { messageBody: {
                serializedName: "messageBody",
                required: true,
                type: {
                    name: "String"
                }
            }, metadata: {
                serializedName: "metadata",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, editTime: {
                serializedName: "editTime",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AcsChatMessageDeletedEventData = {
    type: {
        name: "Composite",
        className: "AcsChatMessageDeletedEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatMessageEventBase.type.modelProperties), { deleteTime: {
                serializedName: "deleteTime",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AcsChatThreadCreatedWithUserEventData = {
    type: {
        name: "Composite",
        className: "AcsChatThreadCreatedWithUserEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatThreadEventBase.type.modelProperties), { createdByCommunicationIdentifier: {
                serializedName: "createdByCommunicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            }, properties: {
                serializedName: "properties",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, participants: {
                serializedName: "participants",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AcsChatThreadParticipant"
                        }
                    }
                }
            } })
    }
};
const AcsChatThreadWithUserDeletedEventData = {
    type: {
        name: "Composite",
        className: "AcsChatThreadWithUserDeletedEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatThreadEventBase.type.modelProperties), { deletedByCommunicationIdentifier: {
                serializedName: "deletedByCommunicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            }, deleteTime: {
                serializedName: "deleteTime",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AcsChatThreadPropertiesUpdatedPerUserEventData = {
    type: {
        name: "Composite",
        className: "AcsChatThreadPropertiesUpdatedPerUserEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatThreadEventBase.type.modelProperties), { editedByCommunicationIdentifier: {
                serializedName: "editedByCommunicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            }, editTime: {
                serializedName: "editTime",
                required: true,
                type: {
                    name: "String"
                }
            }, properties: {
                serializedName: "properties",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
const AcsChatParticipantAddedToThreadWithUserEventData = {
    type: {
        name: "Composite",
        className: "AcsChatParticipantAddedToThreadWithUserEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatThreadEventBase.type.modelProperties), { time: {
                serializedName: "time",
                required: true,
                type: {
                    name: "String"
                }
            }, addedByCommunicationIdentifier: {
                serializedName: "addedByCommunicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            }, participantAdded: {
                serializedName: "participantAdded",
                type: {
                    name: "Composite",
                    className: "AcsChatThreadParticipant"
                }
            } })
    }
};
const AcsChatParticipantRemovedFromThreadWithUserEventData = {
    type: {
        name: "Composite",
        className: "AcsChatParticipantRemovedFromThreadWithUserEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatThreadEventBase.type.modelProperties), { time: {
                serializedName: "time",
                required: true,
                type: {
                    name: "String"
                }
            }, removedByCommunicationIdentifier: {
                serializedName: "removedByCommunicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            }, participantRemoved: {
                serializedName: "participantRemoved",
                type: {
                    name: "Composite",
                    className: "AcsChatThreadParticipant"
                }
            } })
    }
};
const AcsChatMessageReceivedInThreadEventData = {
    type: {
        name: "Composite",
        className: "AcsChatMessageReceivedInThreadEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatMessageEventInThreadBase.type.modelProperties), { messageBody: {
                serializedName: "messageBody",
                required: true,
                type: {
                    name: "String"
                }
            }, metadata: {
                serializedName: "metadata",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
const AcsChatMessageEditedInThreadEventData = {
    type: {
        name: "Composite",
        className: "AcsChatMessageEditedInThreadEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatMessageEventInThreadBase.type.modelProperties), { messageBody: {
                serializedName: "messageBody",
                required: true,
                type: {
                    name: "String"
                }
            }, metadata: {
                serializedName: "metadata",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }, editTime: {
                serializedName: "editTime",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AcsChatMessageDeletedInThreadEventData = {
    type: {
        name: "Composite",
        className: "AcsChatMessageDeletedInThreadEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatMessageEventInThreadBase.type.modelProperties), { deleteTime: {
                serializedName: "deleteTime",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AcsChatThreadCreatedEventData = {
    type: {
        name: "Composite",
        className: "AcsChatThreadCreatedEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatThreadEventInThreadBase.type.modelProperties), { createdByCommunicationIdentifier: {
                serializedName: "createdByCommunicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            }, properties: {
                serializedName: "properties",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }, participants: {
                serializedName: "participants",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AcsChatThreadParticipant"
                        }
                    }
                }
            } })
    }
};
const AcsChatThreadDeletedEventData = {
    type: {
        name: "Composite",
        className: "AcsChatThreadDeletedEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatThreadEventInThreadBase.type.modelProperties), { deletedByCommunicationIdentifier: {
                serializedName: "deletedByCommunicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            }, deleteTime: {
                serializedName: "deleteTime",
                required: true,
                type: {
                    name: "String"
                }
            } })
    }
};
const AcsChatThreadPropertiesUpdatedEventData = {
    type: {
        name: "Composite",
        className: "AcsChatThreadPropertiesUpdatedEventData",
        modelProperties: Object.assign(Object.assign({}, AcsChatThreadEventInThreadBase.type.modelProperties), { editedByCommunicationIdentifier: {
                serializedName: "editedByCommunicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            }, editTime: {
                serializedName: "editTime",
                required: true,
                type: {
                    name: "String"
                }
            }, properties: {
                serializedName: "properties",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            } })
    }
};
let discriminators = {
    MediaJobOutput: MediaJobOutput,
    "MediaJobOutput.#Microsoft.Media.JobOutputAsset": MediaJobOutputAsset
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    EventGridEvent: EventGridEvent,
    CloudEvent: CloudEvent,
    StorageBlobCreatedEventData: StorageBlobCreatedEventData,
    StorageBlobDeletedEventData: StorageBlobDeletedEventData,
    StorageDirectoryCreatedEventData: StorageDirectoryCreatedEventData,
    StorageDirectoryDeletedEventData: StorageDirectoryDeletedEventData,
    StorageBlobRenamedEventData: StorageBlobRenamedEventData,
    StorageDirectoryRenamedEventData: StorageDirectoryRenamedEventData,
    StorageLifecyclePolicyCompletedEventData: StorageLifecyclePolicyCompletedEventData,
    StorageLifecyclePolicyActionSummaryDetail: StorageLifecyclePolicyActionSummaryDetail,
    StorageBlobTierChangedEventData: StorageBlobTierChangedEventData,
    StorageAsyncOperationInitiatedEventData: StorageAsyncOperationInitiatedEventData,
    StorageBlobInventoryPolicyCompletedEventData: StorageBlobInventoryPolicyCompletedEventData,
    EventHubCaptureFileCreatedEventData: EventHubCaptureFileCreatedEventData,
    ResourceWriteSuccessEventData: ResourceWriteSuccessEventData,
    ResourceAuthorization: ResourceAuthorization,
    ResourceHttpRequest: ResourceHttpRequest,
    ResourceWriteFailureEventData: ResourceWriteFailureEventData,
    ResourceWriteCancelEventData: ResourceWriteCancelEventData,
    ResourceDeleteSuccessEventData: ResourceDeleteSuccessEventData,
    ResourceDeleteFailureEventData: ResourceDeleteFailureEventData,
    ResourceDeleteCancelEventData: ResourceDeleteCancelEventData,
    ResourceActionSuccessEventData: ResourceActionSuccessEventData,
    ResourceActionFailureEventData: ResourceActionFailureEventData,
    ResourceActionCancelEventData: ResourceActionCancelEventData,
    SubscriptionValidationEventData: SubscriptionValidationEventData,
    SubscriptionValidationResponse: SubscriptionValidationResponse,
    SubscriptionDeletedEventData: SubscriptionDeletedEventData,
    DeviceLifeCycleEvent: DeviceLifeCycleEvent,
    DeviceTwinInfo: DeviceTwinInfo,
    DeviceTwinInfoProperties: DeviceTwinInfoProperties,
    DeviceTwin: DeviceTwin,
    DeviceTwinMetadata: DeviceTwinMetadata,
    DeviceTwinInfoX509Thumbprint: DeviceTwinInfoX509Thumbprint,
    DeviceConnectionStateEvent: DeviceConnectionStateEvent,
    DeviceConnectionStateEventInfo: DeviceConnectionStateEventInfo,
    DeviceTelemetryEvent: DeviceTelemetryEvent,
    ContainerRegistryEventData: ContainerRegistryEventData,
    ContainerRegistryEventTarget: ContainerRegistryEventTarget,
    ContainerRegistryEventRequest: ContainerRegistryEventRequest,
    ContainerRegistryEventActor: ContainerRegistryEventActor,
    ContainerRegistryEventSource: ContainerRegistryEventSource,
    ContainerRegistryEventConnectedRegistry: ContainerRegistryEventConnectedRegistry,
    ContainerRegistryArtifactEventData: ContainerRegistryArtifactEventData,
    ContainerRegistryArtifactEventTarget: ContainerRegistryArtifactEventTarget,
    ServiceBusActiveMessagesAvailableWithNoListenersEventData: ServiceBusActiveMessagesAvailableWithNoListenersEventData,
    ServiceBusDeadletterMessagesAvailableWithNoListenersEventData: ServiceBusDeadletterMessagesAvailableWithNoListenersEventData,
    ServiceBusActiveMessagesAvailablePeriodicNotificationsEventData: ServiceBusActiveMessagesAvailablePeriodicNotificationsEventData,
    ServiceBusDeadletterMessagesAvailablePeriodicNotificationsEventData: ServiceBusDeadletterMessagesAvailablePeriodicNotificationsEventData,
    MediaJobStateChangeEventData: MediaJobStateChangeEventData,
    MediaJobError: MediaJobError,
    MediaJobErrorDetail: MediaJobErrorDetail,
    MediaJobOutput: MediaJobOutput,
    MediaJobOutputProgressEventData: MediaJobOutputProgressEventData,
    MediaJobOutputStateChangeEventData: MediaJobOutputStateChangeEventData,
    MediaLiveEventEncoderConnectedEventData: MediaLiveEventEncoderConnectedEventData,
    MediaLiveEventConnectionRejectedEventData: MediaLiveEventConnectionRejectedEventData,
    MediaLiveEventEncoderDisconnectedEventData: MediaLiveEventEncoderDisconnectedEventData,
    MediaLiveEventIncomingStreamReceivedEventData: MediaLiveEventIncomingStreamReceivedEventData,
    MediaLiveEventIncomingStreamsOutOfSyncEventData: MediaLiveEventIncomingStreamsOutOfSyncEventData,
    MediaLiveEventIncomingVideoStreamsOutOfSyncEventData: MediaLiveEventIncomingVideoStreamsOutOfSyncEventData,
    MediaLiveEventIncomingDataChunkDroppedEventData: MediaLiveEventIncomingDataChunkDroppedEventData,
    MediaLiveEventIngestHeartbeatEventData: MediaLiveEventIngestHeartbeatEventData,
    MediaLiveEventTrackDiscontinuityDetectedEventData: MediaLiveEventTrackDiscontinuityDetectedEventData,
    MediaLiveEventChannelArchiveHeartbeatEventData: MediaLiveEventChannelArchiveHeartbeatEventData,
    MapsGeofenceEvent: MapsGeofenceEvent,
    MapsGeofenceGeometry: MapsGeofenceGeometry,
    AppConfigurationKeyValueModifiedEventData: AppConfigurationKeyValueModifiedEventData,
    AppConfigurationKeyValueDeletedEventData: AppConfigurationKeyValueDeletedEventData,
    SignalRServiceClientConnectionConnectedEventData: SignalRServiceClientConnectionConnectedEventData,
    SignalRServiceClientConnectionDisconnectedEventData: SignalRServiceClientConnectionDisconnectedEventData,
    KeyVaultCertificateNewVersionCreatedEventData: KeyVaultCertificateNewVersionCreatedEventData,
    KeyVaultCertificateNearExpiryEventData: KeyVaultCertificateNearExpiryEventData,
    KeyVaultCertificateExpiredEventData: KeyVaultCertificateExpiredEventData,
    KeyVaultKeyNewVersionCreatedEventData: KeyVaultKeyNewVersionCreatedEventData,
    KeyVaultKeyNearExpiryEventData: KeyVaultKeyNearExpiryEventData,
    KeyVaultKeyExpiredEventData: KeyVaultKeyExpiredEventData,
    KeyVaultSecretNewVersionCreatedEventData: KeyVaultSecretNewVersionCreatedEventData,
    KeyVaultSecretNearExpiryEventData: KeyVaultSecretNearExpiryEventData,
    KeyVaultSecretExpiredEventData: KeyVaultSecretExpiredEventData,
    KeyVaultAccessPolicyChangedEventData: KeyVaultAccessPolicyChangedEventData,
    MachineLearningServicesModelRegisteredEventData: MachineLearningServicesModelRegisteredEventData,
    MachineLearningServicesModelDeployedEventData: MachineLearningServicesModelDeployedEventData,
    MachineLearningServicesRunCompletedEventData: MachineLearningServicesRunCompletedEventData,
    MachineLearningServicesDatasetDriftDetectedEventData: MachineLearningServicesDatasetDriftDetectedEventData,
    MachineLearningServicesRunStatusChangedEventData: MachineLearningServicesRunStatusChangedEventData,
    RedisPatchingCompletedEventData: RedisPatchingCompletedEventData,
    RedisScalingCompletedEventData: RedisScalingCompletedEventData,
    RedisExportRDBCompletedEventData: RedisExportRDBCompletedEventData,
    RedisImportRDBCompletedEventData: RedisImportRDBCompletedEventData,
    WebAppUpdatedEventData: WebAppUpdatedEventData,
    AppEventTypeDetail: AppEventTypeDetail,
    WebBackupOperationStartedEventData: WebBackupOperationStartedEventData,
    WebBackupOperationCompletedEventData: WebBackupOperationCompletedEventData,
    WebBackupOperationFailedEventData: WebBackupOperationFailedEventData,
    WebRestoreOperationStartedEventData: WebRestoreOperationStartedEventData,
    WebRestoreOperationCompletedEventData: WebRestoreOperationCompletedEventData,
    WebRestoreOperationFailedEventData: WebRestoreOperationFailedEventData,
    WebSlotSwapStartedEventData: WebSlotSwapStartedEventData,
    WebSlotSwapCompletedEventData: WebSlotSwapCompletedEventData,
    WebSlotSwapFailedEventData: WebSlotSwapFailedEventData,
    WebSlotSwapWithPreviewStartedEventData: WebSlotSwapWithPreviewStartedEventData,
    WebSlotSwapWithPreviewCancelledEventData: WebSlotSwapWithPreviewCancelledEventData,
    WebAppServicePlanUpdatedEventData: WebAppServicePlanUpdatedEventData,
    AppServicePlanEventTypeDetail: AppServicePlanEventTypeDetail,
    WebAppServicePlanUpdatedEventDataSku: WebAppServicePlanUpdatedEventDataSku,
    AcsUserDisconnectedEventData: AcsUserDisconnectedEventData,
    CommunicationIdentifierModel: CommunicationIdentifierModel,
    CommunicationUserIdentifierModel: CommunicationUserIdentifierModel,
    PhoneNumberIdentifierModel: PhoneNumberIdentifierModel,
    MicrosoftTeamsUserIdentifierModel: MicrosoftTeamsUserIdentifierModel,
    AcsChatEventBase: AcsChatEventBase,
    AcsChatEventInThreadBase: AcsChatEventInThreadBase,
    AcsChatThreadParticipant: AcsChatThreadParticipant,
    AcsSmsDeliveryAttempt: AcsSmsDeliveryAttempt,
    AcsSmsEventBase: AcsSmsEventBase,
    AcsRecordingFileStatusUpdatedEventData: AcsRecordingFileStatusUpdatedEventData,
    AcsRecordingStorageInfo: AcsRecordingStorageInfo,
    AcsRecordingChunkInfo: AcsRecordingChunkInfo,
    PolicyInsightsPolicyStateCreatedEventData: PolicyInsightsPolicyStateCreatedEventData,
    PolicyInsightsPolicyStateChangedEventData: PolicyInsightsPolicyStateChangedEventData,
    PolicyInsightsPolicyStateDeletedEventData: PolicyInsightsPolicyStateDeletedEventData,
    ContainerServiceNewKubernetesVersionAvailableEventData: ContainerServiceNewKubernetesVersionAvailableEventData,
    ApiManagementUserCreatedEventData: ApiManagementUserCreatedEventData,
    ApiManagementUserUpdatedEventData: ApiManagementUserUpdatedEventData,
    ApiManagementUserDeletedEventData: ApiManagementUserDeletedEventData,
    ApiManagementSubscriptionCreatedEventData: ApiManagementSubscriptionCreatedEventData,
    ApiManagementSubscriptionUpdatedEventData: ApiManagementSubscriptionUpdatedEventData,
    ApiManagementSubscriptionDeletedEventData: ApiManagementSubscriptionDeletedEventData,
    ApiManagementProductCreatedEventData: ApiManagementProductCreatedEventData,
    ApiManagementProductUpdatedEventData: ApiManagementProductUpdatedEventData,
    ApiManagementProductDeletedEventData: ApiManagementProductDeletedEventData,
    ApiManagementApiCreatedEventData: ApiManagementApiCreatedEventData,
    ApiManagementApiUpdatedEventData: ApiManagementApiUpdatedEventData,
    ApiManagementApiDeletedEventData: ApiManagementApiDeletedEventData,
    ApiManagementApiReleaseCreatedEventData: ApiManagementApiReleaseCreatedEventData,
    ApiManagementApiReleaseUpdatedEventData: ApiManagementApiReleaseUpdatedEventData,
    ApiManagementApiReleaseDeletedEventData: ApiManagementApiReleaseDeletedEventData,
    HealthcareFhirResourceCreatedEventData: HealthcareFhirResourceCreatedEventData,
    HealthcareFhirResourceUpdatedEventData: HealthcareFhirResourceUpdatedEventData,
    HealthcareFhirResourceDeletedEventData: HealthcareFhirResourceDeletedEventData,
    IotHubDeviceCreatedEventData: IotHubDeviceCreatedEventData,
    IotHubDeviceDeletedEventData: IotHubDeviceDeletedEventData,
    IotHubDeviceConnectedEventData: IotHubDeviceConnectedEventData,
    IotHubDeviceDisconnectedEventData: IotHubDeviceDisconnectedEventData,
    IotHubDeviceTelemetryEventData: IotHubDeviceTelemetryEventData,
    ContainerRegistryImagePushedEventData: ContainerRegistryImagePushedEventData,
    ContainerRegistryImageDeletedEventData: ContainerRegistryImageDeletedEventData,
    ContainerRegistryChartPushedEventData: ContainerRegistryChartPushedEventData,
    ContainerRegistryChartDeletedEventData: ContainerRegistryChartDeletedEventData,
    MediaJobScheduledEventData: MediaJobScheduledEventData,
    MediaJobProcessingEventData: MediaJobProcessingEventData,
    MediaJobCancelingEventData: MediaJobCancelingEventData,
    MediaJobFinishedEventData: MediaJobFinishedEventData,
    MediaJobCanceledEventData: MediaJobCanceledEventData,
    MediaJobErroredEventData: MediaJobErroredEventData,
    MediaJobOutputAsset: MediaJobOutputAsset,
    MediaJobOutputCanceledEventData: MediaJobOutputCanceledEventData,
    MediaJobOutputCancelingEventData: MediaJobOutputCancelingEventData,
    MediaJobOutputErroredEventData: MediaJobOutputErroredEventData,
    MediaJobOutputFinishedEventData: MediaJobOutputFinishedEventData,
    MediaJobOutputProcessingEventData: MediaJobOutputProcessingEventData,
    MediaJobOutputScheduledEventData: MediaJobOutputScheduledEventData,
    MapsGeofenceEnteredEventData: MapsGeofenceEnteredEventData,
    MapsGeofenceExitedEventData: MapsGeofenceExitedEventData,
    MapsGeofenceResultEventData: MapsGeofenceResultEventData,
    AcsChatMessageEventBase: AcsChatMessageEventBase,
    AcsChatThreadEventBase: AcsChatThreadEventBase,
    AcsChatMessageEventInThreadBase: AcsChatMessageEventInThreadBase,
    AcsChatThreadEventInThreadBase: AcsChatThreadEventInThreadBase,
    AcsChatParticipantAddedToThreadEventData: AcsChatParticipantAddedToThreadEventData,
    AcsChatParticipantRemovedFromThreadEventData: AcsChatParticipantRemovedFromThreadEventData,
    AcsSmsDeliveryReportReceivedEventData: AcsSmsDeliveryReportReceivedEventData,
    AcsSmsReceivedEventData: AcsSmsReceivedEventData,
    AcsChatMessageReceivedEventData: AcsChatMessageReceivedEventData,
    AcsChatMessageEditedEventData: AcsChatMessageEditedEventData,
    AcsChatMessageDeletedEventData: AcsChatMessageDeletedEventData,
    AcsChatThreadCreatedWithUserEventData: AcsChatThreadCreatedWithUserEventData,
    AcsChatThreadWithUserDeletedEventData: AcsChatThreadWithUserDeletedEventData,
    AcsChatThreadPropertiesUpdatedPerUserEventData: AcsChatThreadPropertiesUpdatedPerUserEventData,
    AcsChatParticipantAddedToThreadWithUserEventData: AcsChatParticipantAddedToThreadWithUserEventData,
    AcsChatParticipantRemovedFromThreadWithUserEventData: AcsChatParticipantRemovedFromThreadWithUserEventData,
    AcsChatMessageReceivedInThreadEventData: AcsChatMessageReceivedInThreadEventData,
    AcsChatMessageEditedInThreadEventData: AcsChatMessageEditedInThreadEventData,
    AcsChatMessageDeletedInThreadEventData: AcsChatMessageDeletedInThreadEventData,
    AcsChatThreadCreatedEventData: AcsChatThreadCreatedEventData,
    AcsChatThreadDeletedEventData: AcsChatThreadDeletedEventData,
    AcsChatThreadPropertiesUpdatedEventData: AcsChatThreadPropertiesUpdatedEventData,
    discriminators: discriminators
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** @internal */
class GeneratedClientContext extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the GeneratedClientContext class.
     * @param options The parameter options
     */
    constructor(options) {
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8"
        };
        const packageDetails = `azsdk-js-eventgrid/4.9.0`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, baseUri: options.endpoint || "{topicHostname}" });
        super(optionsWithDefaults);
        // Assigning values to Constant parameters
        this.apiVersion = options.apiVersion || "2018-01-01";
    }
}

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** @internal */
class GeneratedClient extends GeneratedClientContext {
    /**
     * Initializes a new instance of the GeneratedClient class.
     * @param options The parameter options
     */
    constructor(options) {
        super(options);
    }
    /**
     * Publishes a batch of events to an Azure Event Grid topic.
     * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
     * @param events An array of events to be published to Event Grid.
     * @param options The options parameters.
     */
    publishEvents(topicHostname, events, options) {
        return this.sendOperationRequest({ topicHostname, events, options }, publishEventsOperationSpec);
    }
    /**
     * Publishes a batch of events to an Azure Event Grid topic.
     * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
     * @param events An array of events to be published to Event Grid.
     * @param options The options parameters.
     */
    publishCloudEventEvents(topicHostname, events, options) {
        return this.sendOperationRequest({ topicHostname, events, options }, publishCloudEventEventsOperationSpec);
    }
    /**
     * Publishes a batch of events to an Azure Event Grid topic.
     * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net
     * @param events An array of events to be published to Event Grid.
     * @param options The options parameters.
     */
    publishCustomEventEvents(topicHostname, events, options) {
        return this.sendOperationRequest({ topicHostname, events, options }, publishCustomEventEventsOperationSpec);
    }
}
// Operation Specifications
const serializer$1 = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const publishEventsOperationSpec = {
    path: "",
    httpMethod: "POST",
    responses: { 200: {}, default: {} },
    requestBody: events,
    queryParameters: [apiVersion],
    urlParameters: [topicHostname],
    headerParameters: [contentType],
    mediaType: "json",
    serializer: serializer$1
};
const publishCloudEventEventsOperationSpec = {
    path: "",
    httpMethod: "POST",
    responses: { 200: {}, default: {} },
    requestBody: events1,
    queryParameters: [apiVersion],
    urlParameters: [topicHostname],
    headerParameters: [contentType1, aegChannelName],
    mediaType: "json",
    serializer: serializer$1
};
const publishCustomEventEventsOperationSpec = {
    path: "",
    httpMethod: "POST",
    responses: { 200: {}, default: {} },
    requestBody: events2,
    queryParameters: [apiVersion],
    urlParameters: [topicHostname],
    headerParameters: [contentType],
    mediaType: "json",
    serializer: serializer$1
};

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const CloudEventBatchContentType = "application/cloudevents-batch+json; charset=utf-8";
const TraceParentHeaderName = "traceparent";
const TraceStateHeaderName = "tracestate";
const ContentTypeHeaderName = "Content-Type";
/**
 * The programmatic identifier of the cloudEventDistributedTracingEnricherPolicy.
 */
const cloudEventDistributedTracingEnricherPolicyName = "cloudEventDistributedTracingEnricherPolicy";
/**
 * cloudEventDistributedTracingEnricherPolicy is a policy which adds distributed tracing information
 * to a batch of cloud events. It does so by copying the `traceparent` and `tracestate` properties
 * from the HTTP request into the individual events as extension properties.
 *
 * This will only happen in the case where an event does not have a `traceparent` defined already. This
 * allows events to explicitly set a traceparent and tracestate which would be respected during "multi-hop
 * transmition".
 *
 * See https://github.com/cloudevents/spec/blob/master/extensions/distributed-tracing.md
 * for more information on distributed tracing and cloud events.
 */
function cloudEventDistributedTracingEnricherPolicy() {
    return {
        name: cloudEventDistributedTracingEnricherPolicyName,
        async sendRequest(request, next) {
            const traceparent = request.headers.get(TraceParentHeaderName);
            const tracestate = request.headers.get(TraceStateHeaderName);
            if (request.headers.get(ContentTypeHeaderName) === CloudEventBatchContentType &&
                typeof request.body === "string" &&
                traceparent) {
                // per the cloud event batched content type we know the body is an array encoded in JSON.
                const parsedBody = JSON.parse(request.body);
                for (const item of parsedBody) {
                    // When using the distributed tracing extension, the "traceparent" is a required property
                    // and "tracestate" is optional. This means if an item already has a "traceparent" property
                    // we should not stomp over it. Well formed events will not have a "tracestate" without
                    // also having a "traceparent" so there's no need to guard against that case.
                    if (typeof item !== "object" || item.traceparent) {
                        continue;
                    }
                    item.traceparent = traceparent;
                    if (tracestate) {
                        item.tracestate = tracestate;
                    }
                }
                request.body = JSON.stringify(parsedBody);
            }
            return next(request);
        },
    };
}

// Copyright (c) Microsoft Corporation.
/**
 * Creates a span using the global tracer.
 * @internal
 */
const createSpan = coreTracing.createSpanFunction({
    packagePrefix: "Azure.Data.EventGrid",
    namespace: "Microsoft.Messaging.EventGrid",
});

// Copyright (c) Microsoft Corporation.
/**
 * Client class for publishing events to the Event Grid Service.
 */
class EventGridPublisherClient {
    /**
     * Creates an instance of EventGridPublisherClient which sends events using the Event Grid Schema.
     *
     * Example usage:
     * ```ts
     * import { EventGridPublisherClient, AzureKeyCredential } from "@azure/eventgrid";
     *
     * const client = new EventGridPublisherClient(
     *    "<service endpoint>",
     *    "EventGrid",
     *    new AzureKeyCredential("<api key>")
     * );
     * ```
     *
     * @param endpointUrl - The URL to the Event Grid endpoint, e.g. https://eg-topic.westus2-1.eventgrid.azure.net/api/events.
     * @param inputSchema - The schema that the Event Grid endpoint is configured to accept. One of "EventGrid", "CloudEvent", or "Custom".
     * @param credential - Used to authenticate requests to the service.
     * @param options - Used to configure the Event Grid Client.
     */
    constructor(endpointUrl, inputSchema, credential, options = {}) {
        this.endpointUrl = endpointUrl;
        this.inputSchema = inputSchema;
        this.client = new GeneratedClient(options);
        const authPolicy = coreAuth.isTokenCredential(credential)
            ? coreRestPipeline.bearerTokenAuthenticationPolicy({ credential, scopes: DEFAULT_EVENTGRID_SCOPE })
            : eventGridCredentialPolicy(credential);
        this.client.pipeline.addPolicy(authPolicy);
        this.client.pipeline.addPolicy(cloudEventDistributedTracingEnricherPolicy(), {
            afterPolicies: [coreRestPipeline.tracingPolicyName],
        });
        this.apiVersion = this.client.apiVersion;
    }
    /**
     * Sends events to a topic.
     *
     * @param events - The events to send. The events should be in the schema used when constructing the client.
     * @param options - Options to control the underlying operation.
     */
    async send(events, options) {
        const { span, updatedOptions } = createSpan("EventGridPublisherClient-send", options || {});
        try {
            switch (this.inputSchema) {
                case "EventGrid": {
                    return await this.client.publishEvents(this.endpointUrl, events.map(convertEventGridEventToModelType), updatedOptions);
                }
                case "CloudEvent": {
                    return await this.client.publishCloudEventEvents(this.endpointUrl, events.map(convertCloudEventToModelType), updatedOptions);
                }
                case "Custom": {
                    return await this.client.publishCustomEventEvents(this.endpointUrl, events, updatedOptions);
                }
                default: {
                    throw new Error(`Unknown input schema type '${this.inputSchema}'`);
                }
            }
        }
        catch (e) {
            span.setStatus({ code: coreTracing.SpanStatusCode.ERROR, message: e.message });
            throw e;
        }
        finally {
            span.end();
        }
    }
}
/**
 * @internal
 */
function convertEventGridEventToModelType(event) {
    var _a, _b;
    return {
        eventType: event.eventType,
        eventTime: (_a = event.eventTime) !== null && _a !== void 0 ? _a : new Date(),
        id: (_b = event.id) !== null && _b !== void 0 ? _b : uuid.v4(),
        subject: event.subject,
        topic: event.topic,
        data: event.data,
        dataVersion: event.dataVersion,
    };
}
/**
 * @internal
 */
function convertCloudEventToModelType(event) {
    var _a, _b, _c, _d;
    if (event.extensionAttributes) {
        for (const propName in event.extensionAttributes) {
            // Per the cloud events spec: "CloudEvents attribute names MUST consist of lower-case letters ('a' to 'z') or digits ('0' to '9') from the ASCII character set"
            // they also can not match an existing defined property name.
            if (!/^[a-z0-9]*$/.test(propName) ||
                cloudEventReservedPropertyNames.indexOf(propName) !== -1) {
                throw new Error(`invalid extension attribute name: ${propName}`);
            }
        }
    }
    const converted = Object.assign({ specversion: "1.0", type: event.type, source: event.source, id: (_a = event.id) !== null && _a !== void 0 ? _a : uuid.v4(), time: (_b = event.time) !== null && _b !== void 0 ? _b : new Date(), subject: event.subject, dataschema: event.dataschema }, ((_c = event.extensionAttributes) !== null && _c !== void 0 ? _c : []));
    if (event.data instanceof Uint8Array) {
        if (!event.datacontenttype) {
            throw new Error("a data content type must be provided when sending an event with binary data");
        }
        converted.datacontenttype = event.datacontenttype;
        converted.dataBase64 = event.data;
    }
    else {
        converted.datacontenttype = (_d = event.datacontenttype) !== null && _d !== void 0 ? _d : "application/json";
        converted.data = event.data;
    }
    return converted;
}

// Copyright (c) Microsoft Corporation.
/**
 * @internal
 */
async function sha256Hmac(secret, stringToSign) {
    const decodedSecret = Buffer.from(secret, "base64");
    return crypto.createHmac("sha256", decodedSecret).update(stringToSign).digest("base64");
}

// Copyright (c) Microsoft Corporation.
/**
 * Generate a shared access signature, which allows a client to send events to an Event Grid Topic or Domain for a limited period of time. This
 * function may only be called when the EventGridPublisherClient was constructed with a KeyCredential instance.
 *
 * @param endpointUrl - The endpoint for the topic or domain you wish to generate a shared access signature for.
 * @param credential - The credential to use when generating the shared access signatrue.
 * @param expiresOn - The time at which the shared access signature is no longer valid.
 * @param options - Options to control how the signature is generated.
 */
async function generateSharedAccessSignature(endpointUrl, credential, expiresOnUtc, options) {
    const expiresOnString = dateToServiceTimeString(expiresOnUtc);
    const unsignedSas = `r=${encodeURIComponent(`${endpointUrl}?apiVersion=${(options === null || options === void 0 ? void 0 : options.apiVersion) || DEFAULT_API_VERSION}`)}&e=${encodeURIComponent(expiresOnString)}`;
    return sha256Hmac(credential.key, unsignedSas).then((digest) => `${unsignedSas}&s=${encodeURIComponent(digest)}`);
}

// Copyright (c) Microsoft Corporation.
const serializer = coreClient.createSerializer();
/**
 * EventGridDeserializer is used to aid in processing events delivered by EventGrid. It can deserialize a JSON encoded payload
 * of either a single event or batch of events as well as be used to convert the result of `JSON.parse` into an
 * `EventGridEvent` or `CloudEvent` like object.
 *
 * Unlike normal JSON deseralization, EventGridDeserializer does some additional conversions:
 *
 * - The consumer parses the event time property into a `Date` object, for ease of use.
 * - When deserializing an event in the CloudEvent schema, if the event contains binary data, it is base64 decoded
 *   and returned as an instance of the `Uint8Array` type.
 */
class EventGridDeserializer {
    async deserializeEventGridEvents(encodedEvents) {
        const decodedArray = parseAndWrap(encodedEvents);
        const events = [];
        for (const o of decodedArray) {
            validateEventGridEvent(o);
            const deserialized = serializer.deserialize(EventGridEvent, o, "");
            events.push(deserialized);
        }
        return events;
    }
    async deserializeCloudEvents(encodedEvents) {
        const decodedArray = parseAndWrap(encodedEvents);
        const events = [];
        for (const o of decodedArray) {
            validateCloudEventEvent(o);
            // Check that the required fields are present and of the correct type and the optional fields are missing
            // or of the correct type.
            const deserialized = serializer.deserialize(CloudEvent, o, "");
            const modelEvent = {
                specversion: deserialized.specversion,
                id: deserialized.id,
                source: deserialized.source,
                type: deserialized.type,
            };
            if (deserialized.datacontenttype !== undefined) {
                modelEvent.datacontenttype = deserialized.datacontenttype;
            }
            if (deserialized.dataschema !== undefined) {
                modelEvent.dataschema = deserialized.dataschema;
            }
            if (deserialized.subject !== undefined) {
                modelEvent.subject = deserialized.subject;
            }
            if (deserialized.time !== undefined) {
                modelEvent.time = deserialized.time;
            }
            if (deserialized.data !== undefined) {
                modelEvent.data = deserialized.data;
            }
            // If the data the event represents binary, it is encoded as base64 text in a different property on the event and we need to transform it.
            if (deserialized.dataBase64 !== undefined) {
                if (deserialized.data !== undefined) {
                    throw new TypeError("event contains both a data and data_base64 field");
                }
                if (!(deserialized.dataBase64 instanceof Uint8Array)) {
                    throw new TypeError("event data_base64 property is not an instance of Uint8Array");
                }
                modelEvent.data = deserialized.dataBase64;
            }
            // Build the "extensionsAttributes" property bag by removing all known top level properties.
            const extensionAttributes = Object.assign({}, deserialized);
            for (const propName of cloudEventReservedPropertyNames) {
                delete extensionAttributes[propName];
            }
            delete extensionAttributes.dataBase64;
            // If any properties remain, copy them to the model.
            if (Object.keys(extensionAttributes).length > 0) {
                modelEvent.extensionAttributes = extensionAttributes;
            }
            events.push(modelEvent);
        }
        return events;
    }
}

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * isCloudEventLike returns "true" when the event is a CloudEvent
 *
 * @param o - Either an EventGrid our CloudEvent event.
 */
function isCloudEventLike(o) {
    return o.source !== undefined;
}
function isSystemEvent(eventType, event) {
    if (isCloudEventLike(event)) {
        return event.type === eventType;
    }
    else {
        return event.eventType === eventType;
    }
}

Object.defineProperty(exports, 'AzureKeyCredential', {
    enumerable: true,
    get: function () { return coreAuth.AzureKeyCredential; }
});
Object.defineProperty(exports, 'AzureSASCredential', {
    enumerable: true,
    get: function () { return coreAuth.AzureSASCredential; }
});
exports.EventGridDeserializer = EventGridDeserializer;
exports.EventGridPublisherClient = EventGridPublisherClient;
exports.generateSharedAccessSignature = generateSharedAccessSignature;
exports.isSystemEvent = isSystemEvent;
//# sourceMappingURL=index.js.map
