{"version":3,"file":"generateSharedAccessSignature.js","sourceRoot":"","sources":["../../src/generateSharedAccessSignature.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,mBAAmB,EAAE,MAAM,aAAa,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,uBAAuB,EAAE,MAAM,QAAQ,CAAC;AAUjD;;;;;;;;GAQG;AACH,MAAM,CAAC,KAAK,UAAU,6BAA6B,CACjD,WAAmB,EACnB,UAAyB,EACzB,YAAkB,EAClB,OAA8C;IAE9C,MAAM,eAAe,GAAG,uBAAuB,CAAC,YAAY,CAAC,CAAC;IAC9D,MAAM,WAAW,GAAG,KAAK,kBAAkB,CACzC,GAAG,WAAW,eAAe,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,KAAI,mBAAmB,EAAE,CAC1E,MAAM,kBAAkB,CAAC,eAAe,CAAC,EAAE,CAAC;IAC7C,OAAO,UAAU,CAAC,UAAU,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC,IAAI,CACjD,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,WAAW,MAAM,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAC7D,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport { DEFAULT_API_VERSION } from \"./constants\";\nimport { sha256Hmac } from \"./cryptoHelpers\";\nimport { dateToServiceTimeString } from \"./util\";\n\nexport interface GenerateSharedAccessSignatureOptions {\n  /**\n   * The API Version to include in the signature. If not provided, the default\n   * API version will be used.\n   */\n  apiVersion?: string;\n}\n\n/**\n * Generate a shared access signature, which allows a client to send events to an Event Grid Topic or Domain for a limited period of time. This\n * function may only be called when the EventGridPublisherClient was constructed with a KeyCredential instance.\n *\n * @param endpointUrl - The endpoint for the topic or domain you wish to generate a shared access signature for.\n * @param credential - The credential to use when generating the shared access signatrue.\n * @param expiresOn - The time at which the shared access signature is no longer valid.\n * @param options - Options to control how the signature is generated.\n */\nexport async function generateSharedAccessSignature(\n  endpointUrl: string,\n  credential: KeyCredential,\n  expiresOnUtc: Date,\n  options?: GenerateSharedAccessSignatureOptions\n): Promise<string> {\n  const expiresOnString = dateToServiceTimeString(expiresOnUtc);\n  const unsignedSas = `r=${encodeURIComponent(\n    `${endpointUrl}?apiVersion=${options?.apiVersion || DEFAULT_API_VERSION}`\n  )}&e=${encodeURIComponent(expiresOnString)}`;\n  return sha256Hmac(credential.key, unsignedSas).then(\n    (digest) => `${unsignedSas}&s=${encodeURIComponent(digest)}`\n  );\n}\n"]}