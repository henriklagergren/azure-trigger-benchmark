{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\n\n/**\n * Stringifies a Date object in the format expected by the Event Grid service, for use in a Shared Access Signiture.\n *\n * The service expects this time string to be in the same format as what is returned by the .NET DateTime.ToString\n * method, using the \"en-US\" culture.\n *\n * This corresponds to the .NET format string: \"M/d/yyyy h:mm:ss tt\".  For example, the date \"June 5th, 2020, 12:09:03 PM\"\n * is represented as the string \"6/5/2020 12:09:03 PM\"\n *\n * The service expects a UTC time, so this method returns a string based on the UTC time of the provided Date.\n *\n * @param d - The Date object to convert to a string.\n */\nexport function dateToServiceTimeString(d: Date): string {\n  const month = d.getUTCMonth() + 1; // getUTCMonth returns 0-11 not 1-12.\n  const day = d.getUTCDate();\n  const year = d.getUTCFullYear();\n\n  const hour = d.getUTCHours() === 0 ? 12 : d.getUTCHours() % 12; // getUTCHours returns 0-23, and we want this in 12 hour format.\n  const minute = d.getUTCMinutes().toString().padStart(2, \"0\");\n  const second = d.getUTCSeconds().toString().padStart(2, \"0\");\n  const am = d.getUTCHours() >= 13 ? \"PM\" : \"AM\";\n\n  return `${month}/${day}/${year} ${hour}:${minute}:${second} ${am}`;\n}\n\n/**\n * Returns `true` if the credential object is like the KeyCredential interface (i.e. it has a\n * key property).\n *\n * @param credential - The object to test\n */\nexport function isKeyCredentialLike(o: unknown): o is KeyCredential {\n  const castO = o as {\n    key: unknown;\n  };\n  return castO.key !== undefined;\n}\n\nexport function parseAndWrap(jsonStringOrObject: string | Record<string, unknown>): any[] {\n  if (typeof jsonStringOrObject === \"string\") {\n    const o = JSON.parse(jsonStringOrObject);\n    if (Array.isArray(o)) {\n      return o;\n    } else {\n      return [o];\n    }\n  }\n\n  if (Array.isArray(jsonStringOrObject)) {\n    return jsonStringOrObject;\n  } else {\n    return [jsonStringOrObject];\n  }\n}\n\nconst EVENT_GRID_SCHEMA_METADATA_VERSION = \"1\";\n\nexport function validateEventGridEvent(o: unknown): void {\n  if (typeof o !== \"object\") {\n    throw new TypeError(\"event is not an object\");\n  }\n\n  const castO = o as {\n    metadataVersion: unknown;\n  };\n  validateRequiredStringProperties(o, [\n    \"eventType\",\n    \"eventTime\",\n    \"id\",\n    \"subject\",\n    \"topic\",\n    \"dataVersion\",\n    \"metadataVersion\",\n  ]);\n\n  validateRequiredAnyProperties(o, [\"data\"]);\n\n  if (castO.metadataVersion !== EVENT_GRID_SCHEMA_METADATA_VERSION) {\n    throw new TypeError(\"event is not in the Event Grid schema\");\n  }\n}\n\nconst CLOUD_EVENT_1_0_SPEC_VERSION = \"1.0\";\n\nexport function validateCloudEventEvent(o: unknown): void {\n  validateRequiredStringProperties(o, [\"type\", \"source\", \"id\", \"specversion\"]);\n  validateOptionalStringProperties(o, [\"time\", \"dataschema\", \"datacontenttype\", \"subject\"]);\n\n  if (typeof o !== \"object\") {\n    throw new TypeError(\"event is not an object\");\n  }\n\n  const castO = o as {\n    specversion: unknown;\n  };\n\n  if (castO.specversion !== CLOUD_EVENT_1_0_SPEC_VERSION) {\n    throw new Error(\"event is not in the Cloud Event 1.0 schema\");\n  }\n}\n\nfunction validateRequiredStringProperties(o: any, propertyNames: string[]): void {\n  for (const propertyName of propertyNames) {\n    if (typeof o[propertyName] === \"undefined\") {\n      throw new Error(`event is missing required property '${propertyName}'`);\n    }\n\n    if (typeof o[propertyName] !== \"string\") {\n      throw new TypeError(\n        `event property '${propertyName} should be a 'string', but is '${typeof o[propertyName]}'`\n      );\n    }\n  }\n}\n\nfunction validateRequiredAnyProperties(o: any, propertyNames: string[]): void {\n  for (const propertyName of propertyNames) {\n    if (typeof o[propertyName] === \"undefined\") {\n      throw new Error(`event is missing required property '${propertyName}'`);\n    }\n  }\n}\n\nfunction validateOptionalStringProperties(o: any, propertyNames: string[]): void {\n  for (const propertyName of propertyNames) {\n    if (typeof o[propertyName] !== \"undefined\" && typeof o[propertyName] !== \"string\") {\n      throw new TypeError(\n        `event property '${propertyName}' should be a 'string' but it is a '${typeof o[\n          propertyName\n        ]}'`\n      );\n    }\n  }\n}\n"]}