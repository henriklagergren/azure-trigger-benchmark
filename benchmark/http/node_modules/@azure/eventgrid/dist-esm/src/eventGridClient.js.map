{"version":3,"file":"eventGridClient.js","sourceRoot":"","sources":["../../src/eventGridClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isTokenCredential, KeyCredential, SASCredential } from \"@azure/core-auth\";\nimport { OperationOptions, CommonClientOptions } from \"@azure/core-client\";\n\nimport { eventGridCredentialPolicy } from \"./eventGridAuthenticationPolicy\";\nimport { DEFAULT_EVENTGRID_SCOPE } from \"./constants\";\nimport {\n  SendCloudEventInput,\n  SendEventGridEventInput,\n  cloudEventReservedPropertyNames,\n} from \"./models\";\nimport { GeneratedClient } from \"./generated/generatedClient\";\nimport {\n  CloudEvent as CloudEventWireModel,\n  EventGridEvent as EventGridEventWireModel,\n} from \"./generated/models\";\nimport { cloudEventDistributedTracingEnricherPolicy } from \"./cloudEventDistrubtedTracingEnricherPolicy\";\nimport { createSpan } from \"./tracing\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { TokenCredential } from \"@azure/core-auth\";\nimport { bearerTokenAuthenticationPolicy, tracingPolicyName } from \"@azure/core-rest-pipeline\";\n\n/**\n * Options for the Event Grid Client.\n */\nexport type EventGridPublisherClientOptions = CommonClientOptions;\n\n/**\n * Options for the send events operation.\n */\nexport type SendOptions = OperationOptions;\n\n/**\n * A map of input schema names to shapes of the input for the send method on EventGridPublisherClient.\n */\nexport interface InputSchemaToInputTypeMap {\n  /**\n   * The shape of the input to `send` when the client is configured to send events using the Event Grid schema.\n   */\n  EventGrid: SendEventGridEventInput<unknown>;\n  /**\n   * The shape of the input to `send` when the client is configured to send events using the Cloud Event schema.\n   */\n  CloudEvent: SendCloudEventInput<unknown>;\n  /**\n   * The shape of the input to `send` when the client is configured to send events using a custom schema.\n   */\n\n  Custom: Record<string, unknown>;\n}\n\n/**\n * Allowed schema types, to be used when constructing the EventGridPublisherClient.\n */\nexport type InputSchema = keyof InputSchemaToInputTypeMap;\n\n/**\n * Client class for publishing events to the Event Grid Service.\n */\nexport class EventGridPublisherClient<T extends InputSchema> {\n  /**\n   * The URL to the Event Grid endpoint.\n   */\n  public readonly endpointUrl: string;\n\n  /**\n   * The version of the Even Grid service.\n   */\n  public readonly apiVersion: string;\n\n  /**\n   * The AutoRest generated client for the EventGrid dataplane.\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * The schema that will be used when sending events.\n   */\n  private readonly inputSchema: InputSchema;\n\n  /**\n   * Creates an instance of EventGridPublisherClient which sends events using the Event Grid Schema.\n   *\n   * Example usage:\n   * ```ts\n   * import { EventGridPublisherClient, AzureKeyCredential } from \"@azure/eventgrid\";\n   *\n   * const client = new EventGridPublisherClient(\n   *    \"<service endpoint>\",\n   *    \"EventGrid\",\n   *    new AzureKeyCredential(\"<api key>\")\n   * );\n   * ```\n   *\n   * @param endpointUrl - The URL to the Event Grid endpoint, e.g. https://eg-topic.westus2-1.eventgrid.azure.net/api/events.\n   * @param inputSchema - The schema that the Event Grid endpoint is configured to accept. One of \"EventGrid\", \"CloudEvent\", or \"Custom\".\n   * @param credential - Used to authenticate requests to the service.\n   * @param options - Used to configure the Event Grid Client.\n   */\n  constructor(\n    endpointUrl: string,\n    inputSchema: T,\n    credential: KeyCredential | SASCredential | TokenCredential,\n    options: EventGridPublisherClientOptions = {}\n  ) {\n    this.endpointUrl = endpointUrl;\n    this.inputSchema = inputSchema;\n\n    this.client = new GeneratedClient(options);\n\n    const authPolicy = isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy({ credential, scopes: DEFAULT_EVENTGRID_SCOPE })\n      : eventGridCredentialPolicy(credential);\n\n    this.client.pipeline.addPolicy(authPolicy);\n    this.client.pipeline.addPolicy(cloudEventDistributedTracingEnricherPolicy(), {\n      afterPolicies: [tracingPolicyName],\n    });\n    this.apiVersion = this.client.apiVersion;\n  }\n\n  /**\n   * Sends events to a topic.\n   *\n   * @param events - The events to send. The events should be in the schema used when constructing the client.\n   * @param options - Options to control the underlying operation.\n   */\n  async send(events: InputSchemaToInputTypeMap[T][], options?: SendOptions): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"EventGridPublisherClient-send\", options || {});\n\n    try {\n      switch (this.inputSchema) {\n        case \"EventGrid\": {\n          return await this.client.publishEvents(\n            this.endpointUrl,\n            (events as InputSchemaToInputTypeMap[\"EventGrid\"][]).map(\n              convertEventGridEventToModelType\n            ),\n            updatedOptions\n          );\n        }\n        case \"CloudEvent\": {\n          return await this.client.publishCloudEventEvents(\n            this.endpointUrl,\n            (events as InputSchemaToInputTypeMap[\"CloudEvent\"][]).map(convertCloudEventToModelType),\n            updatedOptions\n          );\n        }\n        case \"Custom\": {\n          return await this.client.publishCustomEventEvents(\n            this.endpointUrl,\n            events as InputSchemaToInputTypeMap[\"Custom\"][],\n            updatedOptions\n          );\n        }\n        default: {\n          throw new Error(`Unknown input schema type '${this.inputSchema}'`);\n        }\n      }\n    } catch (e) {\n      span.setStatus({ code: SpanStatusCode.ERROR, message: e.message });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport function convertEventGridEventToModelType(\n  event: SendEventGridEventInput<any>\n): EventGridEventWireModel {\n  return {\n    eventType: event.eventType,\n    eventTime: event.eventTime ?? new Date(),\n    id: event.id ?? uuidv4(),\n    subject: event.subject,\n    topic: event.topic,\n    data: event.data,\n    dataVersion: event.dataVersion,\n  };\n}\n\n/**\n * @internal\n */\nexport function convertCloudEventToModelType(event: SendCloudEventInput<any>): CloudEventWireModel {\n  if (event.extensionAttributes) {\n    for (const propName in event.extensionAttributes) {\n      // Per the cloud events spec: \"CloudEvents attribute names MUST consist of lower-case letters ('a' to 'z') or digits ('0' to '9') from the ASCII character set\"\n      // they also can not match an existing defined property name.\n\n      if (\n        !/^[a-z0-9]*$/.test(propName) ||\n        cloudEventReservedPropertyNames.indexOf(propName) !== -1\n      ) {\n        throw new Error(`invalid extension attribute name: ${propName}`);\n      }\n    }\n  }\n\n  const converted: CloudEventWireModel = {\n    specversion: \"1.0\",\n    type: event.type,\n    source: event.source,\n    id: event.id ?? uuidv4(),\n    time: event.time ?? new Date(),\n    subject: event.subject,\n    dataschema: event.dataschema,\n    ...(event.extensionAttributes ?? []),\n  };\n\n  if (event.data instanceof Uint8Array) {\n    if (!event.datacontenttype) {\n      throw new Error(\n        \"a data content type must be provided when sending an event with binary data\"\n      );\n    }\n\n    converted.datacontenttype = event.datacontenttype;\n    converted.dataBase64 = event.data;\n  } else {\n    converted.datacontenttype = event.datacontenttype ?? \"application/json\";\n    converted.data = event.data;\n  }\n\n  return converted;\n}\n"]}