import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
export declare class TriggerTumblingWindow extends pulumi.CustomResource {
    /**
     * Get an existing TriggerTumblingWindow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TriggerTumblingWindowState, opts?: pulumi.CustomResourceOptions): TriggerTumblingWindow;
    /**
     * Returns true if the given object is an instance of TriggerTumblingWindow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is TriggerTumblingWindow;
    readonly activated: pulumi.Output<boolean | undefined>;
    readonly additionalProperties: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    readonly annotations: pulumi.Output<string[] | undefined>;
    readonly dataFactoryId: pulumi.Output<string>;
    readonly delay: pulumi.Output<string | undefined>;
    readonly description: pulumi.Output<string | undefined>;
    readonly endTime: pulumi.Output<string | undefined>;
    readonly frequency: pulumi.Output<string>;
    readonly interval: pulumi.Output<number>;
    readonly maxConcurrency: pulumi.Output<number | undefined>;
    readonly name: pulumi.Output<string>;
    readonly pipeline: pulumi.Output<outputs.datafactory.TriggerTumblingWindowPipeline>;
    readonly retry: pulumi.Output<outputs.datafactory.TriggerTumblingWindowRetry | undefined>;
    readonly startTime: pulumi.Output<string>;
    readonly triggerDependencies: pulumi.Output<outputs.datafactory.TriggerTumblingWindowTriggerDependency[] | undefined>;
    /**
     * Create a TriggerTumblingWindow resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TriggerTumblingWindowArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering TriggerTumblingWindow resources.
 */
export interface TriggerTumblingWindowState {
    activated?: pulumi.Input<boolean>;
    additionalProperties?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    dataFactoryId?: pulumi.Input<string>;
    delay?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    frequency?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    maxConcurrency?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    pipeline?: pulumi.Input<inputs.datafactory.TriggerTumblingWindowPipeline>;
    retry?: pulumi.Input<inputs.datafactory.TriggerTumblingWindowRetry>;
    startTime?: pulumi.Input<string>;
    triggerDependencies?: pulumi.Input<pulumi.Input<inputs.datafactory.TriggerTumblingWindowTriggerDependency>[]>;
}
/**
 * The set of arguments for constructing a TriggerTumblingWindow resource.
 */
export interface TriggerTumblingWindowArgs {
    activated?: pulumi.Input<boolean>;
    additionalProperties?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    annotations?: pulumi.Input<pulumi.Input<string>[]>;
    dataFactoryId: pulumi.Input<string>;
    delay?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    endTime?: pulumi.Input<string>;
    frequency: pulumi.Input<string>;
    interval: pulumi.Input<number>;
    maxConcurrency?: pulumi.Input<number>;
    name?: pulumi.Input<string>;
    pipeline: pulumi.Input<inputs.datafactory.TriggerTumblingWindowPipeline>;
    retry?: pulumi.Input<inputs.datafactory.TriggerTumblingWindowRetry>;
    startTime: pulumi.Input<string>;
    triggerDependencies?: pulumi.Input<pulumi.Input<inputs.datafactory.TriggerTumblingWindowTriggerDependency>[]>;
}
