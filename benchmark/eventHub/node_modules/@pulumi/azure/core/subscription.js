"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscription = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Alias for a Subscription - which adds an Alias to an existing Subscription, allowing it to be managed in the provider - or create a new Subscription with a new Alias.
 *
 * > **NOTE:** Destroying a Subscription controlled by this resource will place the Subscription into a cancelled state. It is possible to re-activate a subscription within 90-days of cancellation, after which time the Subscription is irrevocably deleted, and the Subscription ID cannot be re-used. For further information see [here](https://docs.microsoft.com/en-us/azure/cost-management-billing/manage/cancel-azure-subscription#what-happens-after-subscription-cancellation). Users can optionally delete a Subscription once 72 hours have passed, however, this functionality is not suitable for this provider. A `Deleted` subscription cannot be reactivated.
 *
 * > **NOTE:** It is not possible to destroy (cancel) a subscription if it contains resources. If resources are present that are not managed by the provider then these will need to be removed before the Subscription can be destroyed.
 *
 * > **NOTE:** Azure supports Multiple Aliases per Subscription, however, to reliably manage this resource in this provider only a single Alias is supported.
 *
 * ## Example Usage
 * ### Creating A New Alias And Subscription For An Enrollment Account
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleEnrollmentAccountScope = azure.billing.getEnrollmentAccountScope({
 *     billingAccountName: "1234567890",
 *     enrollmentAccountName: "0123456",
 * });
 * const exampleSubscription = new azure.core.Subscription("exampleSubscription", {
 *     subscriptionName: "My Example EA Subscription",
 *     billingScopeId: exampleEnrollmentAccountScope.then(exampleEnrollmentAccountScope => exampleEnrollmentAccountScope.id),
 * });
 * ```
 * ### Creating A New Alias And Subscription For A Microsoft Customer Account
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleMcaAccountScope = azure.billing.getMcaAccountScope({
 *     billingAccountName: "e879cf0f-2b4d-5431-109a-f72fc9868693:024cabf4-7321-4cf9-be59-df0c77ca51de_2019-05-31",
 *     billingProfileName: "PE2Q-NOIT-BG7-TGB",
 *     invoiceSectionName: "MTT4-OBS7-PJA-TGB",
 * });
 * const exampleSubscription = new azure.core.Subscription("exampleSubscription", {
 *     subscriptionName: "My Example MCA Subscription",
 *     billingScopeId: exampleMcaAccountScope.then(exampleMcaAccountScope => exampleMcaAccountScope.id),
 * });
 * ```
 * ### Creating A New Alias And Subscription For A Microsoft Partner Account
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleMpaAccountScope = azure.billing.getMpaAccountScope({
 *     billingAccountName: "e879cf0f-2b4d-5431-109a-f72fc9868693:024cabf4-7321-4cf9-be59-df0c77ca51de_2019-05-31",
 *     customerName: "2281f543-7321-4cf9-1e23-edb4Oc31a31c",
 * });
 * const exampleSubscription = new azure.core.Subscription("exampleSubscription", {
 *     subscriptionName: "My Example MPA Subscription",
 *     billingScopeId: exampleMpaAccountScope.then(exampleMpaAccountScope => exampleMpaAccountScope.id),
 * });
 * ```
 * ### Adding An Alias To An Existing Subscription
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.Subscription("example", {
 *     alias: "examplesub",
 *     subscriptionId: "12345678-12234-5678-9012-123456789012",
 *     subscriptionName: "My Example Subscription",
 * });
 * ```
 *
 * ## Import
 *
 * Subscriptions can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:core/subscription:Subscription example "/providers/Microsoft.Subscription/aliases/subscription1"
 * ```
 *
 *  In this scenario, the `subscription_id` property can be completed and the provider will assume control of the existing subscription by creating an Alias. See the `adding an Alias to an existing Subscription` above. This provider requires an alias to correctly manage Subscription resources due to Azure Subscription API design.
 */
class Subscription extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["alias"] = state ? state.alias : undefined;
            inputs["billingScopeId"] = state ? state.billingScopeId : undefined;
            inputs["subscriptionId"] = state ? state.subscriptionId : undefined;
            inputs["subscriptionName"] = state ? state.subscriptionName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tenantId"] = state ? state.tenantId : undefined;
            inputs["workload"] = state ? state.workload : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.subscriptionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionName'");
            }
            inputs["alias"] = args ? args.alias : undefined;
            inputs["billingScopeId"] = args ? args.billingScopeId : undefined;
            inputs["subscriptionId"] = args ? args.subscriptionId : undefined;
            inputs["subscriptionName"] = args ? args.subscriptionName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["workload"] = args ? args.workload : undefined;
            inputs["tenantId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Subscription.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Subscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Subscription(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Subscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subscription.__pulumiType;
    }
}
exports.Subscription = Subscription;
/** @internal */
Subscription.__pulumiType = 'azure:core/subscription:Subscription';
//# sourceMappingURL=subscription.js.map