"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Assignment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Blueprint Assignment resource
 *
 * > **NOTE:** Azure Blueprints are in Preview and potentially subject to breaking change without notice.
 *
 * > **NOTE:** Azure Blueprint Assignments can only be applied to Subscriptions.  Assignments to Management Groups is not currently supported by the service or by this provider.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const exampleSubscription = azure.core.getSubscription({});
 * const exampleDefinition = exampleSubscription.then(exampleSubscription => azure.blueprint.getDefinition({
 *     name: "exampleBlueprint",
 *     scopeId: exampleSubscription.id,
 * }));
 * const examplePublishedVersion = Promise.all([exampleDefinition, exampleDefinition]).then(([exampleDefinition, exampleDefinition1]) => azure.blueprint.getPublishedVersion({
 *     scopeId: exampleDefinition.scopeId,
 *     blueprintName: exampleDefinition1.name,
 *     version: "v1.0.0",
 * }));
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {
 *     location: "West Europe",
 *     tags: {
 *         Environment: "example",
 *     },
 * });
 * const exampleUserAssignedIdentity = new azure.authorization.UserAssignedIdentity("exampleUserAssignedIdentity", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 * });
 * const operator = new azure.authorization.Assignment("operator", {
 *     scope: exampleSubscription.then(exampleSubscription => exampleSubscription.id),
 *     roleDefinitionName: "Blueprint Operator",
 *     principalId: exampleUserAssignedIdentity.principalId,
 * });
 * const owner = new azure.authorization.Assignment("owner", {
 *     scope: exampleSubscription.then(exampleSubscription => exampleSubscription.id),
 *     roleDefinitionName: "Owner",
 *     principalId: exampleUserAssignedIdentity.principalId,
 * });
 * const exampleAssignment = new azure.blueprint.Assignment("exampleAssignment", {
 *     targetSubscriptionId: exampleSubscription.then(exampleSubscription => exampleSubscription.id),
 *     versionId: examplePublishedVersion.then(examplePublishedVersion => examplePublishedVersion.id),
 *     location: exampleResourceGroup.location,
 *     lockMode: "AllResourcesDoNotDelete",
 *     lockExcludePrincipals: [current.then(current => current.objectId)],
 *     identity: {
 *         type: "UserAssigned",
 *         identityIds: [exampleUserAssignedIdentity.id],
 *     },
 *     resourceGroups: `    {
 *       "ResourceGroup": {
 *         "name": "exampleRG-bp"
 *       }
 *     }
 * `,
 *     parameterValues: `    {
 *       "allowedlocationsforresourcegroups_listOfAllowedLocations": {
 *         "value": ["westus", "westus2", "eastus", "centralus", "centraluseuap", "southcentralus", "northcentralus", "westcentralus", "eastus2", "eastus2euap", "brazilsouth", "brazilus", "northeurope", "westeurope", "eastasia", "southeastasia", "japanwest", "japaneast", "koreacentral", "koreasouth", "indiasouth", "indiawest", "indiacentral", "australiaeast", "australiasoutheast", "canadacentral", "canadaeast", "uknorth", "uksouth2", "uksouth", "ukwest", "francecentral", "francesouth", "australiacentral", "australiacentral2", "uaecentral", "uaenorth", "southafricanorth", "southafricawest", "switzerlandnorth", "switzerlandwest", "germanynorth", "germanywestcentral", "norwayeast", "norwaywest"]
 *       }
 *     }
 * `,
 * }, {
 *     dependsOn: [
 *         operator,
 *         owner,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Azure Blueprint Assignments can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:blueprint/assignment:Assignment example "/subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Blueprint/blueprintAssignments/assignSimpleBlueprint"
 * ```
 */
class Assignment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["blueprintName"] = state ? state.blueprintName : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["identity"] = state ? state.identity : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["lockExcludeActions"] = state ? state.lockExcludeActions : undefined;
            inputs["lockExcludePrincipals"] = state ? state.lockExcludePrincipals : undefined;
            inputs["lockMode"] = state ? state.lockMode : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["parameterValues"] = state ? state.parameterValues : undefined;
            inputs["resourceGroups"] = state ? state.resourceGroups : undefined;
            inputs["targetSubscriptionId"] = state ? state.targetSubscriptionId : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["versionId"] = state ? state.versionId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.targetSubscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetSubscriptionId'");
            }
            if ((!args || args.versionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'versionId'");
            }
            inputs["identity"] = args ? args.identity : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["lockExcludeActions"] = args ? args.lockExcludeActions : undefined;
            inputs["lockExcludePrincipals"] = args ? args.lockExcludePrincipals : undefined;
            inputs["lockMode"] = args ? args.lockMode : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["parameterValues"] = args ? args.parameterValues : undefined;
            inputs["resourceGroups"] = args ? args.resourceGroups : undefined;
            inputs["targetSubscriptionId"] = args ? args.targetSubscriptionId : undefined;
            inputs["versionId"] = args ? args.versionId : undefined;
            inputs["blueprintName"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["displayName"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Assignment.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Assignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Assignment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Assignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Assignment.__pulumiType;
    }
}
exports.Assignment = Assignment;
/** @internal */
Assignment.__pulumiType = 'azure:blueprint/assignment:Assignment';
//# sourceMappingURL=assignment.js.map