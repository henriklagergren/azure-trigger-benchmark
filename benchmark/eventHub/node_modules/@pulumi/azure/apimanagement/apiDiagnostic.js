"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiDiagnostic = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a API Management Service API Diagnostics Logs.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleInsights = new azure.appinsights.Insights("exampleInsights", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     applicationType: "web",
 * });
 * const exampleService = new azure.apimanagement.Service("exampleService", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     publisherName: "My Company",
 *     publisherEmail: "company@mycompany.io",
 *     skuName: "Developer_1",
 * });
 * const exampleApi = new azure.apimanagement.Api("exampleApi", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     apiManagementName: exampleService.name,
 *     revision: "1",
 *     displayName: "Example API",
 *     path: "example",
 *     protocols: ["https"],
 *     "import": {
 *         contentFormat: "swagger-link-json",
 *         contentValue: "http://conferenceapi.azurewebsites.net/?format=json",
 *     },
 * });
 * const exampleLogger = new azure.apimanagement.Logger("exampleLogger", {
 *     apiManagementName: exampleService.name,
 *     resourceGroupName: exampleResourceGroup.name,
 *     applicationInsights: {
 *         instrumentationKey: exampleInsights.instrumentationKey,
 *     },
 * });
 * const exampleApiDiagnostic = new azure.apimanagement.ApiDiagnostic("exampleApiDiagnostic", {
 *     identifier: "applicationinsights",
 *     resourceGroupName: exampleResourceGroup.name,
 *     apiManagementName: exampleService.name,
 *     apiName: exampleApi.name,
 *     apiManagementLoggerId: exampleLogger.id,
 *     samplingPercentage: 5,
 *     alwaysLogErrors: true,
 *     logClientIp: true,
 *     verbosity: "verbose",
 *     httpCorrelationProtocol: "W3C",
 *     frontendRequest: {
 *         bodyBytes: 32,
 *         headersToLogs: [
 *             "content-type",
 *             "accept",
 *             "origin",
 *         ],
 *     },
 *     frontendResponse: {
 *         bodyBytes: 32,
 *         headersToLogs: [
 *             "content-type",
 *             "content-length",
 *             "origin",
 *         ],
 *     },
 *     backendRequest: {
 *         bodyBytes: 32,
 *         headersToLogs: [
 *             "content-type",
 *             "accept",
 *             "origin",
 *         ],
 *     },
 *     backendResponse: {
 *         bodyBytes: 32,
 *         headersToLogs: [
 *             "content-type",
 *             "content-length",
 *             "origin",
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * API Management Service API Diagnostics Logs can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:apimanagement/apiDiagnostic:ApiDiagnostic example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ApiManagement/service/instance1/apis/api1/diagnostics/diagnostic1
 * ```
 */
class ApiDiagnostic extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["alwaysLogErrors"] = state ? state.alwaysLogErrors : undefined;
            inputs["apiManagementLoggerId"] = state ? state.apiManagementLoggerId : undefined;
            inputs["apiManagementName"] = state ? state.apiManagementName : undefined;
            inputs["apiName"] = state ? state.apiName : undefined;
            inputs["backendRequest"] = state ? state.backendRequest : undefined;
            inputs["backendResponse"] = state ? state.backendResponse : undefined;
            inputs["frontendRequest"] = state ? state.frontendRequest : undefined;
            inputs["frontendResponse"] = state ? state.frontendResponse : undefined;
            inputs["httpCorrelationProtocol"] = state ? state.httpCorrelationProtocol : undefined;
            inputs["identifier"] = state ? state.identifier : undefined;
            inputs["logClientIp"] = state ? state.logClientIp : undefined;
            inputs["operationNameFormat"] = state ? state.operationNameFormat : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["samplingPercentage"] = state ? state.samplingPercentage : undefined;
            inputs["verbosity"] = state ? state.verbosity : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.apiManagementLoggerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiManagementLoggerId'");
            }
            if ((!args || args.apiManagementName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiManagementName'");
            }
            if ((!args || args.apiName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiName'");
            }
            if ((!args || args.identifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identifier'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["alwaysLogErrors"] = args ? args.alwaysLogErrors : undefined;
            inputs["apiManagementLoggerId"] = args ? args.apiManagementLoggerId : undefined;
            inputs["apiManagementName"] = args ? args.apiManagementName : undefined;
            inputs["apiName"] = args ? args.apiName : undefined;
            inputs["backendRequest"] = args ? args.backendRequest : undefined;
            inputs["backendResponse"] = args ? args.backendResponse : undefined;
            inputs["frontendRequest"] = args ? args.frontendRequest : undefined;
            inputs["frontendResponse"] = args ? args.frontendResponse : undefined;
            inputs["httpCorrelationProtocol"] = args ? args.httpCorrelationProtocol : undefined;
            inputs["identifier"] = args ? args.identifier : undefined;
            inputs["logClientIp"] = args ? args.logClientIp : undefined;
            inputs["operationNameFormat"] = args ? args.operationNameFormat : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["samplingPercentage"] = args ? args.samplingPercentage : undefined;
            inputs["verbosity"] = args ? args.verbosity : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(ApiDiagnostic.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ApiDiagnostic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ApiDiagnostic(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ApiDiagnostic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiDiagnostic.__pulumiType;
    }
}
exports.ApiDiagnostic = ApiDiagnostic;
/** @internal */
ApiDiagnostic.__pulumiType = 'azure:apimanagement/apiDiagnostic:ApiDiagnostic';
//# sourceMappingURL=apiDiagnostic.js.map