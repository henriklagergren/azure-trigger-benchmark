"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./attachedDatabaseConfiguration"), exports);
__exportStar(require("./cluster"), exports);
__exportStar(require("./clusterCustomerManagedKey"), exports);
__exportStar(require("./clusterPrincipalAssignment"), exports);
__exportStar(require("./database"), exports);
__exportStar(require("./databasePrincipal"), exports);
__exportStar(require("./databasePrincipalAssignment"), exports);
__exportStar(require("./eventGridDataConnection"), exports);
__exportStar(require("./eventhubDataConnection"), exports);
__exportStar(require("./getCluster"), exports);
__exportStar(require("./iotHubDataConnection"), exports);
__exportStar(require("./script"), exports);
// Import resources to register:
const attachedDatabaseConfiguration_1 = require("./attachedDatabaseConfiguration");
const cluster_1 = require("./cluster");
const clusterCustomerManagedKey_1 = require("./clusterCustomerManagedKey");
const clusterPrincipalAssignment_1 = require("./clusterPrincipalAssignment");
const database_1 = require("./database");
const databasePrincipal_1 = require("./databasePrincipal");
const databasePrincipalAssignment_1 = require("./databasePrincipalAssignment");
const eventGridDataConnection_1 = require("./eventGridDataConnection");
const eventhubDataConnection_1 = require("./eventhubDataConnection");
const iotHubDataConnection_1 = require("./iotHubDataConnection");
const script_1 = require("./script");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:kusto/attachedDatabaseConfiguration:AttachedDatabaseConfiguration":
                return new attachedDatabaseConfiguration_1.AttachedDatabaseConfiguration(name, undefined, { urn });
            case "azure:kusto/cluster:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "azure:kusto/clusterCustomerManagedKey:ClusterCustomerManagedKey":
                return new clusterCustomerManagedKey_1.ClusterCustomerManagedKey(name, undefined, { urn });
            case "azure:kusto/clusterPrincipalAssignment:ClusterPrincipalAssignment":
                return new clusterPrincipalAssignment_1.ClusterPrincipalAssignment(name, undefined, { urn });
            case "azure:kusto/database:Database":
                return new database_1.Database(name, undefined, { urn });
            case "azure:kusto/databasePrincipal:DatabasePrincipal":
                return new databasePrincipal_1.DatabasePrincipal(name, undefined, { urn });
            case "azure:kusto/databasePrincipalAssignment:DatabasePrincipalAssignment":
                return new databasePrincipalAssignment_1.DatabasePrincipalAssignment(name, undefined, { urn });
            case "azure:kusto/eventGridDataConnection:EventGridDataConnection":
                return new eventGridDataConnection_1.EventGridDataConnection(name, undefined, { urn });
            case "azure:kusto/eventhubDataConnection:EventhubDataConnection":
                return new eventhubDataConnection_1.EventhubDataConnection(name, undefined, { urn });
            case "azure:kusto/iotHubDataConnection:IotHubDataConnection":
                return new iotHubDataConnection_1.IotHubDataConnection(name, undefined, { urn });
            case "azure:kusto/script:Script":
                return new script_1.Script(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "kusto/attachedDatabaseConfiguration", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/cluster", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/clusterCustomerManagedKey", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/clusterPrincipalAssignment", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/database", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/databasePrincipal", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/databasePrincipalAssignment", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/eventGridDataConnection", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/eventhubDataConnection", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/iotHubDataConnection", _module);
pulumi.runtime.registerResourceModule("azure", "kusto/script", _module);
//# sourceMappingURL=index.js.map