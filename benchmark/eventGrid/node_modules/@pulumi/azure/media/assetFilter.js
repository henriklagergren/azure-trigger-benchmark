"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetFilter = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Media Asset Filter.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleServiceAccount = new azure.media.ServiceAccount("exampleServiceAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     storageAccounts: [{
 *         id: exampleAccount.id,
 *         isPrimary: true,
 *     }],
 * });
 * const exampleAsset = new azure.media.Asset("exampleAsset", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     mediaServicesAccountName: exampleServiceAccount.name,
 *     description: "Asset description",
 * });
 * const exampleAssetFilter = new azure.media.AssetFilter("exampleAssetFilter", {
 *     assetId: exampleAsset.id,
 *     firstQualityBitrate: 128000,
 *     presentationTimeRange: {
 *         startInUnits: 0,
 *         endInUnits: 15,
 *         presentationWindowInUnits: 90,
 *         liveBackoffInUnits: 0,
 *         unitTimescaleInMiliseconds: 1000,
 *         forceEnd: false,
 *     },
 *     trackSelections: [
 *         {
 *             conditions: [
 *                 {
 *                     property: "Type",
 *                     operation: "Equal",
 *                     value: "Audio",
 *                 },
 *                 {
 *                     property: "Language",
 *                     operation: "NotEqual",
 *                     value: "en",
 *                 },
 *                 {
 *                     property: "FourCC",
 *                     operation: "NotEqual",
 *                     value: "EC-3",
 *                 },
 *             ],
 *         },
 *         {
 *             conditions: [
 *                 {
 *                     property: "Type",
 *                     operation: "Equal",
 *                     value: "Video",
 *                 },
 *                 {
 *                     property: "Bitrate",
 *                     operation: "Equal",
 *                     value: "3000000-5000000",
 *                 },
 *             ],
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Asset Filters can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:media/assetFilter:AssetFilter example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaservices/account1/assets/asset1/assetFilters/filter1
 * ```
 */
class AssetFilter extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["assetId"] = state ? state.assetId : undefined;
            inputs["firstQualityBitrate"] = state ? state.firstQualityBitrate : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["presentationTimeRange"] = state ? state.presentationTimeRange : undefined;
            inputs["trackSelections"] = state ? state.trackSelections : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.assetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assetId'");
            }
            inputs["assetId"] = args ? args.assetId : undefined;
            inputs["firstQualityBitrate"] = args ? args.firstQualityBitrate : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["presentationTimeRange"] = args ? args.presentationTimeRange : undefined;
            inputs["trackSelections"] = args ? args.trackSelections : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(AssetFilter.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing AssetFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AssetFilter(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AssetFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssetFilter.__pulumiType;
    }
}
exports.AssetFilter = AssetFilter;
/** @internal */
AssetFilter.__pulumiType = 'azure:media/assetFilter:AssetFilter';
//# sourceMappingURL=assetFilter.js.map