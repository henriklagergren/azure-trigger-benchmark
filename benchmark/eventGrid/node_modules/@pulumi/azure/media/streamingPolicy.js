"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamingPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Streaming Policy.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleServiceAccount = new azure.media.ServiceAccount("exampleServiceAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     storageAccounts: [{
 *         id: exampleAccount.id,
 *         isPrimary: true,
 *     }],
 * });
 * const exampleStreamingPolicy = new azure.media.StreamingPolicy("exampleStreamingPolicy", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     mediaServicesAccountName: exampleServiceAccount.name,
 *     commonEncryptionCenc: {
 *         enabledProtocols: {
 *             download: false,
 *             dash: true,
 *             hls: false,
 *             smoothStreaming: false,
 *         },
 *         drmPlayready: {
 *             customLicenseAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/playready/{ContentKeyId}",
 *             customAttributes: "PlayReady CustomAttributes",
 *         },
 *         drmWidevineCustomLicenseAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/widevine/{ContentKeyId}",
 *     },
 *     commonEncryptionCbcs: {
 *         enabledProtocols: {
 *             download: false,
 *             dash: true,
 *             hls: false,
 *             smoothStreaming: false,
 *         },
 *         drmFairplay: {
 *             customLicenseAcquisitionUrlTemplate: "https://contoso.com/{AssetAlternativeId}/fairplay/{ContentKeyId}",
 *             allowPersistentLicense: true,
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Streaming Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:media/streamingPolicy:StreamingPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaservices/account1/streamingpolicies/policy1
 * ```
 */
class StreamingPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["commonEncryptionCbcs"] = state ? state.commonEncryptionCbcs : undefined;
            inputs["commonEncryptionCenc"] = state ? state.commonEncryptionCenc : undefined;
            inputs["defaultContentKeyPolicyName"] = state ? state.defaultContentKeyPolicyName : undefined;
            inputs["mediaServicesAccountName"] = state ? state.mediaServicesAccountName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["noEncryptionEnabledProtocols"] = state ? state.noEncryptionEnabledProtocols : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.mediaServicesAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mediaServicesAccountName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["commonEncryptionCbcs"] = args ? args.commonEncryptionCbcs : undefined;
            inputs["commonEncryptionCenc"] = args ? args.commonEncryptionCenc : undefined;
            inputs["defaultContentKeyPolicyName"] = args ? args.defaultContentKeyPolicyName : undefined;
            inputs["mediaServicesAccountName"] = args ? args.mediaServicesAccountName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["noEncryptionEnabledProtocols"] = args ? args.noEncryptionEnabledProtocols : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(StreamingPolicy.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing StreamingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StreamingPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StreamingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamingPolicy.__pulumiType;
    }
}
exports.StreamingPolicy = StreamingPolicy;
/** @internal */
StreamingPolicy.__pulumiType = 'azure:media/streamingPolicy:StreamingPolicy';
//# sourceMappingURL=streamingPolicy.js.map