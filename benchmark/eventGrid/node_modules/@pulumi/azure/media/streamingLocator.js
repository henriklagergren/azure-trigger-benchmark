"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamingLocator = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Media Streaming Locator.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleServiceAccount = new azure.media.ServiceAccount("exampleServiceAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     storageAccounts: [{
 *         id: exampleAccount.id,
 *         isPrimary: true,
 *     }],
 * });
 * const exampleAsset = new azure.media.Asset("exampleAsset", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     mediaServicesAccountName: exampleServiceAccount.name,
 *     description: "Asset description",
 * });
 * const exampleStreamingLocator = new azure.media.StreamingLocator("exampleStreamingLocator", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     mediaServicesAccountName: exampleServiceAccount.name,
 *     assetName: exampleAsset.name,
 *     streamingPolicyName: "Predefined_ClearStreamingOnly",
 * });
 * ```
 *
 * ## Import
 *
 * Streaming Locators can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:media/streamingLocator:StreamingLocator example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Media/mediaservices/account1/streaminglocators/locator1
 * ```
 */
class StreamingLocator extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["alternativeMediaId"] = state ? state.alternativeMediaId : undefined;
            inputs["assetName"] = state ? state.assetName : undefined;
            inputs["contentKeys"] = state ? state.contentKeys : undefined;
            inputs["defaultContentKeyPolicyName"] = state ? state.defaultContentKeyPolicyName : undefined;
            inputs["endTime"] = state ? state.endTime : undefined;
            inputs["mediaServicesAccountName"] = state ? state.mediaServicesAccountName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["startTime"] = state ? state.startTime : undefined;
            inputs["streamingLocatorId"] = state ? state.streamingLocatorId : undefined;
            inputs["streamingPolicyName"] = state ? state.streamingPolicyName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.assetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assetName'");
            }
            if ((!args || args.mediaServicesAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mediaServicesAccountName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.streamingPolicyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamingPolicyName'");
            }
            inputs["alternativeMediaId"] = args ? args.alternativeMediaId : undefined;
            inputs["assetName"] = args ? args.assetName : undefined;
            inputs["contentKeys"] = args ? args.contentKeys : undefined;
            inputs["defaultContentKeyPolicyName"] = args ? args.defaultContentKeyPolicyName : undefined;
            inputs["endTime"] = args ? args.endTime : undefined;
            inputs["mediaServicesAccountName"] = args ? args.mediaServicesAccountName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["startTime"] = args ? args.startTime : undefined;
            inputs["streamingLocatorId"] = args ? args.streamingLocatorId : undefined;
            inputs["streamingPolicyName"] = args ? args.streamingPolicyName : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(StreamingLocator.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing StreamingLocator resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StreamingLocator(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StreamingLocator.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamingLocator.__pulumiType;
    }
}
exports.StreamingLocator = StreamingLocator;
/** @internal */
StreamingLocator.__pulumiType = 'azure:media/streamingLocator:StreamingLocator';
//# sourceMappingURL=streamingLocator.js.map