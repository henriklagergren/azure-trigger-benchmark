"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogzTagRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a logz Tag Rule.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleLogzMonitor = new azure.monitoring.LogzMonitor("exampleLogzMonitor", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     plan: {
 *         billingCycle: "Monthly",
 *         effectiveDate: "2022-06-06T00:00:00Z",
 *         planId: "100gb14days",
 *         usageType: "Committed",
 *     },
 *     user: {
 *         email: "user@example.com",
 *         firstName: "Example",
 *         lastName: "User",
 *         phoneNumber: "+12313803556",
 *     },
 * });
 * const exampleLogzTagRule = new azure.monitoring.LogzTagRule("exampleLogzTagRule", {
 *     logzMonitorId: exampleLogzMonitor.id,
 *     tagFilters: [
 *         {
 *             name: "name1",
 *             action: "Include",
 *             value: "value1",
 *         },
 *         {
 *             name: "name2",
 *             action: "Exclude",
 *             value: "value2",
 *         },
 *     ],
 *     sendAadLogs: true,
 *     sendActivityLogs: true,
 *     sendSubscriptionLogs: true,
 * });
 * ```
 *
 * ## Import
 *
 * logz Tag Rules can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:monitoring/logzTagRule:LogzTagRule example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logz/monitors/monitor1/tagRules/ruleSet1
 * ```
 */
class LogzTagRule extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["logzMonitorId"] = state ? state.logzMonitorId : undefined;
            inputs["sendAadLogs"] = state ? state.sendAadLogs : undefined;
            inputs["sendActivityLogs"] = state ? state.sendActivityLogs : undefined;
            inputs["sendSubscriptionLogs"] = state ? state.sendSubscriptionLogs : undefined;
            inputs["tagFilters"] = state ? state.tagFilters : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.logzMonitorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logzMonitorId'");
            }
            inputs["logzMonitorId"] = args ? args.logzMonitorId : undefined;
            inputs["sendAadLogs"] = args ? args.sendAadLogs : undefined;
            inputs["sendActivityLogs"] = args ? args.sendActivityLogs : undefined;
            inputs["sendSubscriptionLogs"] = args ? args.sendSubscriptionLogs : undefined;
            inputs["tagFilters"] = args ? args.tagFilters : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(LogzTagRule.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing LogzTagRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LogzTagRule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LogzTagRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogzTagRule.__pulumiType;
    }
}
exports.LogzTagRule = LogzTagRule;
/** @internal */
LogzTagRule.__pulumiType = 'azure:monitoring/logzTagRule:LogzTagRule';
//# sourceMappingURL=logzTagRule.js.map