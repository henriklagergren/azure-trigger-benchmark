"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirewallRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Firewall Rule associated with a Redis Cache.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as random from "@pulumi/random";
 *
 * const server = new random.RandomId("server", {
 *     keepers: {
 *         azi_id: 1,
 *     },
 *     byteLength: 8,
 * });
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleCache = new azure.redis.Cache("exampleCache", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     capacity: 1,
 *     family: "P",
 *     skuName: "Premium",
 *     enableNonSslPort: false,
 *     redisConfiguration: {
 *         maxclients: 256,
 *         maxmemoryReserved: 2,
 *         maxmemoryDelta: 2,
 *         maxmemoryPolicy: "allkeys-lru",
 *     },
 * });
 * const exampleFirewallRule = new azure.redis.FirewallRule("exampleFirewallRule", {
 *     redisCacheName: exampleCache.name,
 *     resourceGroupName: exampleResourceGroup.name,
 *     startIp: "1.2.3.4",
 *     endIp: "2.3.4.5",
 * });
 * ```
 *
 * ## Import
 *
 * Redis Firewall Rules can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:redis/firewallRule:FirewallRule rule1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Cache/Redis/cache1/firewallRules/rule1
 * ```
 */
class FirewallRule extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["endIp"] = state ? state.endIp : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["redisCacheName"] = state ? state.redisCacheName : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["startIp"] = state ? state.startIp : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.endIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endIp'");
            }
            if ((!args || args.redisCacheName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'redisCacheName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.startIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startIp'");
            }
            inputs["endIp"] = args ? args.endIp : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["redisCacheName"] = args ? args.redisCacheName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["startIp"] = args ? args.startIp : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(FirewallRule.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing FirewallRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FirewallRule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FirewallRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirewallRule.__pulumiType;
    }
}
exports.FirewallRule = FirewallRule;
/** @internal */
FirewallRule.__pulumiType = 'azure:redis/firewallRule:FirewallRule';
//# sourceMappingURL=firewallRule.js.map