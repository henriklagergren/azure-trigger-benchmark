"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./activeDirectoryAdministrator"), exports);
__exportStar(require("./database"), exports);
__exportStar(require("./elasticPool"), exports);
__exportStar(require("./failoverGroup"), exports);
__exportStar(require("./firewallRule"), exports);
__exportStar(require("./getDatabase"), exports);
__exportStar(require("./getServer"), exports);
__exportStar(require("./getSqlManagedInstance"), exports);
__exportStar(require("./managedDatabase"), exports);
__exportStar(require("./managedInstance"), exports);
__exportStar(require("./managedInstanceActiveDirectoryAdministrator"), exports);
__exportStar(require("./managedInstanceFailoverGroup"), exports);
__exportStar(require("./sqlServer"), exports);
__exportStar(require("./virtualNetworkRule"), exports);
// Import resources to register:
const activeDirectoryAdministrator_1 = require("./activeDirectoryAdministrator");
const database_1 = require("./database");
const elasticPool_1 = require("./elasticPool");
const failoverGroup_1 = require("./failoverGroup");
const firewallRule_1 = require("./firewallRule");
const managedDatabase_1 = require("./managedDatabase");
const managedInstance_1 = require("./managedInstance");
const managedInstanceActiveDirectoryAdministrator_1 = require("./managedInstanceActiveDirectoryAdministrator");
const managedInstanceFailoverGroup_1 = require("./managedInstanceFailoverGroup");
const sqlServer_1 = require("./sqlServer");
const virtualNetworkRule_1 = require("./virtualNetworkRule");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:sql/activeDirectoryAdministrator:ActiveDirectoryAdministrator":
                return new activeDirectoryAdministrator_1.ActiveDirectoryAdministrator(name, undefined, { urn });
            case "azure:sql/database:Database":
                return new database_1.Database(name, undefined, { urn });
            case "azure:sql/elasticPool:ElasticPool":
                return new elasticPool_1.ElasticPool(name, undefined, { urn });
            case "azure:sql/failoverGroup:FailoverGroup":
                return new failoverGroup_1.FailoverGroup(name, undefined, { urn });
            case "azure:sql/firewallRule:FirewallRule":
                return new firewallRule_1.FirewallRule(name, undefined, { urn });
            case "azure:sql/managedDatabase:ManagedDatabase":
                return new managedDatabase_1.ManagedDatabase(name, undefined, { urn });
            case "azure:sql/managedInstance:ManagedInstance":
                return new managedInstance_1.ManagedInstance(name, undefined, { urn });
            case "azure:sql/managedInstanceActiveDirectoryAdministrator:ManagedInstanceActiveDirectoryAdministrator":
                return new managedInstanceActiveDirectoryAdministrator_1.ManagedInstanceActiveDirectoryAdministrator(name, undefined, { urn });
            case "azure:sql/managedInstanceFailoverGroup:ManagedInstanceFailoverGroup":
                return new managedInstanceFailoverGroup_1.ManagedInstanceFailoverGroup(name, undefined, { urn });
            case "azure:sql/sqlServer:SqlServer":
                return new sqlServer_1.SqlServer(name, undefined, { urn });
            case "azure:sql/virtualNetworkRule:VirtualNetworkRule":
                return new virtualNetworkRule_1.VirtualNetworkRule(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "sql/activeDirectoryAdministrator", _module);
pulumi.runtime.registerResourceModule("azure", "sql/database", _module);
pulumi.runtime.registerResourceModule("azure", "sql/elasticPool", _module);
pulumi.runtime.registerResourceModule("azure", "sql/failoverGroup", _module);
pulumi.runtime.registerResourceModule("azure", "sql/firewallRule", _module);
pulumi.runtime.registerResourceModule("azure", "sql/managedDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "sql/managedInstance", _module);
pulumi.runtime.registerResourceModule("azure", "sql/managedInstanceActiveDirectoryAdministrator", _module);
pulumi.runtime.registerResourceModule("azure", "sql/managedInstanceFailoverGroup", _module);
pulumi.runtime.registerResourceModule("azure", "sql/sqlServer", _module);
pulumi.runtime.registerResourceModule("azure", "sql/virtualNetworkRule", _module);
//# sourceMappingURL=index.js.map