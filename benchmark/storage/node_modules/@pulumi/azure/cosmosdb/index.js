"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./account"), exports);
__exportStar(require("./cassandraCluster"), exports);
__exportStar(require("./cassandraDatacenter"), exports);
__exportStar(require("./cassandraKeyspace"), exports);
__exportStar(require("./cassandraTable"), exports);
__exportStar(require("./getAccount"), exports);
__exportStar(require("./getMongoDatabase"), exports);
__exportStar(require("./getRestorableDatabaseAccounts"), exports);
__exportStar(require("./gremlinDatabase"), exports);
__exportStar(require("./gremlinGraph"), exports);
__exportStar(require("./mongoCollection"), exports);
__exportStar(require("./mongoDatabase"), exports);
__exportStar(require("./notebookWorkspace"), exports);
__exportStar(require("./sqlContainer"), exports);
__exportStar(require("./sqlDatabase"), exports);
__exportStar(require("./sqlFunction"), exports);
__exportStar(require("./sqlStoredProcedure"), exports);
__exportStar(require("./sqlTrigger"), exports);
__exportStar(require("./table"), exports);
__exportStar(require("./zMixins"), exports);
// Import resources to register:
const account_1 = require("./account");
const cassandraCluster_1 = require("./cassandraCluster");
const cassandraDatacenter_1 = require("./cassandraDatacenter");
const cassandraKeyspace_1 = require("./cassandraKeyspace");
const cassandraTable_1 = require("./cassandraTable");
const gremlinDatabase_1 = require("./gremlinDatabase");
const gremlinGraph_1 = require("./gremlinGraph");
const mongoCollection_1 = require("./mongoCollection");
const mongoDatabase_1 = require("./mongoDatabase");
const notebookWorkspace_1 = require("./notebookWorkspace");
const sqlContainer_1 = require("./sqlContainer");
const sqlDatabase_1 = require("./sqlDatabase");
const sqlFunction_1 = require("./sqlFunction");
const sqlStoredProcedure_1 = require("./sqlStoredProcedure");
const sqlTrigger_1 = require("./sqlTrigger");
const table_1 = require("./table");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:cosmosdb/account:Account":
                return new account_1.Account(name, undefined, { urn });
            case "azure:cosmosdb/cassandraCluster:CassandraCluster":
                return new cassandraCluster_1.CassandraCluster(name, undefined, { urn });
            case "azure:cosmosdb/cassandraDatacenter:CassandraDatacenter":
                return new cassandraDatacenter_1.CassandraDatacenter(name, undefined, { urn });
            case "azure:cosmosdb/cassandraKeyspace:CassandraKeyspace":
                return new cassandraKeyspace_1.CassandraKeyspace(name, undefined, { urn });
            case "azure:cosmosdb/cassandraTable:CassandraTable":
                return new cassandraTable_1.CassandraTable(name, undefined, { urn });
            case "azure:cosmosdb/gremlinDatabase:GremlinDatabase":
                return new gremlinDatabase_1.GremlinDatabase(name, undefined, { urn });
            case "azure:cosmosdb/gremlinGraph:GremlinGraph":
                return new gremlinGraph_1.GremlinGraph(name, undefined, { urn });
            case "azure:cosmosdb/mongoCollection:MongoCollection":
                return new mongoCollection_1.MongoCollection(name, undefined, { urn });
            case "azure:cosmosdb/mongoDatabase:MongoDatabase":
                return new mongoDatabase_1.MongoDatabase(name, undefined, { urn });
            case "azure:cosmosdb/notebookWorkspace:NotebookWorkspace":
                return new notebookWorkspace_1.NotebookWorkspace(name, undefined, { urn });
            case "azure:cosmosdb/sqlContainer:SqlContainer":
                return new sqlContainer_1.SqlContainer(name, undefined, { urn });
            case "azure:cosmosdb/sqlDatabase:SqlDatabase":
                return new sqlDatabase_1.SqlDatabase(name, undefined, { urn });
            case "azure:cosmosdb/sqlFunction:SqlFunction":
                return new sqlFunction_1.SqlFunction(name, undefined, { urn });
            case "azure:cosmosdb/sqlStoredProcedure:SqlStoredProcedure":
                return new sqlStoredProcedure_1.SqlStoredProcedure(name, undefined, { urn });
            case "azure:cosmosdb/sqlTrigger:SqlTrigger":
                return new sqlTrigger_1.SqlTrigger(name, undefined, { urn });
            case "azure:cosmosdb/table:Table":
                return new table_1.Table(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "cosmosdb/account", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/cassandraCluster", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/cassandraDatacenter", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/cassandraKeyspace", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/cassandraTable", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/gremlinDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/gremlinGraph", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/mongoCollection", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/mongoDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/notebookWorkspace", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlContainer", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlFunction", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlStoredProcedure", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/sqlTrigger", _module);
pulumi.runtime.registerResourceModule("azure", "cosmosdb/table", _module);
//# sourceMappingURL=index.js.map