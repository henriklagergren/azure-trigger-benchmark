"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheNfsTarget = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a NFS Target within a HPC Cache.
 *
 * > **NOTE:**: By request of the service team the provider no longer automatically registering the `Microsoft.StorageCache` Resource Provider for this resource. To register it you can run `az provider register --namespace 'Microsoft.StorageCache'`.
 *
 * ## Import
 *
 * NFS Target within a HPC Cache can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:hpc/cacheNfsTarget:CacheNfsTarget example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StorageCache/caches/cache1/storageTargets/target1
 * ```
 */
class CacheNfsTarget extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["cacheName"] = state ? state.cacheName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespaceJunctions"] = state ? state.namespaceJunctions : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["targetHostName"] = state ? state.targetHostName : undefined;
            inputs["usageModel"] = state ? state.usageModel : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.cacheName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cacheName'");
            }
            if ((!args || args.namespaceJunctions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceJunctions'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.targetHostName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetHostName'");
            }
            if ((!args || args.usageModel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'usageModel'");
            }
            inputs["cacheName"] = args ? args.cacheName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespaceJunctions"] = args ? args.namespaceJunctions : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["targetHostName"] = args ? args.targetHostName : undefined;
            inputs["usageModel"] = args ? args.usageModel : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(CacheNfsTarget.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing CacheNfsTarget resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CacheNfsTarget(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CacheNfsTarget.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CacheNfsTarget.__pulumiType;
    }
}
exports.CacheNfsTarget = CacheNfsTarget;
/** @internal */
CacheNfsTarget.__pulumiType = 'azure:hpc/cacheNfsTarget:CacheNfsTarget';
//# sourceMappingURL=cacheNfsTarget.js.map