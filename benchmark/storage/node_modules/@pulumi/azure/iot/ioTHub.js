"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IoTHub = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an IotHub
 *
 * > **NOTE:** Endpoints can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azurerm_iothub_endpoint_*` resources - but the two ways of defining the endpoints cannot be used together. If both are used against the same IoTHub, spurious changes will occur. Also, defining a `azurerm_iothub_endpoint_*` resource and another endpoint of a different type directly on the `azure.iot.IoTHub` resource is not supported.
 *
 * > **NOTE:** Routes can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azure.iot.Route` resource - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.
 *
 * > **NOTE:** Enrichments can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azure.iot.Enrichment` resource - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.
 *
 * > **NOTE:** Fallback route can be defined either directly on the `azure.iot.IoTHub` resource, or using the `azure.iot.FallbackRoute` resource - but the two cannot be used together. If both are used against the same IoTHub, spurious changes will occur.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleContainer = new azure.storage.Container("exampleContainer", {
 *     storageAccountName: exampleAccount.name,
 *     containerAccessType: "private",
 * });
 * const exampleEventHubNamespace = new azure.eventhub.EventHubNamespace("exampleEventHubNamespace", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     sku: "Basic",
 * });
 * const exampleEventHub = new azure.eventhub.EventHub("exampleEventHub", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     namespaceName: exampleEventHubNamespace.name,
 *     partitionCount: 2,
 *     messageRetention: 1,
 * });
 * const exampleAuthorizationRule = new azure.eventhub.AuthorizationRule("exampleAuthorizationRule", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     namespaceName: exampleEventHubNamespace.name,
 *     eventhubName: exampleEventHub.name,
 *     send: true,
 * });
 * const exampleIoTHub = new azure.iot.IoTHub("exampleIoTHub", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     sku: {
 *         name: "S1",
 *         capacity: "1",
 *     },
 *     endpoints: [
 *         {
 *             type: "AzureIotHub.StorageContainer",
 *             connectionString: exampleAccount.primaryBlobConnectionString,
 *             name: "export",
 *             batchFrequencyInSeconds: 60,
 *             maxChunkSizeInBytes: 10485760,
 *             containerName: exampleContainer.name,
 *             encoding: "Avro",
 *             fileNameFormat: "{iothub}/{partition}_{YYYY}_{MM}_{DD}_{HH}_{mm}",
 *         },
 *         {
 *             type: "AzureIotHub.EventHub",
 *             connectionString: exampleAuthorizationRule.primaryConnectionString,
 *             name: "export2",
 *         },
 *     ],
 *     routes: [
 *         {
 *             name: "export",
 *             source: "DeviceMessages",
 *             condition: "true",
 *             endpointNames: ["export"],
 *             enabled: true,
 *         },
 *         {
 *             name: "export2",
 *             source: "DeviceMessages",
 *             condition: "true",
 *             endpointNames: ["export2"],
 *             enabled: true,
 *         },
 *     ],
 *     enrichments: [{
 *         key: "tenant",
 *         value: `$twin.tags.Tenant`,
 *         endpointNames: [
 *             "export",
 *             "export2",
 *         ],
 *     }],
 *     cloudToDevice: {
 *         maxDeliveryCount: 30,
 *         defaultTtl: "PT1H",
 *         feedbacks: [{
 *             timeToLive: "PT1H10M",
 *             maxDeliveryCount: 15,
 *             lockDuration: "PT30S",
 *         }],
 *     },
 *     tags: {
 *         purpose: "testing",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * IoTHubs can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:iot/ioTHub:IoTHub hub1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/IotHubs/hub1
 * ```
 */
class IoTHub extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["cloudToDevice"] = state ? state.cloudToDevice : undefined;
            inputs["endpoints"] = state ? state.endpoints : undefined;
            inputs["enrichments"] = state ? state.enrichments : undefined;
            inputs["eventHubEventsEndpoint"] = state ? state.eventHubEventsEndpoint : undefined;
            inputs["eventHubEventsNamespace"] = state ? state.eventHubEventsNamespace : undefined;
            inputs["eventHubEventsPath"] = state ? state.eventHubEventsPath : undefined;
            inputs["eventHubOperationsEndpoint"] = state ? state.eventHubOperationsEndpoint : undefined;
            inputs["eventHubOperationsPath"] = state ? state.eventHubOperationsPath : undefined;
            inputs["eventHubPartitionCount"] = state ? state.eventHubPartitionCount : undefined;
            inputs["eventHubRetentionInDays"] = state ? state.eventHubRetentionInDays : undefined;
            inputs["fallbackRoute"] = state ? state.fallbackRoute : undefined;
            inputs["fileUpload"] = state ? state.fileUpload : undefined;
            inputs["hostname"] = state ? state.hostname : undefined;
            inputs["identity"] = state ? state.identity : undefined;
            inputs["ipFilterRules"] = state ? state.ipFilterRules : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["minTlsVersion"] = state ? state.minTlsVersion : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["routes"] = state ? state.routes : undefined;
            inputs["sharedAccessPolicies"] = state ? state.sharedAccessPolicies : undefined;
            inputs["sku"] = state ? state.sku : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            inputs["cloudToDevice"] = args ? args.cloudToDevice : undefined;
            inputs["endpoints"] = args ? args.endpoints : undefined;
            inputs["enrichments"] = args ? args.enrichments : undefined;
            inputs["eventHubPartitionCount"] = args ? args.eventHubPartitionCount : undefined;
            inputs["eventHubRetentionInDays"] = args ? args.eventHubRetentionInDays : undefined;
            inputs["fallbackRoute"] = args ? args.fallbackRoute : undefined;
            inputs["fileUpload"] = args ? args.fileUpload : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["ipFilterRules"] = args ? args.ipFilterRules : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["minTlsVersion"] = args ? args.minTlsVersion : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["routes"] = args ? args.routes : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["eventHubEventsEndpoint"] = undefined /*out*/;
            inputs["eventHubEventsNamespace"] = undefined /*out*/;
            inputs["eventHubEventsPath"] = undefined /*out*/;
            inputs["eventHubOperationsEndpoint"] = undefined /*out*/;
            inputs["eventHubOperationsPath"] = undefined /*out*/;
            inputs["hostname"] = undefined /*out*/;
            inputs["sharedAccessPolicies"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(IoTHub.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing IoTHub resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IoTHub(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of IoTHub.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IoTHub.__pulumiType;
    }
}
exports.IoTHub = IoTHub;
/** @internal */
IoTHub.__pulumiType = 'azure:iot/ioTHub:IoTHub';
//# sourceMappingURL=ioTHub.js.map