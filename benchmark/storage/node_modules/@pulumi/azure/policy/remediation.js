"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Remediation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Policy Remediation at the specified Scope.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleDefinition = new azure.policy.Definition("exampleDefinition", {
 *     policyType: "Custom",
 *     mode: "All",
 *     displayName: "my-policy-definition",
 *     policyRule: `    {
 *     "if": {
 *       "not": {
 *         "field": "location",
 *         "in": "[parameters('allowedLocations')]"
 *       }
 *     },
 *     "then": {
 *       "effect": "audit"
 *     }
 *   }
 * `,
 *     parameters: `    {
 *     "allowedLocations": {
 *       "type": "Array",
 *       "metadata": {
 *         "description": "The list of allowed locations for resources.",
 *         "displayName": "Allowed locations",
 *         "strongType": "location"
 *       }
 *     }
 *   }
 * `,
 * });
 * const exampleAssignment = new azure.policy.Assignment("exampleAssignment", {
 *     scope: exampleResourceGroup.id,
 *     policyDefinitionId: exampleDefinition.id,
 *     description: "Policy Assignment created via an Acceptance Test",
 *     displayName: "My Example Policy Assignment",
 *     parameters: `{
 *   "allowedLocations": {
 *     "value": [ "West Europe" ]
 *   }
 * }
 * `,
 * });
 * const exampleRemediation = new azure.policy.Remediation("exampleRemediation", {
 *     scope: exampleAssignment.scope,
 *     policyAssignmentId: exampleAssignment.id,
 *     locationFilters: ["West Europe"],
 * });
 * ```
 *
 * ## Import
 *
 * Policy Remediations can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:policy/remediation:Remediation example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.PolicyInsights/remediations/remediation1
 * ```
 *
 *  or
 *
 * ```sh
 *  $ pulumi import azure:policy/remediation:Remediation example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.PolicyInsights/remediations/remediation1
 * ```
 *
 *  or
 *
 * ```sh
 *  $ pulumi import azure:policy/remediation:Remediation example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.PolicyInsights/remediations/remediation1
 * ```
 *
 *  or
 *
 * ```sh
 *  $ pulumi import azure:policy/remediation:Remediation example /providers/Microsoft.Management/managementGroups/my-mgmt-group-id/providers/Microsoft.PolicyInsights/remediations/remediation1
 * ```
 */
class Remediation extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["locationFilters"] = state ? state.locationFilters : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["policyAssignmentId"] = state ? state.policyAssignmentId : undefined;
            inputs["policyDefinitionReferenceId"] = state ? state.policyDefinitionReferenceId : undefined;
            inputs["resourceDiscoveryMode"] = state ? state.resourceDiscoveryMode : undefined;
            inputs["scope"] = state ? state.scope : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.policyAssignmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyAssignmentId'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            inputs["locationFilters"] = args ? args.locationFilters : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["policyAssignmentId"] = args ? args.policyAssignmentId : undefined;
            inputs["policyDefinitionReferenceId"] = args ? args.policyDefinitionReferenceId : undefined;
            inputs["resourceDiscoveryMode"] = args ? args.resourceDiscoveryMode : undefined;
            inputs["scope"] = args ? args.scope : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Remediation.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Remediation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Remediation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Remediation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Remediation.__pulumiType;
    }
}
exports.Remediation = Remediation;
/** @internal */
Remediation.__pulumiType = 'azure:policy/remediation:Remediation';
//# sourceMappingURL=remediation.js.map