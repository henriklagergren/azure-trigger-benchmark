"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertificateOrder = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an App Service Certificate Order.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleCertificateOrder = new azure.appservice.CertificateOrder("exampleCertificateOrder", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: "global",
 *     distinguishedName: "CN=example.com",
 *     productType: "Standard",
 * });
 * ```
 *
 * ## Import
 *
 * App Service Certificate Orders can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appservice/certificateOrder:CertificateOrder example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.CertificateRegistration/certificateOrders/certificateorder1
 * ```
 */
class CertificateOrder extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["appServiceCertificateNotRenewableReasons"] = state ? state.appServiceCertificateNotRenewableReasons : undefined;
            inputs["autoRenew"] = state ? state.autoRenew : undefined;
            inputs["certificates"] = state ? state.certificates : undefined;
            inputs["csr"] = state ? state.csr : undefined;
            inputs["distinguishedName"] = state ? state.distinguishedName : undefined;
            inputs["domainVerificationToken"] = state ? state.domainVerificationToken : undefined;
            inputs["expirationTime"] = state ? state.expirationTime : undefined;
            inputs["intermediateThumbprint"] = state ? state.intermediateThumbprint : undefined;
            inputs["isPrivateKeyExternal"] = state ? state.isPrivateKeyExternal : undefined;
            inputs["keySize"] = state ? state.keySize : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["productType"] = state ? state.productType : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["rootThumbprint"] = state ? state.rootThumbprint : undefined;
            inputs["signedCertificateThumbprint"] = state ? state.signedCertificateThumbprint : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["validityInYears"] = state ? state.validityInYears : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["autoRenew"] = args ? args.autoRenew : undefined;
            inputs["csr"] = args ? args.csr : undefined;
            inputs["distinguishedName"] = args ? args.distinguishedName : undefined;
            inputs["keySize"] = args ? args.keySize : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["productType"] = args ? args.productType : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["validityInYears"] = args ? args.validityInYears : undefined;
            inputs["appServiceCertificateNotRenewableReasons"] = undefined /*out*/;
            inputs["certificates"] = undefined /*out*/;
            inputs["domainVerificationToken"] = undefined /*out*/;
            inputs["expirationTime"] = undefined /*out*/;
            inputs["intermediateThumbprint"] = undefined /*out*/;
            inputs["isPrivateKeyExternal"] = undefined /*out*/;
            inputs["rootThumbprint"] = undefined /*out*/;
            inputs["signedCertificateThumbprint"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(CertificateOrder.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing CertificateOrder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CertificateOrder(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CertificateOrder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateOrder.__pulumiType;
    }
}
exports.CertificateOrder = CertificateOrder;
/** @internal */
CertificateOrder.__pulumiType = 'azure:appservice/certificateOrder:CertificateOrder';
//# sourceMappingURL=certificateOrder.js.map