"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataDiskAttachment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages attaching a Disk to a Virtual Machine.
 *
 * > **NOTE:** Data Disks can be attached either directly on the `azure.compute.VirtualMachine` resource, or using the `azure.compute.DataDiskAttachment` resource - but the two cannot be used together. If both are used against the same Virtual Machine, spurious changes will occur.
 *
 * > **Please Note:** only Managed Disks are supported via this separate resource, Unmanaged Disks can be attached using the `storageDataDisk` block in the `azure.compute.VirtualMachine` resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const config = new pulumi.Config();
 * const prefix = config.get("prefix") || "example";
 * const vmName = `${prefix}-vm`;
 * const mainResourceGroup = new azure.core.ResourceGroup("mainResourceGroup", {location: "West Europe"});
 * const mainVirtualNetwork = new azure.network.VirtualNetwork("mainVirtualNetwork", {
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: mainResourceGroup.location,
 *     resourceGroupName: mainResourceGroup.name,
 * });
 * const internal = new azure.network.Subnet("internal", {
 *     resourceGroupName: mainResourceGroup.name,
 *     virtualNetworkName: mainVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const mainNetworkInterface = new azure.network.NetworkInterface("mainNetworkInterface", {
 *     location: mainResourceGroup.location,
 *     resourceGroupName: mainResourceGroup.name,
 *     ipConfigurations: [{
 *         name: "internal",
 *         subnetId: internal.id,
 *         privateIpAddressAllocation: "Dynamic",
 *     }],
 * });
 * const exampleVirtualMachine = new azure.compute.VirtualMachine("exampleVirtualMachine", {
 *     location: mainResourceGroup.location,
 *     resourceGroupName: mainResourceGroup.name,
 *     networkInterfaceIds: [mainNetworkInterface.id],
 *     vmSize: "Standard_F2",
 *     storageImageReference: {
 *         publisher: "Canonical",
 *         offer: "UbuntuServer",
 *         sku: "16.04-LTS",
 *         version: "latest",
 *     },
 *     storageOsDisk: {
 *         name: "myosdisk1",
 *         caching: "ReadWrite",
 *         createOption: "FromImage",
 *         managedDiskType: "Standard_LRS",
 *     },
 *     osProfile: {
 *         computerName: vmName,
 *         adminUsername: "testadmin",
 *         adminPassword: "Password1234!",
 *     },
 *     osProfileLinuxConfig: {
 *         disablePasswordAuthentication: false,
 *     },
 * });
 * const exampleManagedDisk = new azure.compute.ManagedDisk("exampleManagedDisk", {
 *     location: mainResourceGroup.location,
 *     resourceGroupName: mainResourceGroup.name,
 *     storageAccountType: "Standard_LRS",
 *     createOption: "Empty",
 *     diskSizeGb: 10,
 * });
 * const exampleDataDiskAttachment = new azure.compute.DataDiskAttachment("exampleDataDiskAttachment", {
 *     managedDiskId: exampleManagedDisk.id,
 *     virtualMachineId: exampleVirtualMachine.id,
 *     lun: "10",
 *     caching: "ReadWrite",
 * });
 * ```
 *
 * ## Import
 *
 * Virtual Machines Data Disk Attachments can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:compute/dataDiskAttachment:DataDiskAttachment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/microsoft.compute/virtualMachines/machine1/dataDisks/disk1
 * ```
 */
class DataDiskAttachment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["caching"] = state ? state.caching : undefined;
            inputs["createOption"] = state ? state.createOption : undefined;
            inputs["lun"] = state ? state.lun : undefined;
            inputs["managedDiskId"] = state ? state.managedDiskId : undefined;
            inputs["virtualMachineId"] = state ? state.virtualMachineId : undefined;
            inputs["writeAcceleratorEnabled"] = state ? state.writeAcceleratorEnabled : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.caching === undefined) && !opts.urn) {
                throw new Error("Missing required property 'caching'");
            }
            if ((!args || args.lun === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lun'");
            }
            if ((!args || args.managedDiskId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedDiskId'");
            }
            if ((!args || args.virtualMachineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineId'");
            }
            inputs["caching"] = args ? args.caching : undefined;
            inputs["createOption"] = args ? args.createOption : undefined;
            inputs["lun"] = args ? args.lun : undefined;
            inputs["managedDiskId"] = args ? args.managedDiskId : undefined;
            inputs["virtualMachineId"] = args ? args.virtualMachineId : undefined;
            inputs["writeAcceleratorEnabled"] = args ? args.writeAcceleratorEnabled : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(DataDiskAttachment.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing DataDiskAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DataDiskAttachment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DataDiskAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataDiskAttachment.__pulumiType;
    }
}
exports.DataDiskAttachment = DataDiskAttachment;
/** @internal */
DataDiskAttachment.__pulumiType = 'azure:compute/dataDiskAttachment:DataDiskAttachment';
//# sourceMappingURL=dataDiskAttachment.js.map