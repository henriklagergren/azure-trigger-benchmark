"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationFeature = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure App Configuration Feature.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const rg = new azure.core.ResourceGroup("rg", {location: "West Europe"});
 * const appconf = new azure.appconfiguration.ConfigurationStore("appconf", {
 *     resourceGroupName: rg.name,
 *     location: rg.location,
 * });
 * const test = new azure.appconfiguration.ConfigurationFeature("test", {
 *     configurationStoreId: appconf.id,
 *     description: "test description",
 *     label: `acctest-ackeylabel-%d`,
 *     enabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * App Configuration Features can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appconfiguration/configurationFeature:ConfigurationFeature test /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resourceGroup1/providers/Microsoft.AppConfiguration/configurationStores/appConf1/AppConfigurationFeature/appConfFeature1/Label/label1
 * ```
 *
 *  If you wish to import a key with an empty label then sustitute the label's name with `%00`, like this
 *
 * ```sh
 *  $ pulumi import azure:appconfiguration/configurationFeature:ConfigurationFeature test /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resourceGroup1/providers/Microsoft.AppConfiguration/configurationStores/appConf1/AppConfigurationFeature/appConfFeature1/Label/%00
 * ```
 */
class ConfigurationFeature extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["configurationStoreId"] = state ? state.configurationStoreId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["etag"] = state ? state.etag : undefined;
            inputs["label"] = state ? state.label : undefined;
            inputs["locked"] = state ? state.locked : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["percentageFilterValue"] = state ? state.percentageFilterValue : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["targetingFilters"] = state ? state.targetingFilters : undefined;
            inputs["timewindowFilters"] = state ? state.timewindowFilters : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.configurationStoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationStoreId'");
            }
            inputs["configurationStoreId"] = args ? args.configurationStoreId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["etag"] = args ? args.etag : undefined;
            inputs["label"] = args ? args.label : undefined;
            inputs["locked"] = args ? args.locked : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["percentageFilterValue"] = args ? args.percentageFilterValue : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["targetingFilters"] = args ? args.targetingFilters : undefined;
            inputs["timewindowFilters"] = args ? args.timewindowFilters : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(ConfigurationFeature.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ConfigurationFeature resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ConfigurationFeature(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ConfigurationFeature.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationFeature.__pulumiType;
    }
}
exports.ConfigurationFeature = ConfigurationFeature;
/** @internal */
ConfigurationFeature.__pulumiType = 'azure:appconfiguration/configurationFeature:ConfigurationFeature';
//# sourceMappingURL=configurationFeature.js.map