{"version":3,"file":"azure-functions-ts-essentials.umd.js","sources":["../../.temp/azure-functions-ts-essentials/models/error-type.ts","../../.temp/azure-functions-ts-essentials/models/http-method.ts","../../.temp/azure-functions-ts-essentials/models/http-status-code.ts"],"sourcesContent":["/**\r\n * Contains the values of error types due to a failure of an API request.\r\n */\r\nexport enum ErrorType {\r\n  /**\r\n   * Represents that the resource does not exist.\r\n   */\r\n  Missing = 'missing',\r\n  /**\r\n   * Represents that a required field on a resource has not been set.\r\n   */\r\n  MissingField = 'missing_field',\r\n  /**\r\n   * Represents that the formatting of a field is invalid.\r\n   */\r\n  Invalid = 'invalid',\r\n  /**\r\n   * Represents that another resource has the same value as this field.\r\n   */\r\n  AlreadyExists = 'already_exists'\r\n}\r\n","/**\r\n * Contains the values of the essential HTTP methods.\r\n */\r\nexport enum HttpMethod {\r\n  /**\r\n   * Represents an HTTP GET protocol method.\r\n   */\r\n  Get = 'GET',\r\n  /**\r\n   * Represents an HTTP POST protocol method that is used to post a new entity as an addition to a URI.\r\n   */\r\n  Post = 'POST',\r\n  /**\r\n   * Represents an HTTP DELETE protocol method.\r\n   */\r\n  Delete = 'DELETE',\r\n  /**\r\n   * Represents an HTTP HEAD protocol method.\r\n   */\r\n  Head = 'HEAD',\r\n  /**\r\n   * Represents an HTTP PATCH protocol method that is used to replace partially an entity identified by a URI.\r\n   */\r\n  Patch = 'PATCH',\r\n  /**\r\n   * Represents an HTTP PUT protocol method that is used to replace an entity identified by a URI.\r\n   */\r\n  Put = 'PUT',\r\n  /**\r\n   * Represents an HTTP OPTIONS protocol method.\r\n   */\r\n  Options = 'OPTIONS',\r\n  /**\r\n   * Represents an HTTP TRACE protocol method.\r\n   */\r\n  Trace = 'TRACE'\r\n}\r\n","/**\r\n * Contains the values of status codes defined for HTTP.\r\n */\r\nexport enum HttpStatusCode {\r\n  /**\r\n   * Indicates that the client can continue with its request.\r\n   */\r\n  Continue = 100,\r\n  /**\r\n   * Indicates that the protocol version or protocol is being changed.\r\n   */\r\n  SwitchingProtocols = 101,\r\n  /**\r\n   * Indicates that the request succeeded and that the requested information is in the response.\r\n   */\r\n  OK = 200,\r\n  /**\r\n   * Indicates that the request resulted in a new resource created before the response was sent.\r\n   */\r\n  Created = 201,\r\n  /**\r\n   * Indicates that the request has been accepted for further processing.\r\n   */\r\n  Accepted = 202,\r\n  /**\r\n   * Indicates that the returned meta information is from a cached copy instead of the origin server and therefore may be\r\n   * incorrect.\r\n   */\r\n  NonAuthoritativeInformation = 203,\r\n  /**\r\n   * Indicates that the request has been successfully processed and that the response is intentionally blank.\r\n   */\r\n  NoContent = 204,\r\n  /**\r\n   * Indicates that the client should reset (not reload) the current resource.\r\n   */\r\n  ResetContent = 205,\r\n  /**\r\n   * Indicates that the response is a partial response as requested by a GET request that includes a byte range.\r\n   */\r\n  PartialContent = 206,\r\n  /**\r\n   * Indicates that the requested information has multiple representations.\r\n   *\r\n   * The default action is to treat this status as a redirect and follow the contents of the Location header associated\r\n   * with this response.\r\n   */\r\n  MultipleChoices = 300,\r\n  /**\r\n   * Indicates that the requested information has multiple representations.\r\n   *\r\n   * The default action is to treat this status as a redirect and follow the contents of the Location header associated\r\n   * with this response.\r\n   */\r\n  Ambiguous = 300,\r\n  /**\r\n   * Indicates that the requested information has been moved to the URI specified in the Location header.\r\n   *\r\n   * The default action when this status is received is to follow the Location header associated with the response.\r\n   */\r\n  MovedPermanently = 301,\r\n  /**\r\n   * Indicates that the requested information has been moved to the URI specified in the Location header.\r\n   *\r\n   * The default action when this status is received is to follow the Location header associated with the response.\r\n   * When the original request method was POST, the redirected request will use the GET method.\r\n   */\r\n  Moved = 301,\r\n  /**\r\n   * Indicates that the requested information is located at the URI specified in the Location header.\r\n   *\r\n   * The default action when this status is received is to follow the Location header associated with the response.\r\n   * When the original request method was POST, the redirected request will use the GET method.\r\n   */\r\n  Found = 302,\r\n  /**\r\n   * Indicates that the requested information is located at the URI specified in the Location header.\r\n   *\r\n   * The default action when this status is received is to follow the Location header associated with the response.\r\n   * When the original request method was POST, the redirected request will use the GET method.\r\n   */\r\n  Redirect = 302,\r\n  /**\r\n   * Automatically redirects the client to the URI specified in the Location header as the result of a POST.\r\n   *\r\n   * The request to the resource specified by the Location header will be made with a GET.\r\n   */\r\n  SeeOther = 303,\r\n  /**\r\n   * Automatically redirects the client to the URI specified in the Location header as the result of a POST.\r\n   *\r\n   * The request to the resource specified by the Location header will be made with a GET.\r\n   */\r\n  RedirectMethod = 303,\r\n  /**\r\n   * Indicates that the client's cached copy is up to date.\r\n   *\r\n   * The contents of the resource are not transferred.\r\n   */\r\n  NotModified = 304,\r\n  /**\r\n   * Indicates that the request should use the proxy server at the URI specified in the Location header.\r\n   */\r\n  UseProxy = 305,\r\n  /**\r\n   * A proposed extension to the HTTP/1.1 specification that is not fully specified.\r\n   */\r\n  Unused = 306,\r\n  /**\r\n   * Indicates that the request information is located at the URI specified in the Location header.\r\n   *\r\n   * The default action when this status is received is to follow the Location header associated with the response.\r\n   * When the original request method was POST, the redirected request will also use the POST method.\r\n   */\r\n  TemporaryRedirect = 307,\r\n  /**\r\n   * Indicates that the request information is located at the URI specified in the Location header.\r\n   *\r\n   * The default action when this status is received is to follow the Location header associated with the response.\r\n   * When the original request method was POST, the redirected request will also use the POST method.\r\n   */\r\n  RedirectKeepVerb = 307,\r\n  /**\r\n   * Indicates that the request could not be understood by the server.\r\n   *\r\n   * The HTTP 400 (BadRequest) is sent when no other error is applicable, or if the exact error is unknown or does not\r\n   * have its own error code.\r\n   */\r\n  BadRequest = 400,\r\n  /**\r\n   * Indicates that the requested resource requires authentication.\r\n   *\r\n   * The WWW-Authenticate header contains the details of how to perform the authentication.\r\n   */\r\n  Unauthorized = 401,\r\n  /**\r\n   * Reserved for future use.\r\n   */\r\n  PaymentRequired = 402,\r\n  /**\r\n   * Indicates that the server refuses to fulfill the request.\r\n   */\r\n  Forbidden = 403,\r\n  /**\r\n   * Indicates that the requested resource does not exist on the server.\r\n   */\r\n  NotFound = 404,\r\n  /**\r\n   * Indicates that the request method (POST or GET) is not allowed on the requested resource.\r\n   */\r\n  MethodNotAllowed = 405,\r\n  /**\r\n   * Indicates that the client has indicated with Accept headers that it will not accept any of the available\r\n   * representations of the resource.\r\n   */\r\n  NotAcceptable = 406,\r\n  /**\r\n   * Indicates that the requested proxy requires authentication.\r\n   *\r\n   * The Proxy-authenticate header contains the details of how to perform the authentication.\r\n   */\r\n  ProxyAuthenticationRequired = 407,\r\n  /**\r\n   * Indicates that the client did not send a request within the time the server was expecting the request.\r\n   */\r\n  RequestTimeout = 408,\r\n  /**\r\n   * Indicates that the request could not be carried out because of a conflict on the server.\r\n   */\r\n  Conflict = 409,\r\n  /**\r\n   * Indicates that the requested resource is no longer available.\r\n   */\r\n  Gone = 410,\r\n  /**\r\n   * Indicates that the required Content-length header is missing.\r\n   */\r\n  LengthRequired = 411,\r\n  /**\r\n   * Indicates that a condition set for this request failed, and the request cannot be carried out.\r\n   *\r\n   * Conditions are set with conditional request headers like If-Match, If-None-Match, or If-Unmodified-Since.\r\n   */\r\n  PreconditionFailed = 412,\r\n  /**\r\n   * Indicates that the request is too large for the server to process.\r\n   */\r\n  RequestEntityTooLarge = 413,\r\n  /**\r\n   * Indicates that the URI is too long.\r\n   */\r\n  RequestUriTooLong = 414,\r\n  /**\r\n   * Indicates that the request is an unsupported type.\r\n   */\r\n  UnsupportedMediaType = 415,\r\n  /**\r\n   * Indicates that the range of data requested from the resource cannot be returned, either because the beginning of\r\n   * the range is before the beginning of the resource, or the end of the range is after the end of the resource.\r\n   */\r\n  RequestedRangeNotSatisfiable = 416,\r\n  /**\r\n   * Indicates that an expectation given in an Expect header could not be met by the server.\r\n   */\r\n  ExpectationFailed = 417,\r\n  /**\r\n   * Indicates that the server understands the content type of the request and the request is syntactically correct, but\r\n   * was unable to process the contained instructions (semantically erroneous).\r\n   */\r\n  UnprocessableEntity = 422,\r\n  /**\r\n   * Indicates that the client should switch to a different protocol such as TLS/1.0.\r\n   */\r\n  UpgradeRequired = 426,\r\n  /**\r\n   * Indicates that a generic error has occurred on the server.\r\n   */\r\n  InternalServerError = 500,\r\n  /**\r\n   * Indicates that the server does not support the requested function.\r\n   */\r\n  NotImplemented = 501,\r\n  /**\r\n   * Indicates that an intermediate proxy server received a bad response from another proxy or the origin server.\r\n   */\r\n  BadGateway = 502,\r\n  /**\r\n   * Indicates that the server is temporarily unavailable, usually due to high load or maintenance.\r\n   */\r\n  ServiceUnavailable = 503,\r\n  /**\r\n   * Indicates that an intermediate proxy server timed out while waiting for a response from another proxy or the origin\r\n   * server.\r\n   */\r\n  GatewayTimeout = 504,\r\n  /**\r\n   * Indicates that the requested HTTP version is not supported by the server.\r\n   */\r\n  HttpVersionNotSupported = 505\r\n}\r\n"],"names":["ErrorType","HttpMethod","HttpStatusCode"],"mappings":";;;;;;AAGA,WAAY,SAAS;IAInB,gCAAmB,CAAA;IAInB,2CAA8B,CAAA;IAI9B,gCAAmB,CAAA;IAInB,6CAAgC,CAAA;CACjC,EAjBWA,iBAAS,KAATA,iBAAS,QAiBpB;;ACjBD,WAAY,UAAU;IAIpB,yBAAW,CAAA;IAIX,2BAAa,CAAA;IAIb,+BAAiB,CAAA;IAIjB,2BAAa,CAAA;IAIb,6BAAe,CAAA;IAIf,yBAAW,CAAA;IAIX,iCAAmB,CAAA;IAInB,6BAAe,CAAA;CAChB,EAjCWC,kBAAU,KAAVA,kBAAU,QAiCrB;;ACjCD,WAAY,cAAc;IAIxB,6DAAc,CAAA;IAId,iFAAwB,CAAA;IAIxB,iDAAQ,CAAA;IAIR,2DAAa,CAAA;IAIb,6DAAc,CAAA;IAKd,mGAAiC,CAAA;IAIjC,+DAAe,CAAA;IAIf,qEAAkB,CAAA;IAIlB,yEAAoB,CAAA;IAOpB,2EAAqB,CAAA;IAOrB,+DAAe,CAAA;IAMf,6EAAsB,CAAA;IAOtB,uDAAW,CAAA;IAOX,uDAAW,CAAA;IAOX,6DAAc,CAAA;IAMd,6DAAc,CAAA;IAMd,yEAAoB,CAAA;IAMpB,mEAAiB,CAAA;IAIjB,6DAAc,CAAA;IAId,yDAAY,CAAA;IAOZ,+EAAuB,CAAA;IAOvB,6EAAsB,CAAA;IAOtB,iEAAgB,CAAA;IAMhB,qEAAkB,CAAA;IAIlB,2EAAqB,CAAA;IAIrB,+DAAe,CAAA;IAIf,6DAAc,CAAA;IAId,6EAAsB,CAAA;IAKtB,uEAAmB,CAAA;IAMnB,mGAAiC,CAAA;IAIjC,yEAAoB,CAAA;IAIpB,6DAAc,CAAA;IAId,qDAAU,CAAA;IAIV,yEAAoB,CAAA;IAMpB,iFAAwB,CAAA;IAIxB,uFAA2B,CAAA;IAI3B,+EAAuB,CAAA;IAIvB,qFAA0B,CAAA;IAK1B,qGAAkC,CAAA;IAIlC,+EAAuB,CAAA;IAKvB,mFAAyB,CAAA;IAIzB,2EAAqB,CAAA;IAIrB,mFAAyB,CAAA;IAIzB,yEAAoB,CAAA;IAIpB,iEAAgB,CAAA;IAIhB,iFAAwB,CAAA;IAKxB,yEAAoB,CAAA;IAIpB,2FAA6B,CAAA;CAC9B,EA5OWC,sBAAc,KAAdA,sBAAc,QA4OzB;;;;"}