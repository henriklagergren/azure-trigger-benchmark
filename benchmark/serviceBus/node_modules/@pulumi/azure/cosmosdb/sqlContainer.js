"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SqlContainer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a SQL Container within a Cosmos DB Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.cosmosdb.SqlContainer("example", {
 *     resourceGroupName: azurerm_cosmosdb_account.example.resource_group_name,
 *     accountName: azurerm_cosmosdb_account.example.name,
 *     databaseName: azurerm_cosmosdb_sql_database.example.name,
 *     partitionKeyPath: "/definition/id",
 *     partitionKeyVersion: 1,
 *     throughput: 400,
 *     indexingPolicy: {
 *         indexingMode: "Consistent",
 *         includedPaths: [
 *             {
 *                 path: "/*",
 *             },
 *             {
 *                 path: "/included/?",
 *             },
 *         ],
 *         excludedPaths: [{
 *             path: "/excluded/?",
 *         }],
 *     },
 *     uniqueKeys: [{
 *         paths: [
 *             "/definition/idlong",
 *             "/definition/idshort",
 *         ],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Cosmos SQL Containers can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:cosmosdb/sqlContainer:SqlContainer example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DocumentDB/databaseAccounts/account1/sqlDatabases/database1/containers/container1
 * ```
 */
class SqlContainer extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["accountName"] = state ? state.accountName : undefined;
            inputs["analyticalStorageTtl"] = state ? state.analyticalStorageTtl : undefined;
            inputs["autoscaleSettings"] = state ? state.autoscaleSettings : undefined;
            inputs["conflictResolutionPolicy"] = state ? state.conflictResolutionPolicy : undefined;
            inputs["databaseName"] = state ? state.databaseName : undefined;
            inputs["defaultTtl"] = state ? state.defaultTtl : undefined;
            inputs["indexingPolicy"] = state ? state.indexingPolicy : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["partitionKeyPath"] = state ? state.partitionKeyPath : undefined;
            inputs["partitionKeyVersion"] = state ? state.partitionKeyVersion : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["throughput"] = state ? state.throughput : undefined;
            inputs["uniqueKeys"] = state ? state.uniqueKeys : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.partitionKeyPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partitionKeyPath'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["accountName"] = args ? args.accountName : undefined;
            inputs["analyticalStorageTtl"] = args ? args.analyticalStorageTtl : undefined;
            inputs["autoscaleSettings"] = args ? args.autoscaleSettings : undefined;
            inputs["conflictResolutionPolicy"] = args ? args.conflictResolutionPolicy : undefined;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["defaultTtl"] = args ? args.defaultTtl : undefined;
            inputs["indexingPolicy"] = args ? args.indexingPolicy : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["partitionKeyPath"] = args ? args.partitionKeyPath : undefined;
            inputs["partitionKeyVersion"] = args ? args.partitionKeyVersion : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["throughput"] = args ? args.throughput : undefined;
            inputs["uniqueKeys"] = args ? args.uniqueKeys : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(SqlContainer.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing SqlContainer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SqlContainer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SqlContainer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SqlContainer.__pulumiType;
    }
}
exports.SqlContainer = SqlContainer;
/** @internal */
SqlContainer.__pulumiType = 'azure:cosmosdb/sqlContainer:SqlContainer';
//# sourceMappingURL=sqlContainer.js.map