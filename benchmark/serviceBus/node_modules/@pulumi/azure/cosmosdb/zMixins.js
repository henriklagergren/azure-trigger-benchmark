"use strict";
// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CosmosDBFunction = exports.CosmosChangeFeedSubscription = void 0;
const pulumi = require("@pulumi/pulumi");
const account_1 = require("./account");
const appservice = require("../appservice");
account_1.Account.prototype.onChange = function (name, args, opts) {
    return new CosmosChangeFeedSubscription(name, this, args, opts);
};
account_1.Account.prototype.getChangeFeedFunction = function (name, args) {
    return new CosmosDBFunction(name, Object.assign(Object.assign({}, args), { account: this }));
};
class CosmosChangeFeedSubscription extends appservice.EventSubscription {
    constructor(name, account, args, opts = {}) {
        const resourceGroupName = appservice.getResourceGroupName(args, account.resourceGroupName);
        super("azure:eventhub:CosmosChangeFeedSubscription", name, new CosmosDBFunction(name, Object.assign(Object.assign({}, args), { account })), Object.assign(Object.assign({}, args), { resourceGroupName }), Object.assign({ parent: account }, opts));
        this.account = account;
        this.registerOutputs();
    }
}
exports.CosmosChangeFeedSubscription = CosmosChangeFeedSubscription;
/**
 * Azure Function triggered by a Cosmos DB Change Feed.
 */
class CosmosDBFunction extends appservice.Function {
    constructor(name, args) {
        const bindingConnectionKey = pulumi.interpolate `Cosmos${args.account.name}ConnectionKey`;
        const trigger = {
            name: "items",
            direction: "in",
            type: "cosmosDBTrigger",
            connectionStringSetting: bindingConnectionKey,
            databaseName: args.databaseName,
            collectionName: args.collectionName,
            maxItemsPerInvocation: args.maxItemsPerInvocation,
            startFromBeginning: args.startFromBeginning,
            // We take an opiniated approach here: use the default "leases" collection as
            // a shared lease collection for all Cosmos DB triggered functions. With multiple
            // functions, this is both the simplest and the cheapest solution. The collection
            // will be auto-created if it doesn't exist yet.
            leaseCollectionPrefix: name,
            createLeaseCollectionIfNotExists: true,
        };
        // Place the mapping from the well known key name to the Cosmos DB connection string in
        // the 'app settings' object.
        const appSettings = pulumi.all([args.account.connectionStrings, bindingConnectionKey]).apply(([connectionStrings, key]) => ({ [key]: connectionStrings[0] }));
        super(name, trigger, args, appSettings);
    }
}
exports.CosmosDBFunction = CosmosDBFunction;
//# sourceMappingURL=zMixins.js.map