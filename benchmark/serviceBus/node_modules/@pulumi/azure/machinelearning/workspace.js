"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workspace = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Import
 *
 * Machine Learning Workspace can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:machinelearning/workspace:Workspace example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.MachineLearningServices/workspaces/workspace1
 * ```
 */
class Workspace extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["applicationInsightsId"] = state ? state.applicationInsightsId : undefined;
            inputs["containerRegistryId"] = state ? state.containerRegistryId : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["discoveryUrl"] = state ? state.discoveryUrl : undefined;
            inputs["encryption"] = state ? state.encryption : undefined;
            inputs["friendlyName"] = state ? state.friendlyName : undefined;
            inputs["highBusinessImpact"] = state ? state.highBusinessImpact : undefined;
            inputs["identity"] = state ? state.identity : undefined;
            inputs["imageBuildComputeName"] = state ? state.imageBuildComputeName : undefined;
            inputs["keyVaultId"] = state ? state.keyVaultId : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["skuName"] = state ? state.skuName : undefined;
            inputs["storageAccountId"] = state ? state.storageAccountId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.applicationInsightsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationInsightsId'");
            }
            if ((!args || args.identity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identity'");
            }
            if ((!args || args.keyVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVaultId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.storageAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountId'");
            }
            inputs["applicationInsightsId"] = args ? args.applicationInsightsId : undefined;
            inputs["containerRegistryId"] = args ? args.containerRegistryId : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["encryption"] = args ? args.encryption : undefined;
            inputs["friendlyName"] = args ? args.friendlyName : undefined;
            inputs["highBusinessImpact"] = args ? args.highBusinessImpact : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["imageBuildComputeName"] = args ? args.imageBuildComputeName : undefined;
            inputs["keyVaultId"] = args ? args.keyVaultId : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["skuName"] = args ? args.skuName : undefined;
            inputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["discoveryUrl"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Workspace.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Workspace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Workspace(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Workspace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workspace.__pulumiType;
    }
}
exports.Workspace = Workspace;
/** @internal */
Workspace.__pulumiType = 'azure:machinelearning/workspace:Workspace';
//# sourceMappingURL=workspace.js.map