"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeSeriesInsightsEventSourceEventhub = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure IoT Time Series Insights EventHub Event Source.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleEventHubNamespace = new azure.eventhub.EventHubNamespace("exampleEventHubNamespace", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     sku: "Standard",
 * });
 * const exampleEventHub = new azure.eventhub.EventHub("exampleEventHub", {
 *     namespaceName: exampleEventHubNamespace.name,
 *     resourceGroupName: exampleResourceGroup.name,
 *     partitionCount: 2,
 *     messageRetention: 7,
 * });
 * const exampleConsumerGroup = new azure.eventhub.ConsumerGroup("exampleConsumerGroup", {
 *     namespaceName: exampleEventHubNamespace.name,
 *     eventhubName: exampleEventHub.name,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleAuthorizationRule = new azure.eventhub.AuthorizationRule("exampleAuthorizationRule", {
 *     namespaceName: exampleEventHubNamespace.name,
 *     eventhubName: exampleEventHub.name,
 *     resourceGroupName: exampleResourceGroup.name,
 *     listen: true,
 *     send: false,
 *     manage: false,
 * });
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleTimeSeriesInsightsGen2Environment = new azure.iot.TimeSeriesInsightsGen2Environment("exampleTimeSeriesInsightsGen2Environment", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     skuName: "L1",
 *     idProperties: ["id"],
 *     storage: {
 *         name: exampleAccount.name,
 *         key: exampleAccount.primaryAccessKey,
 *     },
 * });
 * const exampleTimeSeriesInsightsEventSourceEventhub = new azure.iot.TimeSeriesInsightsEventSourceEventhub("exampleTimeSeriesInsightsEventSourceEventhub", {
 *     location: exampleResourceGroup.location,
 *     environmentId: exampleTimeSeriesInsightsGen2Environment.id,
 *     eventhubName: exampleEventHub.name,
 *     namespaceName: exampleEventHubNamespace.name,
 *     sharedAccessKey: exampleAuthorizationRule.primaryKey,
 *     sharedAccessKeyName: exampleAuthorizationRule.name,
 *     consumerGroupName: exampleConsumerGroup.name,
 *     eventSourceResourceId: exampleEventHub.id,
 * });
 * ```
 *
 * ## Import
 *
 * Azure IoT Time Series Insights EventHub Event Source can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:iot/timeSeriesInsightsEventSourceEventhub:TimeSeriesInsightsEventSourceEventhub example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example/providers/Microsoft.TimeSeriesInsights/environments/environment1/eventSources/example
 * ```
 */
class TimeSeriesInsightsEventSourceEventhub extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["consumerGroupName"] = state ? state.consumerGroupName : undefined;
            inputs["environmentId"] = state ? state.environmentId : undefined;
            inputs["eventSourceResourceId"] = state ? state.eventSourceResourceId : undefined;
            inputs["eventhubName"] = state ? state.eventhubName : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespaceName"] = state ? state.namespaceName : undefined;
            inputs["sharedAccessKey"] = state ? state.sharedAccessKey : undefined;
            inputs["sharedAccessKeyName"] = state ? state.sharedAccessKeyName : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["timestampPropertyName"] = state ? state.timestampPropertyName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.consumerGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerGroupName'");
            }
            if ((!args || args.environmentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environmentId'");
            }
            if ((!args || args.eventSourceResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventSourceResourceId'");
            }
            if ((!args || args.eventhubName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventhubName'");
            }
            if ((!args || args.namespaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespaceName'");
            }
            if ((!args || args.sharedAccessKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sharedAccessKey'");
            }
            if ((!args || args.sharedAccessKeyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sharedAccessKeyName'");
            }
            inputs["consumerGroupName"] = args ? args.consumerGroupName : undefined;
            inputs["environmentId"] = args ? args.environmentId : undefined;
            inputs["eventSourceResourceId"] = args ? args.eventSourceResourceId : undefined;
            inputs["eventhubName"] = args ? args.eventhubName : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespaceName"] = args ? args.namespaceName : undefined;
            inputs["sharedAccessKey"] = args ? args.sharedAccessKey : undefined;
            inputs["sharedAccessKeyName"] = args ? args.sharedAccessKeyName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["timestampPropertyName"] = args ? args.timestampPropertyName : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(TimeSeriesInsightsEventSourceEventhub.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing TimeSeriesInsightsEventSourceEventhub resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TimeSeriesInsightsEventSourceEventhub(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TimeSeriesInsightsEventSourceEventhub.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TimeSeriesInsightsEventSourceEventhub.__pulumiType;
    }
}
exports.TimeSeriesInsightsEventSourceEventhub = TimeSeriesInsightsEventSourceEventhub;
/** @internal */
TimeSeriesInsightsEventSourceEventhub.__pulumiType = 'azure:iot/timeSeriesInsightsEventSourceEventhub:TimeSeriesInsightsEventSourceEventhub';
//# sourceMappingURL=timeSeriesInsightsEventSourceEventhub.js.map