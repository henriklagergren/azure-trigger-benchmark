"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegistryWebook = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Container Registry Webhook.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const rg = new azure.core.ResourceGroup("rg", {location: "West Europe"});
 * const acr = new azure.containerservice.Registry("acr", {
 *     resourceGroupName: rg.name,
 *     location: rg.location,
 *     sku: "Standard",
 *     adminEnabled: false,
 * });
 * const webhook = new azure.containerservice.RegistryWebhook("webhook", {
 *     resourceGroupName: rg.name,
 *     registryName: acr.name,
 *     location: rg.location,
 *     serviceUri: "https://mywebhookreceiver.example/mytag",
 *     status: "enabled",
 *     scope: "mytag:*",
 *     actions: ["push"],
 *     customHeaders: {
 *         "Content-Type": "application/json",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Container Registry Webhooks can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:containerservice/registryWebook:RegistryWebook example /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/mygroup1/providers/Microsoft.ContainerRegistry/registries/myregistry1/webhooks/mywebhook1
 * ```
 *
 * @deprecated azure.containerservice.RegistryWebook has been deprecated in favor of azure.containerservice.RegistryWebhook
 */
class RegistryWebook extends pulumi.CustomResource {
    /** @deprecated azure.containerservice.RegistryWebook has been deprecated in favor of azure.containerservice.RegistryWebhook */
    constructor(name, argsOrState, opts) {
        pulumi.log.warn("RegistryWebook is deprecated: azure.containerservice.RegistryWebook has been deprecated in favor of azure.containerservice.RegistryWebhook");
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["actions"] = state ? state.actions : undefined;
            inputs["customHeaders"] = state ? state.customHeaders : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["registryName"] = state ? state.registryName : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["scope"] = state ? state.scope : undefined;
            inputs["serviceUri"] = state ? state.serviceUri : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.actions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if ((!args || args.registryName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serviceUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceUri'");
            }
            inputs["actions"] = args ? args.actions : undefined;
            inputs["customHeaders"] = args ? args.customHeaders : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["registryName"] = args ? args.registryName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["scope"] = args ? args.scope : undefined;
            inputs["serviceUri"] = args ? args.serviceUri : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["tags"] = args ? args.tags : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(RegistryWebook.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing RegistryWebook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        pulumi.log.warn("RegistryWebook is deprecated: azure.containerservice.RegistryWebook has been deprecated in favor of azure.containerservice.RegistryWebhook");
        return new RegistryWebook(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RegistryWebook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryWebook.__pulumiType;
    }
}
exports.RegistryWebook = RegistryWebook;
/** @internal */
RegistryWebook.__pulumiType = 'azure:containerservice/registryWebook:RegistryWebook';
//# sourceMappingURL=registryWebook.js.map