"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagnosticSetting = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Diagnostic Setting for an existing Resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = exampleResourceGroup.name.apply(name => azure.storage.getAccount({
 *     name: "examplestoracc",
 *     resourceGroupName: name,
 * }));
 * const exampleKeyVault = exampleResourceGroup.name.apply(name => azure.keyvault.getKeyVault({
 *     name: "example-vault",
 *     resourceGroupName: name,
 * }));
 * const exampleDiagnosticSetting = new azure.monitoring.DiagnosticSetting("exampleDiagnosticSetting", {
 *     targetResourceId: exampleKeyVault.apply(exampleKeyVault => exampleKeyVault.id),
 *     storageAccountId: exampleAccount.apply(exampleAccount => exampleAccount.id),
 *     logs: [{
 *         category: "AuditEvent",
 *         enabled: false,
 *         retentionPolicy: {
 *             enabled: false,
 *         },
 *     }],
 *     metrics: [{
 *         category: "AllMetrics",
 *         retentionPolicy: {
 *             enabled: false,
 *         },
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Diagnostic Settings can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:monitoring/diagnosticSetting:DiagnosticSetting example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.KeyVault/vaults/vault1|logMonitoring1"
 * ```
 */
class DiagnosticSetting extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["eventhubAuthorizationRuleId"] = state ? state.eventhubAuthorizationRuleId : undefined;
            inputs["eventhubName"] = state ? state.eventhubName : undefined;
            inputs["logAnalyticsDestinationType"] = state ? state.logAnalyticsDestinationType : undefined;
            inputs["logAnalyticsWorkspaceId"] = state ? state.logAnalyticsWorkspaceId : undefined;
            inputs["logs"] = state ? state.logs : undefined;
            inputs["metrics"] = state ? state.metrics : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["storageAccountId"] = state ? state.storageAccountId : undefined;
            inputs["targetResourceId"] = state ? state.targetResourceId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.targetResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResourceId'");
            }
            inputs["eventhubAuthorizationRuleId"] = args ? args.eventhubAuthorizationRuleId : undefined;
            inputs["eventhubName"] = args ? args.eventhubName : undefined;
            inputs["logAnalyticsDestinationType"] = args ? args.logAnalyticsDestinationType : undefined;
            inputs["logAnalyticsWorkspaceId"] = args ? args.logAnalyticsWorkspaceId : undefined;
            inputs["logs"] = args ? args.logs : undefined;
            inputs["metrics"] = args ? args.metrics : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            inputs["targetResourceId"] = args ? args.targetResourceId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(DiagnosticSetting.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing DiagnosticSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DiagnosticSetting(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DiagnosticSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DiagnosticSetting.__pulumiType;
    }
}
exports.DiagnosticSetting = DiagnosticSetting;
/** @internal */
DiagnosticSetting.__pulumiType = 'azure:monitoring/diagnosticSetting:DiagnosticSetting';
//# sourceMappingURL=diagnosticSetting.js.map