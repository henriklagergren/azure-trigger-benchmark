"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CertificateBinding = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an App Service Certificate Binding.
 *
 * ## Import
 *
 * App Service Certificate Bindings can be imported using the `hostname_binding_id` and the `app_service_certificate_id` , e.g.
 *
 * ```sh
 *  $ pulumi import azure:appservice/certificateBinding:CertificateBinding example "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/sites/instance1/hostNameBindings/mywebsite.com|/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Web/certificates/mywebsite.com"
 * ```
 */
class CertificateBinding extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["appServiceName"] = state ? state.appServiceName : undefined;
            inputs["certificateId"] = state ? state.certificateId : undefined;
            inputs["hostname"] = state ? state.hostname : undefined;
            inputs["hostnameBindingId"] = state ? state.hostnameBindingId : undefined;
            inputs["sslState"] = state ? state.sslState : undefined;
            inputs["thumbprint"] = state ? state.thumbprint : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.certificateId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateId'");
            }
            if ((!args || args.hostnameBindingId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostnameBindingId'");
            }
            if ((!args || args.sslState === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sslState'");
            }
            inputs["certificateId"] = args ? args.certificateId : undefined;
            inputs["hostnameBindingId"] = args ? args.hostnameBindingId : undefined;
            inputs["sslState"] = args ? args.sslState : undefined;
            inputs["appServiceName"] = undefined /*out*/;
            inputs["hostname"] = undefined /*out*/;
            inputs["thumbprint"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(CertificateBinding.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing CertificateBinding resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CertificateBinding(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CertificateBinding.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CertificateBinding.__pulumiType;
    }
}
exports.CertificateBinding = CertificateBinding;
/** @internal */
CertificateBinding.__pulumiType = 'azure:appservice/certificateBinding:CertificateBinding';
//# sourceMappingURL=certificateBinding.js.map