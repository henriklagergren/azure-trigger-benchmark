"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./activeSlot"), exports);
__exportStar(require("./appService"), exports);
__exportStar(require("./certificate"), exports);
__exportStar(require("./certificateBinding"), exports);
__exportStar(require("./certificateOrder"), exports);
__exportStar(require("./customHostnameBinding"), exports);
__exportStar(require("./environment"), exports);
__exportStar(require("./environmentV3"), exports);
__exportStar(require("./functionApp"), exports);
__exportStar(require("./functionAppSlot"), exports);
__exportStar(require("./getAppService"), exports);
__exportStar(require("./getAppServiceEnvironment"), exports);
__exportStar(require("./getAppServicePlan"), exports);
__exportStar(require("./getCertificate"), exports);
__exportStar(require("./getCertificateOrder"), exports);
__exportStar(require("./getEnvironmentV3"), exports);
__exportStar(require("./getFunctionApp"), exports);
__exportStar(require("./getFunctionAppHostKeys"), exports);
__exportStar(require("./hybridConnection"), exports);
__exportStar(require("./kind"), exports);
__exportStar(require("./managedCertificate"), exports);
__exportStar(require("./plan"), exports);
__exportStar(require("./publicCertificate"), exports);
__exportStar(require("./slot"), exports);
__exportStar(require("./slotCustomHostnameBinding"), exports);
__exportStar(require("./slotVirtualNetworkSwiftConnection"), exports);
__exportStar(require("./sourceCodeToken"), exports);
__exportStar(require("./staticSite"), exports);
__exportStar(require("./staticSiteCustomDomain"), exports);
__exportStar(require("./virtualNetworkSwiftConnection"), exports);
__exportStar(require("./zMixins"), exports);
__exportStar(require("./zMixins_durable"), exports);
__exportStar(require("./zMixins_http"), exports);
__exportStar(require("./zMixins_timer"), exports);
// Import resources to register:
const activeSlot_1 = require("./activeSlot");
const appService_1 = require("./appService");
const certificate_1 = require("./certificate");
const certificateBinding_1 = require("./certificateBinding");
const certificateOrder_1 = require("./certificateOrder");
const customHostnameBinding_1 = require("./customHostnameBinding");
const environment_1 = require("./environment");
const environmentV3_1 = require("./environmentV3");
const functionApp_1 = require("./functionApp");
const functionAppSlot_1 = require("./functionAppSlot");
const hybridConnection_1 = require("./hybridConnection");
const managedCertificate_1 = require("./managedCertificate");
const plan_1 = require("./plan");
const publicCertificate_1 = require("./publicCertificate");
const slot_1 = require("./slot");
const slotCustomHostnameBinding_1 = require("./slotCustomHostnameBinding");
const slotVirtualNetworkSwiftConnection_1 = require("./slotVirtualNetworkSwiftConnection");
const sourceCodeToken_1 = require("./sourceCodeToken");
const staticSite_1 = require("./staticSite");
const staticSiteCustomDomain_1 = require("./staticSiteCustomDomain");
const virtualNetworkSwiftConnection_1 = require("./virtualNetworkSwiftConnection");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:appservice/activeSlot:ActiveSlot":
                return new activeSlot_1.ActiveSlot(name, undefined, { urn });
            case "azure:appservice/appService:AppService":
                return new appService_1.AppService(name, undefined, { urn });
            case "azure:appservice/certificate:Certificate":
                return new certificate_1.Certificate(name, undefined, { urn });
            case "azure:appservice/certificateBinding:CertificateBinding":
                return new certificateBinding_1.CertificateBinding(name, undefined, { urn });
            case "azure:appservice/certificateOrder:CertificateOrder":
                return new certificateOrder_1.CertificateOrder(name, undefined, { urn });
            case "azure:appservice/customHostnameBinding:CustomHostnameBinding":
                return new customHostnameBinding_1.CustomHostnameBinding(name, undefined, { urn });
            case "azure:appservice/environment:Environment":
                return new environment_1.Environment(name, undefined, { urn });
            case "azure:appservice/environmentV3:EnvironmentV3":
                return new environmentV3_1.EnvironmentV3(name, undefined, { urn });
            case "azure:appservice/functionApp:FunctionApp":
                return new functionApp_1.FunctionApp(name, undefined, { urn });
            case "azure:appservice/functionAppSlot:FunctionAppSlot":
                return new functionAppSlot_1.FunctionAppSlot(name, undefined, { urn });
            case "azure:appservice/hybridConnection:HybridConnection":
                return new hybridConnection_1.HybridConnection(name, undefined, { urn });
            case "azure:appservice/managedCertificate:ManagedCertificate":
                return new managedCertificate_1.ManagedCertificate(name, undefined, { urn });
            case "azure:appservice/plan:Plan":
                return new plan_1.Plan(name, undefined, { urn });
            case "azure:appservice/publicCertificate:PublicCertificate":
                return new publicCertificate_1.PublicCertificate(name, undefined, { urn });
            case "azure:appservice/slot:Slot":
                return new slot_1.Slot(name, undefined, { urn });
            case "azure:appservice/slotCustomHostnameBinding:SlotCustomHostnameBinding":
                return new slotCustomHostnameBinding_1.SlotCustomHostnameBinding(name, undefined, { urn });
            case "azure:appservice/slotVirtualNetworkSwiftConnection:SlotVirtualNetworkSwiftConnection":
                return new slotVirtualNetworkSwiftConnection_1.SlotVirtualNetworkSwiftConnection(name, undefined, { urn });
            case "azure:appservice/sourceCodeToken:SourceCodeToken":
                return new sourceCodeToken_1.SourceCodeToken(name, undefined, { urn });
            case "azure:appservice/staticSite:StaticSite":
                return new staticSite_1.StaticSite(name, undefined, { urn });
            case "azure:appservice/staticSiteCustomDomain:StaticSiteCustomDomain":
                return new staticSiteCustomDomain_1.StaticSiteCustomDomain(name, undefined, { urn });
            case "azure:appservice/virtualNetworkSwiftConnection:VirtualNetworkSwiftConnection":
                return new virtualNetworkSwiftConnection_1.VirtualNetworkSwiftConnection(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "appservice/activeSlot", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/appService", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/certificate", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/certificateBinding", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/certificateOrder", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/customHostnameBinding", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/environment", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/environmentV3", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/functionApp", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/functionAppSlot", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/hybridConnection", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/managedCertificate", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/plan", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/publicCertificate", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/slot", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/slotCustomHostnameBinding", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/slotVirtualNetworkSwiftConnection", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/sourceCodeToken", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/staticSite", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/staticSiteCustomDomain", _module);
pulumi.runtime.registerResourceModule("azure", "appservice/virtualNetworkSwiftConnection", _module);
//# sourceMappingURL=index.js.map