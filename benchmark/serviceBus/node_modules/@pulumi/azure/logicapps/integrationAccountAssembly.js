"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntegrationAccountAssembly = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Logic App Integration Account Assembly.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * from "fs";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleIntegrationAccount = new azure.logicapps.IntegrationAccount("exampleIntegrationAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     skuName: "Basic",
 * });
 * const exampleIntegrationAccountAssembly = new azure.logicapps.IntegrationAccountAssembly("exampleIntegrationAccountAssembly", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     integrationAccountName: exampleIntegrationAccount.name,
 *     assemblyName: "TestAssembly",
 *     content: Buffer.from(fs.readFileSync("testdata/log4net.dll"), 'binary').toString('base64'),
 * });
 * ```
 *
 * ## Import
 *
 * Logic App Integration Account Assemblies can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:logicapps/integrationAccountAssembly:IntegrationAccountAssembly example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Logic/integrationAccounts/account1/assemblies/assembly1
 * ```
 */
class IntegrationAccountAssembly extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["assemblyName"] = state ? state.assemblyName : undefined;
            inputs["assemblyVersion"] = state ? state.assemblyVersion : undefined;
            inputs["content"] = state ? state.content : undefined;
            inputs["contentLinkUri"] = state ? state.contentLinkUri : undefined;
            inputs["integrationAccountName"] = state ? state.integrationAccountName : undefined;
            inputs["metadata"] = state ? state.metadata : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.assemblyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'assemblyName'");
            }
            if ((!args || args.integrationAccountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'integrationAccountName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["assemblyName"] = args ? args.assemblyName : undefined;
            inputs["assemblyVersion"] = args ? args.assemblyVersion : undefined;
            inputs["content"] = args ? args.content : undefined;
            inputs["contentLinkUri"] = args ? args.contentLinkUri : undefined;
            inputs["integrationAccountName"] = args ? args.integrationAccountName : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(IntegrationAccountAssembly.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing IntegrationAccountAssembly resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new IntegrationAccountAssembly(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of IntegrationAccountAssembly.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IntegrationAccountAssembly.__pulumiType;
    }
}
exports.IntegrationAccountAssembly = IntegrationAccountAssembly;
/** @internal */
IntegrationAccountAssembly.__pulumiType = 'azure:logicapps/integrationAccountAssembly:IntegrationAccountAssembly';
//# sourceMappingURL=integrationAccountAssembly.js.map