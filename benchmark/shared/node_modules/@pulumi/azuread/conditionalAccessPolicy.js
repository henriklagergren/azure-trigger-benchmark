"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConditionalAccessPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * Manages a Conditional Access Policy within Azure Active Directory.
 *
 * ## API Permissions
 *
 * The following API permissions are required in order to use this resource.
 *
 * When authenticated with a service principal, this resource requires the following application roles: `Policy.ReadWrite.ConditionalAccess` and `Policy.Read.All`
 *
 * When authenticated with a user principal, this resource requires one of the following directory roles: `Conditional Access Administrator` or `Global Administrator`
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azuread from "@pulumi/azuread";
 *
 * const example = new azuread.ConditionalAccessPolicy("example", {
 *     conditions: {
 *         applications: {
 *             excludedApplications: ["00000004-0000-0ff1-ce00-000000000000"],
 *             includedApplications: ["All"],
 *         },
 *         clientAppTypes: ["all"],
 *         devices: {
 *             filter: {
 *                 mode: "exclude",
 *                 rule: "device.operatingSystem eq \"Doors\"",
 *             },
 *         },
 *         locations: {
 *             excludedLocations: ["AllTrusted"],
 *             includedLocations: ["All"],
 *         },
 *         platforms: {
 *             excludedPlatforms: ["iOS"],
 *             includedPlatforms: ["android"],
 *         },
 *         signInRiskLevels: ["medium"],
 *         userRiskLevels: ["medium"],
 *         users: {
 *             excludedUsers: ["GuestsOrExternalUsers"],
 *             includedUsers: ["All"],
 *         },
 *     },
 *     displayName: "example policy",
 *     grantControls: {
 *         builtInControls: ["mfa"],
 *         operator: "OR",
 *     },
 *     sessionControls: {
 *         applicationEnforcedRestrictions: [{
 *             enabled: true,
 *         }],
 *         cloudAppSecurity: [{
 *             cloudAppSecurityType: "monitorOnly",
 *             enabled: true,
 *         }],
 *         signInFrequency: [{
 *             enabled: true,
 *             type: "hours",
 *             value: 10,
 *         }],
 *     },
 *     state: "disabled",
 * });
 * ```
 *
 * ## Import
 *
 * Conditional Access Policies can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import azuread:index/conditionalAccessPolicy:ConditionalAccessPolicy my_location 00000000-0000-0000-0000-000000000000
 * ```
 */
class ConditionalAccessPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["grantControls"] = state ? state.grantControls : undefined;
            resourceInputs["sessionControls"] = state ? state.sessionControls : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.conditions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conditions'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.grantControls === undefined) && !opts.urn) {
                throw new Error("Missing required property 'grantControls'");
            }
            if ((!args || args.state === undefined) && !opts.urn) {
                throw new Error("Missing required property 'state'");
            }
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["grantControls"] = args ? args.grantControls : undefined;
            resourceInputs["sessionControls"] = args ? args.sessionControls : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConditionalAccessPolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ConditionalAccessPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ConditionalAccessPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ConditionalAccessPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConditionalAccessPolicy.__pulumiType;
    }
}
exports.ConditionalAccessPolicy = ConditionalAccessPolicy;
/** @internal */
ConditionalAccessPolicy.__pulumiType = 'azuread:index/conditionalAccessPolicy:ConditionalAccessPolicy';
//# sourceMappingURL=conditionalAccessPolicy.js.map