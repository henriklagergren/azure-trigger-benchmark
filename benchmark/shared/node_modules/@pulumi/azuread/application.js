"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Application = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Import
 *
 * Applications can be imported using their object ID, e.g.
 *
 * ```sh
 *  $ pulumi import azuread:index/application:Application test 00000000-0000-0000-0000-000000000000
 * ```
 */
class Application extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["api"] = state ? state.api : undefined;
            resourceInputs["appRoleIds"] = state ? state.appRoleIds : undefined;
            resourceInputs["appRoles"] = state ? state.appRoles : undefined;
            resourceInputs["applicationId"] = state ? state.applicationId : undefined;
            resourceInputs["deviceOnlyAuthEnabled"] = state ? state.deviceOnlyAuthEnabled : undefined;
            resourceInputs["disabledByMicrosoft"] = state ? state.disabledByMicrosoft : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["fallbackPublicClientEnabled"] = state ? state.fallbackPublicClientEnabled : undefined;
            resourceInputs["featureTags"] = state ? state.featureTags : undefined;
            resourceInputs["groupMembershipClaims"] = state ? state.groupMembershipClaims : undefined;
            resourceInputs["identifierUris"] = state ? state.identifierUris : undefined;
            resourceInputs["logoImage"] = state ? state.logoImage : undefined;
            resourceInputs["logoUrl"] = state ? state.logoUrl : undefined;
            resourceInputs["marketingUrl"] = state ? state.marketingUrl : undefined;
            resourceInputs["oauth2PermissionScopeIds"] = state ? state.oauth2PermissionScopeIds : undefined;
            resourceInputs["oauth2PostResponseRequired"] = state ? state.oauth2PostResponseRequired : undefined;
            resourceInputs["objectId"] = state ? state.objectId : undefined;
            resourceInputs["optionalClaims"] = state ? state.optionalClaims : undefined;
            resourceInputs["owners"] = state ? state.owners : undefined;
            resourceInputs["preventDuplicateNames"] = state ? state.preventDuplicateNames : undefined;
            resourceInputs["privacyStatementUrl"] = state ? state.privacyStatementUrl : undefined;
            resourceInputs["publicClient"] = state ? state.publicClient : undefined;
            resourceInputs["publisherDomain"] = state ? state.publisherDomain : undefined;
            resourceInputs["requiredResourceAccesses"] = state ? state.requiredResourceAccesses : undefined;
            resourceInputs["signInAudience"] = state ? state.signInAudience : undefined;
            resourceInputs["singlePageApplication"] = state ? state.singlePageApplication : undefined;
            resourceInputs["supportUrl"] = state ? state.supportUrl : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["termsOfServiceUrl"] = state ? state.termsOfServiceUrl : undefined;
            resourceInputs["web"] = state ? state.web : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["api"] = args ? args.api : undefined;
            resourceInputs["appRoles"] = args ? args.appRoles : undefined;
            resourceInputs["deviceOnlyAuthEnabled"] = args ? args.deviceOnlyAuthEnabled : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["fallbackPublicClientEnabled"] = args ? args.fallbackPublicClientEnabled : undefined;
            resourceInputs["featureTags"] = args ? args.featureTags : undefined;
            resourceInputs["groupMembershipClaims"] = args ? args.groupMembershipClaims : undefined;
            resourceInputs["identifierUris"] = args ? args.identifierUris : undefined;
            resourceInputs["logoImage"] = args ? args.logoImage : undefined;
            resourceInputs["marketingUrl"] = args ? args.marketingUrl : undefined;
            resourceInputs["oauth2PostResponseRequired"] = args ? args.oauth2PostResponseRequired : undefined;
            resourceInputs["optionalClaims"] = args ? args.optionalClaims : undefined;
            resourceInputs["owners"] = args ? args.owners : undefined;
            resourceInputs["preventDuplicateNames"] = args ? args.preventDuplicateNames : undefined;
            resourceInputs["privacyStatementUrl"] = args ? args.privacyStatementUrl : undefined;
            resourceInputs["publicClient"] = args ? args.publicClient : undefined;
            resourceInputs["requiredResourceAccesses"] = args ? args.requiredResourceAccesses : undefined;
            resourceInputs["signInAudience"] = args ? args.signInAudience : undefined;
            resourceInputs["singlePageApplication"] = args ? args.singlePageApplication : undefined;
            resourceInputs["supportUrl"] = args ? args.supportUrl : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["templateId"] = args ? args.templateId : undefined;
            resourceInputs["termsOfServiceUrl"] = args ? args.termsOfServiceUrl : undefined;
            resourceInputs["web"] = args ? args.web : undefined;
            resourceInputs["appRoleIds"] = undefined /*out*/;
            resourceInputs["applicationId"] = undefined /*out*/;
            resourceInputs["disabledByMicrosoft"] = undefined /*out*/;
            resourceInputs["logoUrl"] = undefined /*out*/;
            resourceInputs["oauth2PermissionScopeIds"] = undefined /*out*/;
            resourceInputs["objectId"] = undefined /*out*/;
            resourceInputs["publisherDomain"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Application.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Application(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }
}
exports.Application = Application;
/** @internal */
Application.__pulumiType = 'azuread:index/application:Application';
//# sourceMappingURL=application.js.map