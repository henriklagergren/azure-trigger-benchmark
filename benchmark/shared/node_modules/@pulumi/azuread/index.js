"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.config = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
// Export members:
__exportStar(require("./administrativeUnit"), exports);
__exportStar(require("./administrativeUnitMember"), exports);
__exportStar(require("./appRoleAssignment"), exports);
__exportStar(require("./application"), exports);
__exportStar(require("./applicationCertificate"), exports);
__exportStar(require("./applicationFederatedIdentityCredential"), exports);
__exportStar(require("./applicationPassword"), exports);
__exportStar(require("./applicationPreAuthorized"), exports);
__exportStar(require("./conditionalAccessPolicy"), exports);
__exportStar(require("./customDirectoryRole"), exports);
__exportStar(require("./directoryRole"), exports);
__exportStar(require("./directoryRoleMember"), exports);
__exportStar(require("./getAdministrativeUnit"), exports);
__exportStar(require("./getApplication"), exports);
__exportStar(require("./getApplicationPublishedAppIds"), exports);
__exportStar(require("./getApplicationTemplate"), exports);
__exportStar(require("./getClientConfig"), exports);
__exportStar(require("./getDomains"), exports);
__exportStar(require("./getGroup"), exports);
__exportStar(require("./getGroups"), exports);
__exportStar(require("./getServicePrincipal"), exports);
__exportStar(require("./getServicePrincipals"), exports);
__exportStar(require("./getUser"), exports);
__exportStar(require("./getUsers"), exports);
__exportStar(require("./group"), exports);
__exportStar(require("./groupMember"), exports);
__exportStar(require("./invitation"), exports);
__exportStar(require("./namedLocation"), exports);
__exportStar(require("./provider"), exports);
__exportStar(require("./servicePrincipal"), exports);
__exportStar(require("./servicePrincipalCertificate"), exports);
__exportStar(require("./servicePrincipalDelegatedPermissionGrant"), exports);
__exportStar(require("./servicePrincipalPassword"), exports);
__exportStar(require("./user"), exports);
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
// Import resources to register:
const administrativeUnit_1 = require("./administrativeUnit");
const administrativeUnitMember_1 = require("./administrativeUnitMember");
const appRoleAssignment_1 = require("./appRoleAssignment");
const application_1 = require("./application");
const applicationCertificate_1 = require("./applicationCertificate");
const applicationFederatedIdentityCredential_1 = require("./applicationFederatedIdentityCredential");
const applicationPassword_1 = require("./applicationPassword");
const applicationPreAuthorized_1 = require("./applicationPreAuthorized");
const conditionalAccessPolicy_1 = require("./conditionalAccessPolicy");
const customDirectoryRole_1 = require("./customDirectoryRole");
const directoryRole_1 = require("./directoryRole");
const directoryRoleMember_1 = require("./directoryRoleMember");
const group_1 = require("./group");
const groupMember_1 = require("./groupMember");
const invitation_1 = require("./invitation");
const namedLocation_1 = require("./namedLocation");
const servicePrincipal_1 = require("./servicePrincipal");
const servicePrincipalCertificate_1 = require("./servicePrincipalCertificate");
const servicePrincipalDelegatedPermissionGrant_1 = require("./servicePrincipalDelegatedPermissionGrant");
const servicePrincipalPassword_1 = require("./servicePrincipalPassword");
const user_1 = require("./user");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azuread:index/administrativeUnit:AdministrativeUnit":
                return new administrativeUnit_1.AdministrativeUnit(name, undefined, { urn });
            case "azuread:index/administrativeUnitMember:AdministrativeUnitMember":
                return new administrativeUnitMember_1.AdministrativeUnitMember(name, undefined, { urn });
            case "azuread:index/appRoleAssignment:AppRoleAssignment":
                return new appRoleAssignment_1.AppRoleAssignment(name, undefined, { urn });
            case "azuread:index/application:Application":
                return new application_1.Application(name, undefined, { urn });
            case "azuread:index/applicationCertificate:ApplicationCertificate":
                return new applicationCertificate_1.ApplicationCertificate(name, undefined, { urn });
            case "azuread:index/applicationFederatedIdentityCredential:ApplicationFederatedIdentityCredential":
                return new applicationFederatedIdentityCredential_1.ApplicationFederatedIdentityCredential(name, undefined, { urn });
            case "azuread:index/applicationPassword:ApplicationPassword":
                return new applicationPassword_1.ApplicationPassword(name, undefined, { urn });
            case "azuread:index/applicationPreAuthorized:ApplicationPreAuthorized":
                return new applicationPreAuthorized_1.ApplicationPreAuthorized(name, undefined, { urn });
            case "azuread:index/conditionalAccessPolicy:ConditionalAccessPolicy":
                return new conditionalAccessPolicy_1.ConditionalAccessPolicy(name, undefined, { urn });
            case "azuread:index/customDirectoryRole:CustomDirectoryRole":
                return new customDirectoryRole_1.CustomDirectoryRole(name, undefined, { urn });
            case "azuread:index/directoryRole:DirectoryRole":
                return new directoryRole_1.DirectoryRole(name, undefined, { urn });
            case "azuread:index/directoryRoleMember:DirectoryRoleMember":
                return new directoryRoleMember_1.DirectoryRoleMember(name, undefined, { urn });
            case "azuread:index/group:Group":
                return new group_1.Group(name, undefined, { urn });
            case "azuread:index/groupMember:GroupMember":
                return new groupMember_1.GroupMember(name, undefined, { urn });
            case "azuread:index/invitation:Invitation":
                return new invitation_1.Invitation(name, undefined, { urn });
            case "azuread:index/namedLocation:NamedLocation":
                return new namedLocation_1.NamedLocation(name, undefined, { urn });
            case "azuread:index/servicePrincipal:ServicePrincipal":
                return new servicePrincipal_1.ServicePrincipal(name, undefined, { urn });
            case "azuread:index/servicePrincipalCertificate:ServicePrincipalCertificate":
                return new servicePrincipalCertificate_1.ServicePrincipalCertificate(name, undefined, { urn });
            case "azuread:index/servicePrincipalDelegatedPermissionGrant:ServicePrincipalDelegatedPermissionGrant":
                return new servicePrincipalDelegatedPermissionGrant_1.ServicePrincipalDelegatedPermissionGrant(name, undefined, { urn });
            case "azuread:index/servicePrincipalPassword:ServicePrincipalPassword":
                return new servicePrincipalPassword_1.ServicePrincipalPassword(name, undefined, { urn });
            case "azuread:index/user:User":
                return new user_1.User(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azuread", "index/administrativeUnit", _module);
pulumi.runtime.registerResourceModule("azuread", "index/administrativeUnitMember", _module);
pulumi.runtime.registerResourceModule("azuread", "index/appRoleAssignment", _module);
pulumi.runtime.registerResourceModule("azuread", "index/application", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationCertificate", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationFederatedIdentityCredential", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationPassword", _module);
pulumi.runtime.registerResourceModule("azuread", "index/applicationPreAuthorized", _module);
pulumi.runtime.registerResourceModule("azuread", "index/conditionalAccessPolicy", _module);
pulumi.runtime.registerResourceModule("azuread", "index/customDirectoryRole", _module);
pulumi.runtime.registerResourceModule("azuread", "index/directoryRole", _module);
pulumi.runtime.registerResourceModule("azuread", "index/directoryRoleMember", _module);
pulumi.runtime.registerResourceModule("azuread", "index/group", _module);
pulumi.runtime.registerResourceModule("azuread", "index/groupMember", _module);
pulumi.runtime.registerResourceModule("azuread", "index/invitation", _module);
pulumi.runtime.registerResourceModule("azuread", "index/namedLocation", _module);
pulumi.runtime.registerResourceModule("azuread", "index/servicePrincipal", _module);
pulumi.runtime.registerResourceModule("azuread", "index/servicePrincipalCertificate", _module);
pulumi.runtime.registerResourceModule("azuread", "index/servicePrincipalDelegatedPermissionGrant", _module);
pulumi.runtime.registerResourceModule("azuread", "index/servicePrincipalPassword", _module);
pulumi.runtime.registerResourceModule("azuread", "index/user", _module);
const provider_1 = require("./provider");
pulumi.runtime.registerResourcePackage("azuread", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:azuread") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map