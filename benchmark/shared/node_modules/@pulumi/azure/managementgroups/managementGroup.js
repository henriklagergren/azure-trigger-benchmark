"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagementGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Management Group.
 *
 * !> **Note:** Configuring `subscriptionIds` is not supported when using the `azure.management.GroupSubscriptionAssociation` resource, results will be unpredictable.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getSubscription({});
 * const exampleParent = new azure.management.Group("exampleParent", {
 *     displayName: "ParentGroup",
 *     subscriptionIds: [current.then(current => current.subscriptionId)],
 * });
 * const exampleChild = new azure.management.Group("exampleChild", {
 *     displayName: "ChildGroup",
 *     parentManagementGroupId: exampleParent.id,
 *     subscriptionIds: [current.then(current => current.subscriptionId)],
 * });
 * // other subscription IDs can go here
 * ```
 *
 * ## Import
 *
 * Management Groups can be imported using the `management group resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:managementgroups/managementGroup:ManagementGroup example /providers/Microsoft.Management/managementGroups/group1
 * ```
 *
 * @deprecated azure.managementgroups.ManagementGroup has been deprecated in favor of azure.management.Group
 */
class ManagementGroup extends pulumi.CustomResource {
    /** @deprecated azure.managementgroups.ManagementGroup has been deprecated in favor of azure.management.Group */
    constructor(name, argsOrState, opts) {
        pulumi.log.warn("ManagementGroup is deprecated: azure.managementgroups.ManagementGroup has been deprecated in favor of azure.management.Group");
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["groupId"] = state ? state.groupId : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["parentManagementGroupId"] = state ? state.parentManagementGroupId : undefined;
            inputs["subscriptionIds"] = state ? state.subscriptionIds : undefined;
        }
        else {
            const args = argsOrState;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["groupId"] = args ? args.groupId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["parentManagementGroupId"] = args ? args.parentManagementGroupId : undefined;
            inputs["subscriptionIds"] = args ? args.subscriptionIds : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(ManagementGroup.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ManagementGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        pulumi.log.warn("ManagementGroup is deprecated: azure.managementgroups.ManagementGroup has been deprecated in favor of azure.management.Group");
        return new ManagementGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ManagementGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagementGroup.__pulumiType;
    }
}
exports.ManagementGroup = ManagementGroup;
/** @internal */
ManagementGroup.__pulumiType = 'azure:managementgroups/managementGroup:ManagementGroup';
//# sourceMappingURL=managementGroup.js.map