"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Application = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Virtual Desktop Application.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {location: "West Europe"});
 * const pooledbreadthfirst = new azure.desktopvirtualization.HostPool("pooledbreadthfirst", {
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     type: "Pooled",
 *     loadBalancerType: "BreadthFirst",
 * });
 * const personalautomatic = new azure.desktopvirtualization.HostPool("personalautomatic", {
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     type: "Personal",
 *     personalDesktopAssignmentType: "Automatic",
 * });
 * const remoteapp = new azure.desktopvirtualization.ApplicationGroup("remoteapp", {
 *     location: example.location,
 *     resourceGroupName: example.name,
 *     type: "RemoteApp",
 *     hostPoolId: pooledbreadthfirst.id,
 *     friendlyName: "TestAppGroup",
 *     description: "Acceptance Test: An application group",
 * });
 * const chrome = new azure.desktopvirtualization.Application("chrome", {
 *     applicationGroupId: remoteapp.id,
 *     friendlyName: "Google Chrome",
 *     description: "Chromium based web browser",
 *     path: "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
 *     commandLineArgumentPolicy: "DoNotAllow",
 *     commandLineArguments: "--incognito",
 *     showInPortal: false,
 *     iconPath: "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe",
 *     iconIndex: 0,
 * });
 * ```
 *
 * ## Import
 *
 * Virtual Desktop Application can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:desktopvirtualization/application:Application example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/myapplicationgroup/applications/myapplication
 * ```
 */
class Application extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["applicationGroupId"] = state ? state.applicationGroupId : undefined;
            inputs["commandLineArgumentPolicy"] = state ? state.commandLineArgumentPolicy : undefined;
            inputs["commandLineArguments"] = state ? state.commandLineArguments : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["friendlyName"] = state ? state.friendlyName : undefined;
            inputs["iconIndex"] = state ? state.iconIndex : undefined;
            inputs["iconPath"] = state ? state.iconPath : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["path"] = state ? state.path : undefined;
            inputs["showInPortal"] = state ? state.showInPortal : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.applicationGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'applicationGroupId'");
            }
            if ((!args || args.commandLineArgumentPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commandLineArgumentPolicy'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            inputs["applicationGroupId"] = args ? args.applicationGroupId : undefined;
            inputs["commandLineArgumentPolicy"] = args ? args.commandLineArgumentPolicy : undefined;
            inputs["commandLineArguments"] = args ? args.commandLineArguments : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["friendlyName"] = args ? args.friendlyName : undefined;
            inputs["iconIndex"] = args ? args.iconIndex : undefined;
            inputs["iconPath"] = args ? args.iconPath : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["path"] = args ? args.path : undefined;
            inputs["showInPortal"] = args ? args.showInPortal : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Application.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Application resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Application(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Application.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Application.__pulumiType;
    }
}
exports.Application = Application;
/** @internal */
Application.__pulumiType = 'azure:desktopvirtualization/application:Application';
//# sourceMappingURL=application.js.map