"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./availabilitySet"), exports);
__exportStar(require("./bastionHost"), exports);
__exportStar(require("./configurationPolicyAssignment"), exports);
__exportStar(require("./dataDiskAttachment"), exports);
__exportStar(require("./dedicatedHost"), exports);
__exportStar(require("./dedicatedHostGroup"), exports);
__exportStar(require("./diskAccess"), exports);
__exportStar(require("./diskEncryptionSet"), exports);
__exportStar(require("./diskPool"), exports);
__exportStar(require("./diskPoolManagedDiskAttachment"), exports);
__exportStar(require("./extension"), exports);
__exportStar(require("./getAvailabilitySet"), exports);
__exportStar(require("./getDedicatedHost"), exports);
__exportStar(require("./getDedicatedHostGroup"), exports);
__exportStar(require("./getDiskAccess"), exports);
__exportStar(require("./getDiskEncryptionSet"), exports);
__exportStar(require("./getImage"), exports);
__exportStar(require("./getImages"), exports);
__exportStar(require("./getManagedDisk"), exports);
__exportStar(require("./getPlatformImage"), exports);
__exportStar(require("./getSharedImage"), exports);
__exportStar(require("./getSharedImageGallery"), exports);
__exportStar(require("./getSharedImageVersion"), exports);
__exportStar(require("./getSharedImageVersions"), exports);
__exportStar(require("./getSnapshot"), exports);
__exportStar(require("./getSshPublicKey"), exports);
__exportStar(require("./getVirtualMachine"), exports);
__exportStar(require("./getVirtualMachineScaleSet"), exports);
__exportStar(require("./image"), exports);
__exportStar(require("./linuxVirtualMachine"), exports);
__exportStar(require("./linuxVirtualMachineScaleSet"), exports);
__exportStar(require("./managedDisk"), exports);
__exportStar(require("./orchestratedVirtualMachineScaleSet"), exports);
__exportStar(require("./scaleSet"), exports);
__exportStar(require("./sharedImage"), exports);
__exportStar(require("./sharedImageGallery"), exports);
__exportStar(require("./sharedImageVersion"), exports);
__exportStar(require("./snapshot"), exports);
__exportStar(require("./sshPublicKey"), exports);
__exportStar(require("./virtualMachine"), exports);
__exportStar(require("./virtualMachineScaleSetExtension"), exports);
__exportStar(require("./windowsVirtualMachine"), exports);
__exportStar(require("./windowsVirtualMachineScaleSet"), exports);
// Import resources to register:
const availabilitySet_1 = require("./availabilitySet");
const bastionHost_1 = require("./bastionHost");
const configurationPolicyAssignment_1 = require("./configurationPolicyAssignment");
const dataDiskAttachment_1 = require("./dataDiskAttachment");
const dedicatedHost_1 = require("./dedicatedHost");
const dedicatedHostGroup_1 = require("./dedicatedHostGroup");
const diskAccess_1 = require("./diskAccess");
const diskEncryptionSet_1 = require("./diskEncryptionSet");
const diskPool_1 = require("./diskPool");
const diskPoolManagedDiskAttachment_1 = require("./diskPoolManagedDiskAttachment");
const extension_1 = require("./extension");
const image_1 = require("./image");
const linuxVirtualMachine_1 = require("./linuxVirtualMachine");
const linuxVirtualMachineScaleSet_1 = require("./linuxVirtualMachineScaleSet");
const managedDisk_1 = require("./managedDisk");
const orchestratedVirtualMachineScaleSet_1 = require("./orchestratedVirtualMachineScaleSet");
const scaleSet_1 = require("./scaleSet");
const sharedImage_1 = require("./sharedImage");
const sharedImageGallery_1 = require("./sharedImageGallery");
const sharedImageVersion_1 = require("./sharedImageVersion");
const snapshot_1 = require("./snapshot");
const sshPublicKey_1 = require("./sshPublicKey");
const virtualMachine_1 = require("./virtualMachine");
const virtualMachineScaleSetExtension_1 = require("./virtualMachineScaleSetExtension");
const windowsVirtualMachine_1 = require("./windowsVirtualMachine");
const windowsVirtualMachineScaleSet_1 = require("./windowsVirtualMachineScaleSet");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:compute/availabilitySet:AvailabilitySet":
                return new availabilitySet_1.AvailabilitySet(name, undefined, { urn });
            case "azure:compute/bastionHost:BastionHost":
                return new bastionHost_1.BastionHost(name, undefined, { urn });
            case "azure:compute/configurationPolicyAssignment:ConfigurationPolicyAssignment":
                return new configurationPolicyAssignment_1.ConfigurationPolicyAssignment(name, undefined, { urn });
            case "azure:compute/dataDiskAttachment:DataDiskAttachment":
                return new dataDiskAttachment_1.DataDiskAttachment(name, undefined, { urn });
            case "azure:compute/dedicatedHost:DedicatedHost":
                return new dedicatedHost_1.DedicatedHost(name, undefined, { urn });
            case "azure:compute/dedicatedHostGroup:DedicatedHostGroup":
                return new dedicatedHostGroup_1.DedicatedHostGroup(name, undefined, { urn });
            case "azure:compute/diskAccess:DiskAccess":
                return new diskAccess_1.DiskAccess(name, undefined, { urn });
            case "azure:compute/diskEncryptionSet:DiskEncryptionSet":
                return new diskEncryptionSet_1.DiskEncryptionSet(name, undefined, { urn });
            case "azure:compute/diskPool:DiskPool":
                return new diskPool_1.DiskPool(name, undefined, { urn });
            case "azure:compute/diskPoolManagedDiskAttachment:DiskPoolManagedDiskAttachment":
                return new diskPoolManagedDiskAttachment_1.DiskPoolManagedDiskAttachment(name, undefined, { urn });
            case "azure:compute/extension:Extension":
                return new extension_1.Extension(name, undefined, { urn });
            case "azure:compute/image:Image":
                return new image_1.Image(name, undefined, { urn });
            case "azure:compute/linuxVirtualMachine:LinuxVirtualMachine":
                return new linuxVirtualMachine_1.LinuxVirtualMachine(name, undefined, { urn });
            case "azure:compute/linuxVirtualMachineScaleSet:LinuxVirtualMachineScaleSet":
                return new linuxVirtualMachineScaleSet_1.LinuxVirtualMachineScaleSet(name, undefined, { urn });
            case "azure:compute/managedDisk:ManagedDisk":
                return new managedDisk_1.ManagedDisk(name, undefined, { urn });
            case "azure:compute/orchestratedVirtualMachineScaleSet:OrchestratedVirtualMachineScaleSet":
                return new orchestratedVirtualMachineScaleSet_1.OrchestratedVirtualMachineScaleSet(name, undefined, { urn });
            case "azure:compute/scaleSet:ScaleSet":
                return new scaleSet_1.ScaleSet(name, undefined, { urn });
            case "azure:compute/sharedImage:SharedImage":
                return new sharedImage_1.SharedImage(name, undefined, { urn });
            case "azure:compute/sharedImageGallery:SharedImageGallery":
                return new sharedImageGallery_1.SharedImageGallery(name, undefined, { urn });
            case "azure:compute/sharedImageVersion:SharedImageVersion":
                return new sharedImageVersion_1.SharedImageVersion(name, undefined, { urn });
            case "azure:compute/snapshot:Snapshot":
                return new snapshot_1.Snapshot(name, undefined, { urn });
            case "azure:compute/sshPublicKey:SshPublicKey":
                return new sshPublicKey_1.SshPublicKey(name, undefined, { urn });
            case "azure:compute/virtualMachine:VirtualMachine":
                return new virtualMachine_1.VirtualMachine(name, undefined, { urn });
            case "azure:compute/virtualMachineScaleSetExtension:VirtualMachineScaleSetExtension":
                return new virtualMachineScaleSetExtension_1.VirtualMachineScaleSetExtension(name, undefined, { urn });
            case "azure:compute/windowsVirtualMachine:WindowsVirtualMachine":
                return new windowsVirtualMachine_1.WindowsVirtualMachine(name, undefined, { urn });
            case "azure:compute/windowsVirtualMachineScaleSet:WindowsVirtualMachineScaleSet":
                return new windowsVirtualMachineScaleSet_1.WindowsVirtualMachineScaleSet(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "compute/availabilitySet", _module);
pulumi.runtime.registerResourceModule("azure", "compute/bastionHost", _module);
pulumi.runtime.registerResourceModule("azure", "compute/configurationPolicyAssignment", _module);
pulumi.runtime.registerResourceModule("azure", "compute/dataDiskAttachment", _module);
pulumi.runtime.registerResourceModule("azure", "compute/dedicatedHost", _module);
pulumi.runtime.registerResourceModule("azure", "compute/dedicatedHostGroup", _module);
pulumi.runtime.registerResourceModule("azure", "compute/diskAccess", _module);
pulumi.runtime.registerResourceModule("azure", "compute/diskEncryptionSet", _module);
pulumi.runtime.registerResourceModule("azure", "compute/diskPool", _module);
pulumi.runtime.registerResourceModule("azure", "compute/diskPoolManagedDiskAttachment", _module);
pulumi.runtime.registerResourceModule("azure", "compute/extension", _module);
pulumi.runtime.registerResourceModule("azure", "compute/image", _module);
pulumi.runtime.registerResourceModule("azure", "compute/linuxVirtualMachine", _module);
pulumi.runtime.registerResourceModule("azure", "compute/linuxVirtualMachineScaleSet", _module);
pulumi.runtime.registerResourceModule("azure", "compute/managedDisk", _module);
pulumi.runtime.registerResourceModule("azure", "compute/orchestratedVirtualMachineScaleSet", _module);
pulumi.runtime.registerResourceModule("azure", "compute/scaleSet", _module);
pulumi.runtime.registerResourceModule("azure", "compute/sharedImage", _module);
pulumi.runtime.registerResourceModule("azure", "compute/sharedImageGallery", _module);
pulumi.runtime.registerResourceModule("azure", "compute/sharedImageVersion", _module);
pulumi.runtime.registerResourceModule("azure", "compute/snapshot", _module);
pulumi.runtime.registerResourceModule("azure", "compute/sshPublicKey", _module);
pulumi.runtime.registerResourceModule("azure", "compute/virtualMachine", _module);
pulumi.runtime.registerResourceModule("azure", "compute/virtualMachineScaleSetExtension", _module);
pulumi.runtime.registerResourceModule("azure", "compute/windowsVirtualMachine", _module);
pulumi.runtime.registerResourceModule("azure", "compute/windowsVirtualMachineScaleSet", _module);
//# sourceMappingURL=index.js.map