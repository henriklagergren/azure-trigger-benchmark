"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an API within an API Management Service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleService = new azure.apimanagement.Service("exampleService", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     publisherName: "My Company",
 *     publisherEmail: "company@exmaple.com",
 *     skuName: "Developer_1",
 * });
 * const exampleApi = new azure.apimanagement.Api("exampleApi", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     apiManagementName: exampleService.name,
 *     revision: "1",
 *     displayName: "Example API",
 *     path: "example",
 *     protocols: ["https"],
 *     "import": {
 *         contentFormat: "swagger-link-json",
 *         contentValue: "http://conferenceapi.azurewebsites.net/?format=json",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * API Management API's can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:apimanagement/api:Api example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ApiManagement/service/instance1/apis/api1
 * ```
 */
class Api extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["apiManagementName"] = state ? state.apiManagementName : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["import"] = state ? state.import : undefined;
            inputs["isCurrent"] = state ? state.isCurrent : undefined;
            inputs["isOnline"] = state ? state.isOnline : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["oauth2Authorization"] = state ? state.oauth2Authorization : undefined;
            inputs["openidAuthentication"] = state ? state.openidAuthentication : undefined;
            inputs["path"] = state ? state.path : undefined;
            inputs["protocols"] = state ? state.protocols : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["revision"] = state ? state.revision : undefined;
            inputs["revisionDescription"] = state ? state.revisionDescription : undefined;
            inputs["serviceUrl"] = state ? state.serviceUrl : undefined;
            inputs["soapPassThrough"] = state ? state.soapPassThrough : undefined;
            inputs["sourceApiId"] = state ? state.sourceApiId : undefined;
            inputs["subscriptionKeyParameterNames"] = state ? state.subscriptionKeyParameterNames : undefined;
            inputs["subscriptionRequired"] = state ? state.subscriptionRequired : undefined;
            inputs["version"] = state ? state.version : undefined;
            inputs["versionDescription"] = state ? state.versionDescription : undefined;
            inputs["versionSetId"] = state ? state.versionSetId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.apiManagementName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiManagementName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.revision === undefined) && !opts.urn) {
                throw new Error("Missing required property 'revision'");
            }
            inputs["apiManagementName"] = args ? args.apiManagementName : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["import"] = args ? args.import : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["oauth2Authorization"] = args ? args.oauth2Authorization : undefined;
            inputs["openidAuthentication"] = args ? args.openidAuthentication : undefined;
            inputs["path"] = args ? args.path : undefined;
            inputs["protocols"] = args ? args.protocols : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["revision"] = args ? args.revision : undefined;
            inputs["revisionDescription"] = args ? args.revisionDescription : undefined;
            inputs["serviceUrl"] = args ? args.serviceUrl : undefined;
            inputs["soapPassThrough"] = args ? args.soapPassThrough : undefined;
            inputs["sourceApiId"] = args ? args.sourceApiId : undefined;
            inputs["subscriptionKeyParameterNames"] = args ? args.subscriptionKeyParameterNames : undefined;
            inputs["subscriptionRequired"] = args ? args.subscriptionRequired : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["versionDescription"] = args ? args.versionDescription : undefined;
            inputs["versionSetId"] = args ? args.versionSetId : undefined;
            inputs["isCurrent"] = undefined /*out*/;
            inputs["isOnline"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Api.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Api resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Api(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Api.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Api.__pulumiType;
    }
}
exports.Api = Api;
/** @internal */
Api.__pulumiType = 'azure:apimanagement/api:Api';
//# sourceMappingURL=api.js.map