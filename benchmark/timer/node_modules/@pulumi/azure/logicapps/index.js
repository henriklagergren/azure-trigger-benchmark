"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./actionCustom"), exports);
__exportStar(require("./actionHttp"), exports);
__exportStar(require("./getIntegrationAccount"), exports);
__exportStar(require("./getWorkflow"), exports);
__exportStar(require("./integrationAccount"), exports);
__exportStar(require("./integrationAccountAgreement"), exports);
__exportStar(require("./integrationAccountAssembly"), exports);
__exportStar(require("./integrationAccountBatchConfiguration"), exports);
__exportStar(require("./integrationAccountCertificate"), exports);
__exportStar(require("./integrationAccountMap"), exports);
__exportStar(require("./integrationAccountPartner"), exports);
__exportStar(require("./integrationAccountSchema"), exports);
__exportStar(require("./integrationAccountSession"), exports);
__exportStar(require("./interationServiceEnvironment"), exports);
__exportStar(require("./standard"), exports);
__exportStar(require("./triggerCustom"), exports);
__exportStar(require("./triggerHttpRequest"), exports);
__exportStar(require("./triggerRecurrence"), exports);
__exportStar(require("./workflow"), exports);
// Import resources to register:
const actionCustom_1 = require("./actionCustom");
const actionHttp_1 = require("./actionHttp");
const integrationAccount_1 = require("./integrationAccount");
const integrationAccountAgreement_1 = require("./integrationAccountAgreement");
const integrationAccountAssembly_1 = require("./integrationAccountAssembly");
const integrationAccountBatchConfiguration_1 = require("./integrationAccountBatchConfiguration");
const integrationAccountCertificate_1 = require("./integrationAccountCertificate");
const integrationAccountMap_1 = require("./integrationAccountMap");
const integrationAccountPartner_1 = require("./integrationAccountPartner");
const integrationAccountSchema_1 = require("./integrationAccountSchema");
const integrationAccountSession_1 = require("./integrationAccountSession");
const interationServiceEnvironment_1 = require("./interationServiceEnvironment");
const standard_1 = require("./standard");
const triggerCustom_1 = require("./triggerCustom");
const triggerHttpRequest_1 = require("./triggerHttpRequest");
const triggerRecurrence_1 = require("./triggerRecurrence");
const workflow_1 = require("./workflow");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:logicapps/actionCustom:ActionCustom":
                return new actionCustom_1.ActionCustom(name, undefined, { urn });
            case "azure:logicapps/actionHttp:ActionHttp":
                return new actionHttp_1.ActionHttp(name, undefined, { urn });
            case "azure:logicapps/integrationAccount:IntegrationAccount":
                return new integrationAccount_1.IntegrationAccount(name, undefined, { urn });
            case "azure:logicapps/integrationAccountAgreement:IntegrationAccountAgreement":
                return new integrationAccountAgreement_1.IntegrationAccountAgreement(name, undefined, { urn });
            case "azure:logicapps/integrationAccountAssembly:IntegrationAccountAssembly":
                return new integrationAccountAssembly_1.IntegrationAccountAssembly(name, undefined, { urn });
            case "azure:logicapps/integrationAccountBatchConfiguration:IntegrationAccountBatchConfiguration":
                return new integrationAccountBatchConfiguration_1.IntegrationAccountBatchConfiguration(name, undefined, { urn });
            case "azure:logicapps/integrationAccountCertificate:IntegrationAccountCertificate":
                return new integrationAccountCertificate_1.IntegrationAccountCertificate(name, undefined, { urn });
            case "azure:logicapps/integrationAccountMap:IntegrationAccountMap":
                return new integrationAccountMap_1.IntegrationAccountMap(name, undefined, { urn });
            case "azure:logicapps/integrationAccountPartner:IntegrationAccountPartner":
                return new integrationAccountPartner_1.IntegrationAccountPartner(name, undefined, { urn });
            case "azure:logicapps/integrationAccountSchema:IntegrationAccountSchema":
                return new integrationAccountSchema_1.IntegrationAccountSchema(name, undefined, { urn });
            case "azure:logicapps/integrationAccountSession:IntegrationAccountSession":
                return new integrationAccountSession_1.IntegrationAccountSession(name, undefined, { urn });
            case "azure:logicapps/interationServiceEnvironment:InterationServiceEnvironment":
                return new interationServiceEnvironment_1.InterationServiceEnvironment(name, undefined, { urn });
            case "azure:logicapps/standard:Standard":
                return new standard_1.Standard(name, undefined, { urn });
            case "azure:logicapps/triggerCustom:TriggerCustom":
                return new triggerCustom_1.TriggerCustom(name, undefined, { urn });
            case "azure:logicapps/triggerHttpRequest:TriggerHttpRequest":
                return new triggerHttpRequest_1.TriggerHttpRequest(name, undefined, { urn });
            case "azure:logicapps/triggerRecurrence:TriggerRecurrence":
                return new triggerRecurrence_1.TriggerRecurrence(name, undefined, { urn });
            case "azure:logicapps/workflow:Workflow":
                return new workflow_1.Workflow(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "logicapps/actionCustom", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/actionHttp", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccount", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountAgreement", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountAssembly", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountBatchConfiguration", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountCertificate", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountMap", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountPartner", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountSchema", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/integrationAccountSession", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/interationServiceEnvironment", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/standard", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/triggerCustom", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/triggerHttpRequest", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/triggerRecurrence", _module);
pulumi.runtime.registerResourceModule("azure", "logicapps/workflow", _module);
//# sourceMappingURL=index.js.map