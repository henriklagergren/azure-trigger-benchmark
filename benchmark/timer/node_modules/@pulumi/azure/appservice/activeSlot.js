"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActiveSlot = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Promotes an App Service Slot to Production within an App Service.
 *
 * > **Note:** When using Slots - the `appSettings`, `connectionString` and `siteConfig` blocks on the `azure.appservice.AppService` resource will be overwritten when promoting a Slot using the `azure.appservice.ActiveSlot` resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as random from "@pulumi/random";
 *
 * const server = new random.RandomId("server", {});
 * // ...
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {});
 * // ...
 * const examplePlan = new azure.appservice.Plan("examplePlan", {});
 * // ...
 * const exampleAppService = new azure.appservice.AppService("exampleAppService", {});
 * // ...
 * const exampleSlot = new azure.appservice.Slot("exampleSlot", {});
 * // ...
 * const exampleActiveSlot = new azure.appservice.ActiveSlot("exampleActiveSlot", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     appServiceName: exampleAppService.name,
 *     appServiceSlotName: exampleSlot.name,
 * });
 * ```
 */
class ActiveSlot extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["appServiceName"] = state ? state.appServiceName : undefined;
            inputs["appServiceSlotName"] = state ? state.appServiceSlotName : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.appServiceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appServiceName'");
            }
            if ((!args || args.appServiceSlotName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appServiceSlotName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["appServiceName"] = args ? args.appServiceName : undefined;
            inputs["appServiceSlotName"] = args ? args.appServiceSlotName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(ActiveSlot.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ActiveSlot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ActiveSlot(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ActiveSlot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ActiveSlot.__pulumiType;
    }
}
exports.ActiveSlot = ActiveSlot;
/** @internal */
ActiveSlot.__pulumiType = 'azure:appservice/activeSlot:ActiveSlot';
//# sourceMappingURL=activeSlot.js.map