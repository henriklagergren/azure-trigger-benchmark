"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AadDiagnosticSetting = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Active Directory Diagnostic Setting for Azure Monitor.
 *
 * !> **Authentication** The API for this resource does not support service principal authentication. This resource can only be used with Azure CLI authentication.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "west europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountKind: "StorageV2",
 *     accountReplicationType: "LRS",
 * });
 * const exampleAadDiagnosticSetting = new azure.monitoring.AadDiagnosticSetting("exampleAadDiagnosticSetting", {
 *     storageAccountId: exampleAccount.id,
 *     logs: [
 *         {
 *             category: "SignInLogs",
 *             enabled: true,
 *             retentionPolicy: {
 *                 enabled: true,
 *                 days: 1,
 *             },
 *         },
 *         {
 *             category: "AuditLogs",
 *             enabled: true,
 *             retentionPolicy: {
 *                 enabled: true,
 *                 days: 1,
 *             },
 *         },
 *         {
 *             category: "NonInteractiveUserSignInLogs",
 *             enabled: true,
 *             retentionPolicy: {
 *                 enabled: true,
 *                 days: 1,
 *             },
 *         },
 *         {
 *             category: "ServicePrincipalSignInLogs",
 *             enabled: true,
 *             retentionPolicy: {
 *                 enabled: true,
 *                 days: 1,
 *             },
 *         },
 *         {
 *             category: "ManagedIdentitySignInLogs",
 *             enabled: false,
 *             retentionPolicy: {},
 *         },
 *         {
 *             category: "ProvisioningLogs",
 *             enabled: false,
 *             retentionPolicy: {},
 *         },
 *         {
 *             category: "ADFSSignInLogs",
 *             enabled: false,
 *             retentionPolicy: {},
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Monitor Azure Active Directory Diagnostic Settings can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:monitoring/aadDiagnosticSetting:AadDiagnosticSetting example /providers/Microsoft.AADIAM/diagnosticSettings/setting1
 * ```
 */
class AadDiagnosticSetting extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["eventhubAuthorizationRuleId"] = state ? state.eventhubAuthorizationRuleId : undefined;
            inputs["eventhubName"] = state ? state.eventhubName : undefined;
            inputs["logAnalyticsWorkspaceId"] = state ? state.logAnalyticsWorkspaceId : undefined;
            inputs["logs"] = state ? state.logs : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["storageAccountId"] = state ? state.storageAccountId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.logs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logs'");
            }
            inputs["eventhubAuthorizationRuleId"] = args ? args.eventhubAuthorizationRuleId : undefined;
            inputs["eventhubName"] = args ? args.eventhubName : undefined;
            inputs["logAnalyticsWorkspaceId"] = args ? args.logAnalyticsWorkspaceId : undefined;
            inputs["logs"] = args ? args.logs : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["storageAccountId"] = args ? args.storageAccountId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(AadDiagnosticSetting.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing AadDiagnosticSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AadDiagnosticSetting(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AadDiagnosticSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AadDiagnosticSetting.__pulumiType;
    }
}
exports.AadDiagnosticSetting = AadDiagnosticSetting;
/** @internal */
AadDiagnosticSetting.__pulumiType = 'azure:monitoring/aadDiagnosticSetting:AadDiagnosticSetting';
//# sourceMappingURL=aadDiagnosticSetting.js.map