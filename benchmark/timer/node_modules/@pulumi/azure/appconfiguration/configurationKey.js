"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationKey = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure App Configuration Key.
 *
 * > **Note:** App Configuration Keys are provisioned using a Data Plane API which requires the role `App Configuration Data Owner` on either the App Configuration or a parent scope (such as the Resource Group/Subscription). [More information can be found in the Azure Documentation for App Configuration](https://docs.microsoft.com/azure/azure-app-configuration/concept-enable-rbac#azure-built-in-roles-for-azure-app-configuration).
 *
 * ## Example Usage
 * ### `Kv` Type
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const rg = new azure.core.ResourceGroup("rg", {location: "West Europe"});
 * const appconf = new azure.appconfiguration.ConfigurationStore("appconf", {
 *     resourceGroupName: rg.name,
 *     location: rg.location,
 * });
 * const current = azure.core.getClientConfig({});
 * const appconfDataowner = new azure.authorization.Assignment("appconfDataowner", {
 *     scope: appconf.id,
 *     roleDefinitionName: "App Configuration Data Owner",
 *     principalId: current.then(current => current.objectId),
 * });
 * const test = new azure.appconfiguration.ConfigurationKey("test", {
 *     configurationStoreId: appconf.id,
 *     key: "appConfKey1",
 *     label: "somelabel",
 *     value: "a test",
 * }, {
 *     dependsOn: [appconfDataowner],
 * });
 * ```
 * ### `Vault` Type
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const rg = new azure.core.ResourceGroup("rg", {location: "West Europe"});
 * const appconf = new azure.appconfiguration.ConfigurationStore("appconf", {
 *     resourceGroupName: rg.name,
 *     location: rg.location,
 * });
 * const current = azure.core.getClientConfig({});
 * const kv = new azure.keyvault.KeyVault("kv", {
 *     location: azurerm_resource_group.test.location,
 *     resourceGroupName: azurerm_resource_group.test.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "premium",
 *     softDeleteRetentionDays: 7,
 *     accessPolicies: [{
 *         tenantId: current.then(current => current.tenantId),
 *         objectId: current.then(current => current.objectId),
 *         keyPermissions: [
 *             "create",
 *             "get",
 *         ],
 *         secretPermissions: [
 *             "set",
 *             "get",
 *             "delete",
 *             "purge",
 *             "recover",
 *         ],
 *     }],
 * });
 * const kvs = new azure.keyvault.Secret("kvs", {
 *     value: "szechuan",
 *     keyVaultId: kv.id,
 * });
 * const appconfDataowner = new azure.authorization.Assignment("appconfDataowner", {
 *     scope: appconf.id,
 *     roleDefinitionName: "App Configuration Data Owner",
 *     principalId: current.then(current => current.objectId),
 * });
 * const test = new azure.appconfiguration.ConfigurationKey("test", {
 *     configurationStoreId: azurerm_app_configuration.test.id,
 *     key: "key1",
 *     type: "vault",
 *     label: "label1",
 *     vaultKeyReference: kvs.id,
 * }, {
 *     dependsOn: [appconfDataowner],
 * });
 * ```
 *
 * ## Import
 *
 * App Configuration Keys can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appconfiguration/configurationKey:ConfigurationKey test /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resourceGroup1/providers/Microsoft.AppConfiguration/configurationStores/appConf1/AppConfigurationKey/appConfKey1/Label/label1
 * ```
 *
 *  If you wish to import a key with an empty label then sustitute the label's name with `%00`, like this
 *
 * ```sh
 *  $ pulumi import azure:appconfiguration/configurationKey:ConfigurationKey test /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/resourceGroup1/providers/Microsoft.AppConfiguration/configurationStores/appConf1/AppConfigurationKey/appConfKey1/Label/%00
 * ```
 */
class ConfigurationKey extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["configurationStoreId"] = state ? state.configurationStoreId : undefined;
            inputs["contentType"] = state ? state.contentType : undefined;
            inputs["etag"] = state ? state.etag : undefined;
            inputs["key"] = state ? state.key : undefined;
            inputs["label"] = state ? state.label : undefined;
            inputs["locked"] = state ? state.locked : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["value"] = state ? state.value : undefined;
            inputs["vaultKeyReference"] = state ? state.vaultKeyReference : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.configurationStoreId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationStoreId'");
            }
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            inputs["configurationStoreId"] = args ? args.configurationStoreId : undefined;
            inputs["contentType"] = args ? args.contentType : undefined;
            inputs["etag"] = args ? args.etag : undefined;
            inputs["key"] = args ? args.key : undefined;
            inputs["label"] = args ? args.label : undefined;
            inputs["locked"] = args ? args.locked : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["value"] = args ? args.value : undefined;
            inputs["vaultKeyReference"] = args ? args.vaultKeyReference : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(ConfigurationKey.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ConfigurationKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ConfigurationKey(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ConfigurationKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationKey.__pulumiType;
    }
}
exports.ConfigurationKey = ConfigurationKey;
/** @internal */
ConfigurationKey.__pulumiType = 'azure:appconfiguration/configurationKey:ConfigurationKey';
//# sourceMappingURL=configurationKey.js.map