"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualNetworkPeering = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a virtual network peering which allows resources to access other
 * resources in the linked virtual network.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {location: "West Europe"});
 * const example_1VirtualNetwork = new azure.network.VirtualNetwork("example-1VirtualNetwork", {
 *     resourceGroupName: example.name,
 *     addressSpaces: ["10.0.1.0/24"],
 *     location: "West US",
 * });
 * const example_2VirtualNetwork = new azure.network.VirtualNetwork("example-2VirtualNetwork", {
 *     resourceGroupName: example.name,
 *     addressSpaces: ["10.0.2.0/24"],
 *     location: "West US",
 * });
 * const example_1VirtualNetworkPeering = new azure.network.VirtualNetworkPeering("example-1VirtualNetworkPeering", {
 *     resourceGroupName: example.name,
 *     virtualNetworkName: example_1VirtualNetwork.name,
 *     remoteVirtualNetworkId: example_2VirtualNetwork.id,
 * });
 * const example_2VirtualNetworkPeering = new azure.network.VirtualNetworkPeering("example-2VirtualNetworkPeering", {
 *     resourceGroupName: example.name,
 *     virtualNetworkName: example_2VirtualNetwork.name,
 *     remoteVirtualNetworkId: example_1VirtualNetwork.id,
 * });
 * ```
 * ## Note
 *
 * Virtual Network peerings cannot be created, updated or deleted concurrently.
 *
 * ## Import
 *
 * Virtual Network Peerings can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:network/virtualNetworkPeering:VirtualNetworkPeering examplePeering /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/virtualNetworks/myvnet1/virtualNetworkPeerings/myvnet1peering
 * ```
 */
class VirtualNetworkPeering extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["allowForwardedTraffic"] = state ? state.allowForwardedTraffic : undefined;
            inputs["allowGatewayTransit"] = state ? state.allowGatewayTransit : undefined;
            inputs["allowVirtualNetworkAccess"] = state ? state.allowVirtualNetworkAccess : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["remoteVirtualNetworkId"] = state ? state.remoteVirtualNetworkId : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["useRemoteGateways"] = state ? state.useRemoteGateways : undefined;
            inputs["virtualNetworkName"] = state ? state.virtualNetworkName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.remoteVirtualNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteVirtualNetworkId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.virtualNetworkName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualNetworkName'");
            }
            inputs["allowForwardedTraffic"] = args ? args.allowForwardedTraffic : undefined;
            inputs["allowGatewayTransit"] = args ? args.allowGatewayTransit : undefined;
            inputs["allowVirtualNetworkAccess"] = args ? args.allowVirtualNetworkAccess : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["remoteVirtualNetworkId"] = args ? args.remoteVirtualNetworkId : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["useRemoteGateways"] = args ? args.useRemoteGateways : undefined;
            inputs["virtualNetworkName"] = args ? args.virtualNetworkName : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(VirtualNetworkPeering.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing VirtualNetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VirtualNetworkPeering(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VirtualNetworkPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualNetworkPeering.__pulumiType;
    }
}
exports.VirtualNetworkPeering = VirtualNetworkPeering;
/** @internal */
VirtualNetworkPeering.__pulumiType = 'azure:network/virtualNetworkPeering:VirtualNetworkPeering';
//# sourceMappingURL=virtualNetworkPeering.js.map