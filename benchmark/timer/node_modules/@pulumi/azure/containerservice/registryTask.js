"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegistryTask = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Container Registry Task.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleRegistry = new azure.containerservice.Registry("exampleRegistry", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     sku: "Basic",
 * });
 * const exampleRegistryTask = new azure.containerservice.RegistryTask("exampleRegistryTask", {
 *     containerRegistryId: exampleRegistry.id,
 *     platform: {
 *         os: "Linux",
 *     },
 *     dockerStep: {
 *         dockerfilePath: "Dockerfile",
 *         contextPath: "https://github.com/<user name>/acr-build-helloworld-node#main",
 *         contextAccessToken: "<github personal access token>",
 *         imageNames: ["helloworld:{{.Run.ID}}"],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Container Registry Tasks can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:containerservice/registryTask:RegistryTask example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.ContainerRegistry/registries/registry1/tasks/task1
 * ```
 */
class RegistryTask extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["agentPoolName"] = state ? state.agentPoolName : undefined;
            inputs["agentSetting"] = state ? state.agentSetting : undefined;
            inputs["baseImageTrigger"] = state ? state.baseImageTrigger : undefined;
            inputs["containerRegistryId"] = state ? state.containerRegistryId : undefined;
            inputs["dockerStep"] = state ? state.dockerStep : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["encodedStep"] = state ? state.encodedStep : undefined;
            inputs["fileStep"] = state ? state.fileStep : undefined;
            inputs["identity"] = state ? state.identity : undefined;
            inputs["isSystemTask"] = state ? state.isSystemTask : undefined;
            inputs["logTemplate"] = state ? state.logTemplate : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["platform"] = state ? state.platform : undefined;
            inputs["registryCredential"] = state ? state.registryCredential : undefined;
            inputs["sourceTriggers"] = state ? state.sourceTriggers : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["timeoutInSeconds"] = state ? state.timeoutInSeconds : undefined;
            inputs["timerTriggers"] = state ? state.timerTriggers : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.containerRegistryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerRegistryId'");
            }
            inputs["agentPoolName"] = args ? args.agentPoolName : undefined;
            inputs["agentSetting"] = args ? args.agentSetting : undefined;
            inputs["baseImageTrigger"] = args ? args.baseImageTrigger : undefined;
            inputs["containerRegistryId"] = args ? args.containerRegistryId : undefined;
            inputs["dockerStep"] = args ? args.dockerStep : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["encodedStep"] = args ? args.encodedStep : undefined;
            inputs["fileStep"] = args ? args.fileStep : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["isSystemTask"] = args ? args.isSystemTask : undefined;
            inputs["logTemplate"] = args ? args.logTemplate : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["platform"] = args ? args.platform : undefined;
            inputs["registryCredential"] = args ? args.registryCredential : undefined;
            inputs["sourceTriggers"] = args ? args.sourceTriggers : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["timeoutInSeconds"] = args ? args.timeoutInSeconds : undefined;
            inputs["timerTriggers"] = args ? args.timerTriggers : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(RegistryTask.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing RegistryTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RegistryTask(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RegistryTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RegistryTask.__pulumiType;
    }
}
exports.RegistryTask = RegistryTask;
/** @internal */
RegistryTask.__pulumiType = 'azure:containerservice/registryTask:RegistryTask';
//# sourceMappingURL=registryTask.js.map