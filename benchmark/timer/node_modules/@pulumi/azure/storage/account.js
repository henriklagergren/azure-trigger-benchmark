"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Account = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Storage Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * ```
 * ### With Network Rules
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("exampleVirtualNetwork", {
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * const exampleSubnet = new azure.network.Subnet("exampleSubnet", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 *     serviceEndpoints: [
 *         "Microsoft.Sql",
 *         "Microsoft.Storage",
 *     ],
 * });
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 *     networkRules: {
 *         defaultAction: "Deny",
 *         ipRules: ["100.0.0.1"],
 *         virtualNetworkSubnetIds: [exampleSubnet.id],
 *     },
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Storage Accounts can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:storage/account:Account storageAcc1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Storage/storageAccounts/myaccount
 * ```
 */
class Account extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["accessTier"] = state ? state.accessTier : undefined;
            inputs["accountKind"] = state ? state.accountKind : undefined;
            inputs["accountReplicationType"] = state ? state.accountReplicationType : undefined;
            inputs["accountTier"] = state ? state.accountTier : undefined;
            inputs["allowBlobPublicAccess"] = state ? state.allowBlobPublicAccess : undefined;
            inputs["azureFilesAuthentication"] = state ? state.azureFilesAuthentication : undefined;
            inputs["blobProperties"] = state ? state.blobProperties : undefined;
            inputs["customDomain"] = state ? state.customDomain : undefined;
            inputs["enableHttpsTrafficOnly"] = state ? state.enableHttpsTrafficOnly : undefined;
            inputs["identity"] = state ? state.identity : undefined;
            inputs["infrastructureEncryptionEnabled"] = state ? state.infrastructureEncryptionEnabled : undefined;
            inputs["isHnsEnabled"] = state ? state.isHnsEnabled : undefined;
            inputs["largeFileShareEnabled"] = state ? state.largeFileShareEnabled : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["minTlsVersion"] = state ? state.minTlsVersion : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkRules"] = state ? state.networkRules : undefined;
            inputs["nfsv3Enabled"] = state ? state.nfsv3Enabled : undefined;
            inputs["primaryAccessKey"] = state ? state.primaryAccessKey : undefined;
            inputs["primaryBlobConnectionString"] = state ? state.primaryBlobConnectionString : undefined;
            inputs["primaryBlobEndpoint"] = state ? state.primaryBlobEndpoint : undefined;
            inputs["primaryBlobHost"] = state ? state.primaryBlobHost : undefined;
            inputs["primaryConnectionString"] = state ? state.primaryConnectionString : undefined;
            inputs["primaryDfsEndpoint"] = state ? state.primaryDfsEndpoint : undefined;
            inputs["primaryDfsHost"] = state ? state.primaryDfsHost : undefined;
            inputs["primaryFileEndpoint"] = state ? state.primaryFileEndpoint : undefined;
            inputs["primaryFileHost"] = state ? state.primaryFileHost : undefined;
            inputs["primaryLocation"] = state ? state.primaryLocation : undefined;
            inputs["primaryQueueEndpoint"] = state ? state.primaryQueueEndpoint : undefined;
            inputs["primaryQueueHost"] = state ? state.primaryQueueHost : undefined;
            inputs["primaryTableEndpoint"] = state ? state.primaryTableEndpoint : undefined;
            inputs["primaryTableHost"] = state ? state.primaryTableHost : undefined;
            inputs["primaryWebEndpoint"] = state ? state.primaryWebEndpoint : undefined;
            inputs["primaryWebHost"] = state ? state.primaryWebHost : undefined;
            inputs["queueEncryptionKeyType"] = state ? state.queueEncryptionKeyType : undefined;
            inputs["queueProperties"] = state ? state.queueProperties : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["routing"] = state ? state.routing : undefined;
            inputs["secondaryAccessKey"] = state ? state.secondaryAccessKey : undefined;
            inputs["secondaryBlobConnectionString"] = state ? state.secondaryBlobConnectionString : undefined;
            inputs["secondaryBlobEndpoint"] = state ? state.secondaryBlobEndpoint : undefined;
            inputs["secondaryBlobHost"] = state ? state.secondaryBlobHost : undefined;
            inputs["secondaryConnectionString"] = state ? state.secondaryConnectionString : undefined;
            inputs["secondaryDfsEndpoint"] = state ? state.secondaryDfsEndpoint : undefined;
            inputs["secondaryDfsHost"] = state ? state.secondaryDfsHost : undefined;
            inputs["secondaryFileEndpoint"] = state ? state.secondaryFileEndpoint : undefined;
            inputs["secondaryFileHost"] = state ? state.secondaryFileHost : undefined;
            inputs["secondaryLocation"] = state ? state.secondaryLocation : undefined;
            inputs["secondaryQueueEndpoint"] = state ? state.secondaryQueueEndpoint : undefined;
            inputs["secondaryQueueHost"] = state ? state.secondaryQueueHost : undefined;
            inputs["secondaryTableEndpoint"] = state ? state.secondaryTableEndpoint : undefined;
            inputs["secondaryTableHost"] = state ? state.secondaryTableHost : undefined;
            inputs["secondaryWebEndpoint"] = state ? state.secondaryWebEndpoint : undefined;
            inputs["secondaryWebHost"] = state ? state.secondaryWebHost : undefined;
            inputs["shareProperties"] = state ? state.shareProperties : undefined;
            inputs["sharedAccessKeyEnabled"] = state ? state.sharedAccessKeyEnabled : undefined;
            inputs["staticWebsite"] = state ? state.staticWebsite : undefined;
            inputs["tableEncryptionKeyType"] = state ? state.tableEncryptionKeyType : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountReplicationType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountReplicationType'");
            }
            if ((!args || args.accountTier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountTier'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["accessTier"] = args ? args.accessTier : undefined;
            inputs["accountKind"] = args ? args.accountKind : undefined;
            inputs["accountReplicationType"] = args ? args.accountReplicationType : undefined;
            inputs["accountTier"] = args ? args.accountTier : undefined;
            inputs["allowBlobPublicAccess"] = args ? args.allowBlobPublicAccess : undefined;
            inputs["azureFilesAuthentication"] = args ? args.azureFilesAuthentication : undefined;
            inputs["blobProperties"] = args ? args.blobProperties : undefined;
            inputs["customDomain"] = args ? args.customDomain : undefined;
            inputs["enableHttpsTrafficOnly"] = args ? args.enableHttpsTrafficOnly : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["infrastructureEncryptionEnabled"] = args ? args.infrastructureEncryptionEnabled : undefined;
            inputs["isHnsEnabled"] = args ? args.isHnsEnabled : undefined;
            inputs["largeFileShareEnabled"] = args ? args.largeFileShareEnabled : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["minTlsVersion"] = args ? args.minTlsVersion : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkRules"] = args ? args.networkRules : undefined;
            inputs["nfsv3Enabled"] = args ? args.nfsv3Enabled : undefined;
            inputs["queueEncryptionKeyType"] = args ? args.queueEncryptionKeyType : undefined;
            inputs["queueProperties"] = args ? args.queueProperties : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["routing"] = args ? args.routing : undefined;
            inputs["shareProperties"] = args ? args.shareProperties : undefined;
            inputs["sharedAccessKeyEnabled"] = args ? args.sharedAccessKeyEnabled : undefined;
            inputs["staticWebsite"] = args ? args.staticWebsite : undefined;
            inputs["tableEncryptionKeyType"] = args ? args.tableEncryptionKeyType : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["primaryAccessKey"] = undefined /*out*/;
            inputs["primaryBlobConnectionString"] = undefined /*out*/;
            inputs["primaryBlobEndpoint"] = undefined /*out*/;
            inputs["primaryBlobHost"] = undefined /*out*/;
            inputs["primaryConnectionString"] = undefined /*out*/;
            inputs["primaryDfsEndpoint"] = undefined /*out*/;
            inputs["primaryDfsHost"] = undefined /*out*/;
            inputs["primaryFileEndpoint"] = undefined /*out*/;
            inputs["primaryFileHost"] = undefined /*out*/;
            inputs["primaryLocation"] = undefined /*out*/;
            inputs["primaryQueueEndpoint"] = undefined /*out*/;
            inputs["primaryQueueHost"] = undefined /*out*/;
            inputs["primaryTableEndpoint"] = undefined /*out*/;
            inputs["primaryTableHost"] = undefined /*out*/;
            inputs["primaryWebEndpoint"] = undefined /*out*/;
            inputs["primaryWebHost"] = undefined /*out*/;
            inputs["secondaryAccessKey"] = undefined /*out*/;
            inputs["secondaryBlobConnectionString"] = undefined /*out*/;
            inputs["secondaryBlobEndpoint"] = undefined /*out*/;
            inputs["secondaryBlobHost"] = undefined /*out*/;
            inputs["secondaryConnectionString"] = undefined /*out*/;
            inputs["secondaryDfsEndpoint"] = undefined /*out*/;
            inputs["secondaryDfsHost"] = undefined /*out*/;
            inputs["secondaryFileEndpoint"] = undefined /*out*/;
            inputs["secondaryFileHost"] = undefined /*out*/;
            inputs["secondaryLocation"] = undefined /*out*/;
            inputs["secondaryQueueEndpoint"] = undefined /*out*/;
            inputs["secondaryQueueHost"] = undefined /*out*/;
            inputs["secondaryTableEndpoint"] = undefined /*out*/;
            inputs["secondaryTableHost"] = undefined /*out*/;
            inputs["secondaryWebEndpoint"] = undefined /*out*/;
            inputs["secondaryWebHost"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Account.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Account resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Account(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Account.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Account.__pulumiType;
    }
}
exports.Account = Account;
/** @internal */
Account.__pulumiType = 'azure:storage/account:Account';
//# sourceMappingURL=account.js.map