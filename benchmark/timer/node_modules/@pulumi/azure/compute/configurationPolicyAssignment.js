"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigurationPolicyAssignment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * > **NOTE:** This resource has been deprecated in favour of the `azure.policy.VirtualMachineConfigurationAssignment` resource and will be removed in the next major version of the AzureRM Provider. The new resource shares the same fields as this one, information on migrating can be found in this guide.
 *
 * Applies a Configuration Policy to a Virtual Machine.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleVirtualNetwork = new azure.network.VirtualNetwork("exampleVirtualNetwork", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     addressSpaces: ["10.0.0.0/16"],
 * });
 * const exampleSubnet = new azure.network.Subnet("exampleSubnet", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     virtualNetworkName: exampleVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const exampleNetworkInterface = new azure.network.NetworkInterface("exampleNetworkInterface", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     ipConfigurations: [{
 *         name: "internal",
 *         subnetId: exampleSubnet.id,
 *         privateIpAddressAllocation: "Dynamic",
 *     }],
 * });
 * const exampleWindowsVirtualMachine = new azure.compute.WindowsVirtualMachine("exampleWindowsVirtualMachine", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     size: "Standard_F2",
 *     adminUsername: "adminuser",
 *     adminPassword: `P@$$w0rd1234!`,
 *     networkInterfaceIds: [exampleNetworkInterface.id],
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 *     osDisk: {
 *         caching: "ReadWrite",
 *         storageAccountType: "Standard_LRS",
 *     },
 *     sourceImageReference: {
 *         publisher: "MicrosoftWindowsServer",
 *         offer: "WindowsServer",
 *         sku: "2019-Datacenter",
 *         version: "latest",
 *     },
 * });
 * const exampleExtension = new azure.compute.Extension("exampleExtension", {
 *     virtualMachineId: exampleWindowsVirtualMachine.id,
 *     publisher: "Microsoft.GuestConfiguration",
 *     type: "ConfigurationforWindows",
 *     typeHandlerVersion: "1.0",
 *     autoUpgradeMinorVersion: "true",
 * });
 * const exampleConfigurationPolicyAssignment = new azure.compute.ConfigurationPolicyAssignment("exampleConfigurationPolicyAssignment", {
 *     location: exampleWindowsVirtualMachine.location,
 *     virtualMachineId: exampleWindowsVirtualMachine.id,
 *     configuration: {
 *         name: "AzureWindowsBaseline",
 *         version: "1.*",
 *         parameters: [
 *             {
 *                 name: "Minimum Password Length;ExpectedValue",
 *                 value: "16",
 *             },
 *             {
 *                 name: "Minimum Password Age;ExpectedValue",
 *                 value: "0",
 *             },
 *             {
 *                 name: "Maximum Password Age;ExpectedValue",
 *                 value: "30,45",
 *             },
 *             {
 *                 name: "Enforce Password History;ExpectedValue",
 *                 value: "10",
 *             },
 *             {
 *                 name: "Password Must Meet Complexity Requirements;ExpectedValue",
 *                 value: "1",
 *             },
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Virtual Machine Configuration Policy Assignments can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:compute/configurationPolicyAssignment:ConfigurationPolicyAssignment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.GuestConfiguration/guestConfigurationAssignments/assignment1
 * ```
 */
class ConfigurationPolicyAssignment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["configuration"] = state ? state.configuration : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["virtualMachineId"] = state ? state.virtualMachineId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.configuration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configuration'");
            }
            if ((!args || args.virtualMachineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineId'");
            }
            inputs["configuration"] = args ? args.configuration : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["virtualMachineId"] = args ? args.virtualMachineId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(ConfigurationPolicyAssignment.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ConfigurationPolicyAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ConfigurationPolicyAssignment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ConfigurationPolicyAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConfigurationPolicyAssignment.__pulumiType;
    }
}
exports.ConfigurationPolicyAssignment = ConfigurationPolicyAssignment;
/** @internal */
ConfigurationPolicyAssignment.__pulumiType = 'azure:compute/configurationPolicyAssignment:ConfigurationPolicyAssignment';
//# sourceMappingURL=configurationPolicyAssignment.js.map