"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Service = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure SignalR service.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West US"});
 * const exampleService = new azure.signalr.Service("exampleService", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     sku: {
 *         name: "Free_F1",
 *         capacity: 1,
 *     },
 *     cors: [{
 *         allowedOrigins: ["http://www.example.com"],
 *     }],
 *     connectivityLogsEnabled: "True",
 *     messagingLogsEnabled: "True",
 *     serviceMode: "Default",
 *     upstreamEndpoints: [{
 *         categoryPatterns: [
 *             "connections",
 *             "messages",
 *         ],
 *         eventPatterns: ["*"],
 *         hubPatterns: ["hub1"],
 *         urlTemplate: "http://foo.com",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * SignalR services can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:signalr/service:Service example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/terraform-signalr/providers/Microsoft.SignalRService/signalR/tfex-signalr
 * ```
 */
class Service extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["connectivityLogsEnabled"] = state ? state.connectivityLogsEnabled : undefined;
            inputs["cors"] = state ? state.cors : undefined;
            inputs["features"] = state ? state.features : undefined;
            inputs["hostname"] = state ? state.hostname : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["liveTraceEnabled"] = state ? state.liveTraceEnabled : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["messagingLogsEnabled"] = state ? state.messagingLogsEnabled : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["primaryAccessKey"] = state ? state.primaryAccessKey : undefined;
            inputs["primaryConnectionString"] = state ? state.primaryConnectionString : undefined;
            inputs["publicPort"] = state ? state.publicPort : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["secondaryAccessKey"] = state ? state.secondaryAccessKey : undefined;
            inputs["secondaryConnectionString"] = state ? state.secondaryConnectionString : undefined;
            inputs["serverPort"] = state ? state.serverPort : undefined;
            inputs["serviceMode"] = state ? state.serviceMode : undefined;
            inputs["sku"] = state ? state.sku : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["upstreamEndpoints"] = state ? state.upstreamEndpoints : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            inputs["connectivityLogsEnabled"] = args ? args.connectivityLogsEnabled : undefined;
            inputs["cors"] = args ? args.cors : undefined;
            inputs["features"] = args ? args.features : undefined;
            inputs["liveTraceEnabled"] = args ? args.liveTraceEnabled : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["messagingLogsEnabled"] = args ? args.messagingLogsEnabled : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["serviceMode"] = args ? args.serviceMode : undefined;
            inputs["sku"] = args ? args.sku : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["upstreamEndpoints"] = args ? args.upstreamEndpoints : undefined;
            inputs["hostname"] = undefined /*out*/;
            inputs["ipAddress"] = undefined /*out*/;
            inputs["primaryAccessKey"] = undefined /*out*/;
            inputs["primaryConnectionString"] = undefined /*out*/;
            inputs["publicPort"] = undefined /*out*/;
            inputs["secondaryAccessKey"] = undefined /*out*/;
            inputs["secondaryConnectionString"] = undefined /*out*/;
            inputs["serverPort"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Service.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Service(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }
}
exports.Service = Service;
/** @internal */
Service.__pulumiType = 'azure:signalr/service:Service';
//# sourceMappingURL=service.js.map