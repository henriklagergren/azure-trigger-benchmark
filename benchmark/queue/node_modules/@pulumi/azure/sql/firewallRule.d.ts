import * as pulumi from "@pulumi/pulumi";
/**
 * Allows you to manage an Azure SQL Firewall Rule
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleSqlServer = new azure.sql.SqlServer("exampleSqlServer", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: "West US",
 *     version: "12.0",
 *     administratorLogin: "4dm1n157r470r",
 *     administratorLoginPassword: "4-v3ry-53cr37-p455w0rd",
 * });
 * const exampleFirewallRule = new azure.sql.FirewallRule("exampleFirewallRule", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     serverName: exampleSqlServer.name,
 *     startIpAddress: "10.0.17.62",
 *     endIpAddress: "10.0.17.62",
 * });
 * ```
 *
 * ## Import
 *
 * SQL Firewall Rules can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:sql/firewallRule:FirewallRule rule1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/servers/myserver/firewallRules/rule1
 * ```
 */
export declare class FirewallRule extends pulumi.CustomResource {
    /**
     * Get an existing FirewallRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FirewallRuleState, opts?: pulumi.CustomResourceOptions): FirewallRule;
    /**
     * Returns true if the given object is an instance of FirewallRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is FirewallRule;
    /**
     * The ending IP address to allow through the firewall for this rule.
     */
    readonly endIpAddress: pulumi.Output<string>;
    /**
     * The name of the firewall rule.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The name of the resource group in which to
     * create the sql server.
     */
    readonly resourceGroupName: pulumi.Output<string>;
    /**
     * The name of the SQL Server on which to create the Firewall Rule.
     */
    readonly serverName: pulumi.Output<string>;
    /**
     * The starting IP address to allow through the firewall for this rule.
     */
    readonly startIpAddress: pulumi.Output<string>;
    /**
     * Create a FirewallRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FirewallRuleArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering FirewallRule resources.
 */
export interface FirewallRuleState {
    /**
     * The ending IP address to allow through the firewall for this rule.
     */
    endIpAddress?: pulumi.Input<string>;
    /**
     * The name of the firewall rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to
     * create the sql server.
     */
    resourceGroupName?: pulumi.Input<string>;
    /**
     * The name of the SQL Server on which to create the Firewall Rule.
     */
    serverName?: pulumi.Input<string>;
    /**
     * The starting IP address to allow through the firewall for this rule.
     */
    startIpAddress?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a FirewallRule resource.
 */
export interface FirewallRuleArgs {
    /**
     * The ending IP address to allow through the firewall for this rule.
     */
    endIpAddress: pulumi.Input<string>;
    /**
     * The name of the firewall rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the resource group in which to
     * create the sql server.
     */
    resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the SQL Server on which to create the Firewall Rule.
     */
    serverName: pulumi.Input<string>;
    /**
     * The starting IP address to allow through the firewall for this rule.
     */
    startIpAddress: pulumi.Input<string>;
}
