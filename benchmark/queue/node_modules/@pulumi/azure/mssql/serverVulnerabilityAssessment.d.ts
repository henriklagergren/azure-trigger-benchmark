import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Manages the Vulnerability Assessment for a MS SQL Server.
 *
 * > **NOTE** Vulnerability Assessment is currently only available for MS SQL databases.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleSqlServer = new azure.sql.SqlServer("exampleSqlServer", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     version: "12.0",
 *     administratorLogin: "4dm1n157r470r",
 *     administratorLoginPassword: "4-v3ry-53cr37-p455w0rd",
 * });
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "GRS",
 * });
 * const exampleContainer = new azure.storage.Container("exampleContainer", {
 *     storageAccountName: exampleAccount.name,
 *     containerAccessType: "private",
 * });
 * const exampleServerSecurityAlertPolicy = new azure.mssql.ServerSecurityAlertPolicy("exampleServerSecurityAlertPolicy", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     serverName: exampleSqlServer.name,
 *     state: "Enabled",
 * });
 * const exampleServerVulnerabilityAssessment = new azure.mssql.ServerVulnerabilityAssessment("exampleServerVulnerabilityAssessment", {
 *     serverSecurityAlertPolicyId: exampleServerSecurityAlertPolicy.id,
 *     storageContainerPath: pulumi.interpolate`${exampleAccount.primaryBlobEndpoint}${exampleContainer.name}/`,
 *     storageAccountAccessKey: exampleAccount.primaryAccessKey,
 *     recurringScans: {
 *         enabled: true,
 *         emailSubscriptionAdmins: true,
 *         emails: [
 *             "email@example1.com",
 *             "email@example2.com",
 *         ],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * MS SQL Server Vulnerability Assessment can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:mssql/serverVulnerabilityAssessment:ServerVulnerabilityAssessment example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/acceptanceTestResourceGroup1/providers/Microsoft.Sql/servers/mssqlserver/vulnerabilityAssessments/Default
 * ```
 */
export declare class ServerVulnerabilityAssessment extends pulumi.CustomResource {
    /**
     * Get an existing ServerVulnerabilityAssessment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerVulnerabilityAssessmentState, opts?: pulumi.CustomResourceOptions): ServerVulnerabilityAssessment;
    /**
     * Returns true if the given object is an instance of ServerVulnerabilityAssessment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ServerVulnerabilityAssessment;
    /**
     * The recurring scans settings. The `recurringScans` block supports fields documented below.
     */
    readonly recurringScans: pulumi.Output<outputs.mssql.ServerVulnerabilityAssessmentRecurringScans>;
    /**
     * The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
     */
    readonly serverSecurityAlertPolicyId: pulumi.Output<string>;
    /**
     * Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
     */
    readonly storageAccountAccessKey: pulumi.Output<string | undefined>;
    /**
     * A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
     */
    readonly storageContainerPath: pulumi.Output<string>;
    /**
     * A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
     */
    readonly storageContainerSasKey: pulumi.Output<string | undefined>;
    /**
     * Create a ServerVulnerabilityAssessment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerVulnerabilityAssessmentArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ServerVulnerabilityAssessment resources.
 */
export interface ServerVulnerabilityAssessmentState {
    /**
     * The recurring scans settings. The `recurringScans` block supports fields documented below.
     */
    recurringScans?: pulumi.Input<inputs.mssql.ServerVulnerabilityAssessmentRecurringScans>;
    /**
     * The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
     */
    serverSecurityAlertPolicyId?: pulumi.Input<string>;
    /**
     * Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
     */
    storageAccountAccessKey?: pulumi.Input<string>;
    /**
     * A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
     */
    storageContainerPath?: pulumi.Input<string>;
    /**
     * A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
     */
    storageContainerSasKey?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a ServerVulnerabilityAssessment resource.
 */
export interface ServerVulnerabilityAssessmentArgs {
    /**
     * The recurring scans settings. The `recurringScans` block supports fields documented below.
     */
    recurringScans?: pulumi.Input<inputs.mssql.ServerVulnerabilityAssessmentRecurringScans>;
    /**
     * The id of the security alert policy of the MS SQL Server. Changing this forces a new resource to be created.
     */
    serverSecurityAlertPolicyId: pulumi.Input<string>;
    /**
     * Specifies the identifier key of the storage account for vulnerability assessment scan results. If `storageContainerSasKey` isn't specified, `storageAccountAccessKey` is required.
     */
    storageAccountAccessKey?: pulumi.Input<string>;
    /**
     * A blob storage container path to hold the scan results (e.g. https://myStorage.blob.core.windows.net/VaScans/).
     */
    storageContainerPath: pulumi.Input<string>;
    /**
     * A shared access signature (SAS Key) that has write access to the blob container specified in `storageContainerPath` parameter. If `storageAccountAccessKey` isn't specified, `storageContainerSasKey` is required.
     */
    storageContainerSasKey?: pulumi.Input<string>;
}
