"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GatewayApi = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a API Management Gateway API.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleService = azure.apimanagement.getService({
 *     name: "example-api",
 *     resourceGroupName: "example-resources",
 * });
 * const exampleApi = Promise.all([exampleService, exampleService]).then(([exampleService, exampleService1]) => azure.apimanagement.getApi({
 *     name: "search-api",
 *     apiManagementName: exampleService.name,
 *     resourceGroupName: exampleService1.resourceGroupName,
 *     revision: "2",
 * }));
 * const exampleGateway = azure.apimanagement.getGateway({
 *     gatewayId: "my-gateway",
 *     apiManagementName: exampleService.then(exampleService => exampleService.name),
 *     resourceGroupName: exampleService.then(exampleService => exampleService.resourceGroupName),
 * });
 * const exampleGatewayApi = new azure.apimanagement.GatewayApi("exampleGatewayApi", {
 *     gatewayId: exampleGateway.then(exampleGateway => exampleGateway.id),
 *     apiId: exampleApi.then(exampleApi => exampleApi.id),
 * });
 * ```
 *
 * ## Import
 *
 * API Management Gateway APIs can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:apimanagement/gatewayApi:GatewayApi example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resGroup1/providers/Microsoft.ApiManagement/service/service1/gateways/gateway1/apis/api1
 * ```
 */
class GatewayApi extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["apiId"] = state ? state.apiId : undefined;
            inputs["gatewayId"] = state ? state.gatewayId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.gatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            inputs["apiId"] = args ? args.apiId : undefined;
            inputs["gatewayId"] = args ? args.gatewayId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(GatewayApi.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing GatewayApi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GatewayApi(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GatewayApi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayApi.__pulumiType;
    }
}
exports.GatewayApi = GatewayApi;
/** @internal */
GatewayApi.__pulumiType = 'azure:apimanagement/gatewayApi:GatewayApi';
//# sourceMappingURL=gatewayApi.js.map