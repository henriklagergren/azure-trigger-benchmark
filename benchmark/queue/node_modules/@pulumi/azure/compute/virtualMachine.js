"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualMachine = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Virtual Machine.
 *
 * ## Disclaimers
 *
 * > **Note:** The `azure.compute.VirtualMachine` resource has been superseded by the `azure.compute.LinuxVirtualMachine` and `azure.compute.WindowsVirtualMachine` resources. The existing `azure.compute.VirtualMachine` resource will continue to be available throughout the 2.x releases however is in a feature-frozen state to maintain compatibility - new functionality will instead be added to the `azure.compute.LinuxVirtualMachine` and `azure.compute.WindowsVirtualMachine` resources.
 *
 * > **Note:** Data Disks can be attached either directly on the `azure.compute.VirtualMachine` resource, or using the `azure.compute.DataDiskAttachment` resource - but the two cannot be used together. If both are used against the same Virtual Machine, spurious changes will occur.
 *
 * ## Example Usage
 * ### From An Azure Platform Image)
 *
 * This example provisions a Virtual Machine with Managed Disks.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const config = new pulumi.Config();
 * const prefix = config.get("prefix") || "tfvmex";
 * const mainResourceGroup = new azure.core.ResourceGroup("mainResourceGroup", {location: "West Europe"});
 * const mainVirtualNetwork = new azure.network.VirtualNetwork("mainVirtualNetwork", {
 *     addressSpaces: ["10.0.0.0/16"],
 *     location: mainResourceGroup.location,
 *     resourceGroupName: mainResourceGroup.name,
 * });
 * const internal = new azure.network.Subnet("internal", {
 *     resourceGroupName: mainResourceGroup.name,
 *     virtualNetworkName: mainVirtualNetwork.name,
 *     addressPrefixes: ["10.0.2.0/24"],
 * });
 * const mainNetworkInterface = new azure.network.NetworkInterface("mainNetworkInterface", {
 *     location: mainResourceGroup.location,
 *     resourceGroupName: mainResourceGroup.name,
 *     ipConfigurations: [{
 *         name: "testconfiguration1",
 *         subnetId: internal.id,
 *         privateIpAddressAllocation: "Dynamic",
 *     }],
 * });
 * const mainVirtualMachine = new azure.compute.VirtualMachine("mainVirtualMachine", {
 *     location: mainResourceGroup.location,
 *     resourceGroupName: mainResourceGroup.name,
 *     networkInterfaceIds: [mainNetworkInterface.id],
 *     vmSize: "Standard_DS1_v2",
 *     storageImageReference: {
 *         publisher: "Canonical",
 *         offer: "UbuntuServer",
 *         sku: "16.04-LTS",
 *         version: "latest",
 *     },
 *     storageOsDisk: {
 *         name: "myosdisk1",
 *         caching: "ReadWrite",
 *         createOption: "FromImage",
 *         managedDiskType: "Standard_LRS",
 *     },
 *     osProfile: {
 *         computerName: "hostname",
 *         adminUsername: "testadmin",
 *         adminPassword: "Password1234!",
 *     },
 *     osProfileLinuxConfig: {
 *         disablePasswordAuthentication: false,
 *     },
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Virtual Machines can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:compute/virtualMachine:VirtualMachine example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Compute/virtualMachines/machine1
 * ```
 */
class VirtualMachine extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["additionalCapabilities"] = state ? state.additionalCapabilities : undefined;
            inputs["availabilitySetId"] = state ? state.availabilitySetId : undefined;
            inputs["bootDiagnostics"] = state ? state.bootDiagnostics : undefined;
            inputs["deleteDataDisksOnTermination"] = state ? state.deleteDataDisksOnTermination : undefined;
            inputs["deleteOsDiskOnTermination"] = state ? state.deleteOsDiskOnTermination : undefined;
            inputs["identity"] = state ? state.identity : undefined;
            inputs["licenseType"] = state ? state.licenseType : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkInterfaceIds"] = state ? state.networkInterfaceIds : undefined;
            inputs["osProfile"] = state ? state.osProfile : undefined;
            inputs["osProfileLinuxConfig"] = state ? state.osProfileLinuxConfig : undefined;
            inputs["osProfileSecrets"] = state ? state.osProfileSecrets : undefined;
            inputs["osProfileWindowsConfig"] = state ? state.osProfileWindowsConfig : undefined;
            inputs["plan"] = state ? state.plan : undefined;
            inputs["primaryNetworkInterfaceId"] = state ? state.primaryNetworkInterfaceId : undefined;
            inputs["proximityPlacementGroupId"] = state ? state.proximityPlacementGroupId : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["storageDataDisks"] = state ? state.storageDataDisks : undefined;
            inputs["storageImageReference"] = state ? state.storageImageReference : undefined;
            inputs["storageOsDisk"] = state ? state.storageOsDisk : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["vmSize"] = state ? state.vmSize : undefined;
            inputs["zones"] = state ? state.zones : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.networkInterfaceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceIds'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.storageOsDisk === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageOsDisk'");
            }
            if ((!args || args.vmSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmSize'");
            }
            inputs["additionalCapabilities"] = args ? args.additionalCapabilities : undefined;
            inputs["availabilitySetId"] = args ? args.availabilitySetId : undefined;
            inputs["bootDiagnostics"] = args ? args.bootDiagnostics : undefined;
            inputs["deleteDataDisksOnTermination"] = args ? args.deleteDataDisksOnTermination : undefined;
            inputs["deleteOsDiskOnTermination"] = args ? args.deleteOsDiskOnTermination : undefined;
            inputs["identity"] = args ? args.identity : undefined;
            inputs["licenseType"] = args ? args.licenseType : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkInterfaceIds"] = args ? args.networkInterfaceIds : undefined;
            inputs["osProfile"] = args ? args.osProfile : undefined;
            inputs["osProfileLinuxConfig"] = args ? args.osProfileLinuxConfig : undefined;
            inputs["osProfileSecrets"] = args ? args.osProfileSecrets : undefined;
            inputs["osProfileWindowsConfig"] = args ? args.osProfileWindowsConfig : undefined;
            inputs["plan"] = args ? args.plan : undefined;
            inputs["primaryNetworkInterfaceId"] = args ? args.primaryNetworkInterfaceId : undefined;
            inputs["proximityPlacementGroupId"] = args ? args.proximityPlacementGroupId : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["storageDataDisks"] = args ? args.storageDataDisks : undefined;
            inputs["storageImageReference"] = args ? args.storageImageReference : undefined;
            inputs["storageOsDisk"] = args ? args.storageOsDisk : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vmSize"] = args ? args.vmSize : undefined;
            inputs["zones"] = args ? args.zones : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(VirtualMachine.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VirtualMachine(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachine.__pulumiType;
    }
}
exports.VirtualMachine = VirtualMachine;
/** @internal */
VirtualMachine.__pulumiType = 'azure:compute/virtualMachine:VirtualMachine';
//# sourceMappingURL=virtualMachine.js.map