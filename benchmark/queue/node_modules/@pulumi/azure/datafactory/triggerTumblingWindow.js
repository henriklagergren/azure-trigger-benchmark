"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TriggerTumblingWindow = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
class TriggerTumblingWindow extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["activated"] = state ? state.activated : undefined;
            inputs["additionalProperties"] = state ? state.additionalProperties : undefined;
            inputs["annotations"] = state ? state.annotations : undefined;
            inputs["dataFactoryId"] = state ? state.dataFactoryId : undefined;
            inputs["delay"] = state ? state.delay : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["endTime"] = state ? state.endTime : undefined;
            inputs["frequency"] = state ? state.frequency : undefined;
            inputs["interval"] = state ? state.interval : undefined;
            inputs["maxConcurrency"] = state ? state.maxConcurrency : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["pipeline"] = state ? state.pipeline : undefined;
            inputs["retry"] = state ? state.retry : undefined;
            inputs["startTime"] = state ? state.startTime : undefined;
            inputs["triggerDependencies"] = state ? state.triggerDependencies : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dataFactoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataFactoryId'");
            }
            if ((!args || args.frequency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frequency'");
            }
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.pipeline === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipeline'");
            }
            if ((!args || args.startTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'startTime'");
            }
            inputs["activated"] = args ? args.activated : undefined;
            inputs["additionalProperties"] = args ? args.additionalProperties : undefined;
            inputs["annotations"] = args ? args.annotations : undefined;
            inputs["dataFactoryId"] = args ? args.dataFactoryId : undefined;
            inputs["delay"] = args ? args.delay : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["endTime"] = args ? args.endTime : undefined;
            inputs["frequency"] = args ? args.frequency : undefined;
            inputs["interval"] = args ? args.interval : undefined;
            inputs["maxConcurrency"] = args ? args.maxConcurrency : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["pipeline"] = args ? args.pipeline : undefined;
            inputs["retry"] = args ? args.retry : undefined;
            inputs["startTime"] = args ? args.startTime : undefined;
            inputs["triggerDependencies"] = args ? args.triggerDependencies : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(TriggerTumblingWindow.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing TriggerTumblingWindow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TriggerTumblingWindow(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TriggerTumblingWindow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TriggerTumblingWindow.__pulumiType;
    }
}
exports.TriggerTumblingWindow = TriggerTumblingWindow;
/** @internal */
TriggerTumblingWindow.__pulumiType = 'azure:datafactory/triggerTumblingWindow:TriggerTumblingWindow';
//# sourceMappingURL=triggerTumblingWindow.js.map