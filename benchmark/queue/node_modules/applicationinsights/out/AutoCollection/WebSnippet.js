"use strict";
var http = require("http");
var https = require("https");
var zlib = require("zlib");
var Logging = require("../Library/Logging");
var snippetInjectionHelper = require("../Library/SnippetInjectionHelper");
var WebSnippet = /** @class */ (function () {
    function WebSnippet(client) {
        if (!!WebSnippet.INSTANCE) {
            throw new Error("Web snippet injection should be configured from the applicationInsights object");
        }
        WebSnippet.INSTANCE = this;
        // AI URL used to validate if snippet already included
        WebSnippet._aiUrl = "https://js.monitor.azure.com/scripts/b/ai";
        WebSnippet._aiDeprecatedUrl = "https://az416426.vo.msecnd.net/scripts/b/ai";
        //TODO: quick fix for bundle error, remove this when npm is published
        WebSnippet._snippet = snippetInjectionHelper.webSnippet.replace("INSTRUMENTATION_KEY", client.config.instrumentationKey);
        //TODO: replace the path with npm package exports
        //NOTE: should use the following part when npm is enabled
        // let snippetPath = path.resolve(__dirname, "../../AutoCollection/snippet/snippet.min.js");
        // try {
        //     fs.readFile(snippetPath, function (err, snippet) {
        //         if (err) {
        //             Logging.warn("Failed to load AI Web snippet. Ex:" + err);
        //         }
        //         //TODO:should add extra config: snippetInstrumentationKey
        //         WebSnippet._snippet = snippet.toString().replace("INSTRUMENTATION_KEY", client.config.instrumentationKey);
        //     });
        // } catch (err) {
        //     Logging.warn("Read snippet error: " + err);
        // }
    }
    WebSnippet.prototype.enable = function (isEnabled) {
        this._isEnabled = isEnabled;
        if (this._isEnabled && !this._isInitialized) {
            this._initialize();
        }
    };
    WebSnippet.prototype.isInitialized = function () {
        return this._isInitialized;
    };
    WebSnippet.prototype._initialize = function () {
        this._isInitialized = true;
        var originalHttpServer = http.createServer;
        var originalHttpsServer = https.createServer;
        var isEnabled = this._isEnabled;
        http.createServer = function (requestListener) {
            var originalRequestListener = requestListener;
            if (originalRequestListener) {
                requestListener = function (request, response) {
                    // Patch response write method
                    var originalResponseWrite = response.write;
                    var isGetRequest = request.method == "GET";
                    response.write = function wrap(a, b, c) {
                        //only patch GET request
                        try {
                            if (isEnabled && isGetRequest) {
                                var headers = snippetInjectionHelper.getContentEncodingFromHeaders(response);
                                var writeBufferType = undefined;
                                if (typeof b === "string") {
                                    writeBufferType = b;
                                }
                                if (headers === null || headers === undefined) {
                                    if (WebSnippet.INSTANCE.ValidateInjection(response, a)) {
                                        arguments[0] = WebSnippet.INSTANCE.InjectWebSnippet(response, a, undefined, writeBufferType);
                                    }
                                }
                                else if (headers.length) {
                                    var encodeType = headers[0];
                                    arguments[0] = WebSnippet.INSTANCE.InjectWebSnippet(response, a, encodeType);
                                }
                            }
                        }
                        catch (err) {
                            Logging.warn("Inject snippet error: " + err);
                        }
                        return originalResponseWrite.apply(response, arguments);
                    };
                    // Patch response end method for cases when HTML is added there
                    var originalResponseEnd = response.end;
                    response.end = function wrap(a, b, c) {
                        if (isEnabled && isGetRequest) {
                            try {
                                if (isEnabled && isGetRequest) {
                                    var headers = snippetInjectionHelper.getContentEncodingFromHeaders(response);
                                    var endBufferType = undefined;
                                    if (typeof b === "string") {
                                        endBufferType = b;
                                    }
                                    if (headers === null || headers === undefined) {
                                        if (WebSnippet.INSTANCE.ValidateInjection(response, a)) {
                                            arguments[0] = WebSnippet.INSTANCE.InjectWebSnippet(response, a, undefined, endBufferType);
                                        }
                                    }
                                    else if (headers.length) {
                                        var encodeType = headers[0];
                                        arguments[0] = WebSnippet.INSTANCE.InjectWebSnippet(response, a, encodeType);
                                    }
                                }
                            }
                            catch (err) {
                                Logging.warn("Inject snipet error: " + err);
                            }
                        }
                        return originalResponseEnd.apply(response, arguments);
                    };
                    return originalRequestListener(request, response);
                };
            }
            return originalHttpServer(requestListener);
        };
        https.createServer = function (options, httpsRequestListener) {
            var originalHttpsRequestListener = httpsRequestListener;
            if (originalHttpsRequestListener) {
                httpsRequestListener = function (req, res) {
                    var isGetHttpsRequest = req.method == "GET";
                    var originalHttpsResponseWrite = res.write;
                    var originalHttpsResponseEnd = res.end;
                    res.write = function wrap(a, b, c) {
                        try {
                            if (isEnabled && isGetHttpsRequest) {
                                var headers = snippetInjectionHelper.getContentEncodingFromHeaders(res);
                                var writeBufferType = undefined;
                                if (typeof b === "string") {
                                    writeBufferType = b;
                                }
                                if (headers === null || headers === undefined) {
                                    if (WebSnippet.INSTANCE.ValidateInjection(res, a)) {
                                        arguments[0] = this.InjectWebSnippet(res, a, undefined, writeBufferType);
                                    }
                                }
                                else if (headers.length) {
                                    var encodeType = headers[0];
                                    arguments[0] = WebSnippet.INSTANCE.InjectWebSnippet(res, a, encodeType);
                                }
                            }
                        }
                        catch (err) {
                            Logging.warn("Inject snippet error: " + err);
                        }
                        return originalHttpsResponseWrite.apply(res, arguments);
                    };
                    res.end = function wrap(a, b, c) {
                        try {
                            if (isEnabled && isGetHttpsRequest) {
                                var headers = snippetInjectionHelper.getContentEncodingFromHeaders(res);
                                var endBufferType = undefined;
                                if (typeof b === "string") {
                                    endBufferType = b;
                                }
                                if (headers === null || headers === undefined) {
                                    if (WebSnippet.INSTANCE.ValidateInjection(res, a)) {
                                        arguments[0] = WebSnippet.INSTANCE.InjectWebSnippet(res, a, undefined, endBufferType);
                                    }
                                }
                                else if (headers.length) {
                                    var encodeType = headers[0];
                                    arguments[0] = WebSnippet.INSTANCE.InjectWebSnippet(res, a, encodeType);
                                }
                            }
                        }
                        catch (err) {
                            Logging.warn("Inject snippet error: " + err);
                        }
                        return originalHttpsResponseEnd.apply(res, arguments);
                    };
                    return originalHttpsRequestListener(req, res);
                };
                return originalHttpsServer(options, httpsRequestListener);
            }
        };
    };
    /**
     * Validate response and try to inject Web snippet
     */
    WebSnippet.prototype.ValidateInjection = function (response, input) {
        if (!response || !input || response.statusCode != 200)
            return false;
        var isContentHtml = snippetInjectionHelper.isContentTypeHeaderHtml(response);
        if (!isContentHtml)
            return false;
        var inputStr = input.slice().toString();
        if (inputStr.indexOf("<head>") >= 0 && inputStr.indexOf("</head>") >= 0) {
            // Check if snippet not already present looking for AI Web SDK URL
            if (inputStr.indexOf(WebSnippet._aiUrl) < 0 && inputStr.indexOf(WebSnippet._aiDeprecatedUrl) < 0) {
                return true;
            }
        }
        return false;
    };
    /**
     * Inject Web snippet
     */
    WebSnippet.prototype.InjectWebSnippet = function (response, input, encodeType, bufferEncodeType) {
        try {
            var isCompressedBuffer = !!encodeType;
            if (!isCompressedBuffer) {
                var html = input.toString();
                var index = html.indexOf("</head>");
                if (index < 0)
                    return input;
                var newHtml = snippetInjectionHelper.insertSnippetByIndex(index, html, WebSnippet._snippet);
                if (typeof input === "string") {
                    response.removeHeader("Content-Length");
                    input = newHtml;
                    response.setHeader("Content-Length", Buffer.byteLength(input));
                }
                else if (Buffer.isBuffer(input)) {
                    var bufferType = bufferEncodeType ? bufferEncodeType : "utf8";
                    var isValidBufferType = snippetInjectionHelper.isBufferType(input, bufferType);
                    if (isValidBufferType) {
                        response.removeHeader("Content-Length");
                        var encodedString = Buffer.from(newHtml).toString(bufferType);
                        input = Buffer.from(encodedString, bufferType);
                        response.setHeader("Content-Length", input.length);
                    }
                }
            }
            else {
                response.removeHeader("Content-Length");
                input = this._getInjectedCompressBuffer(response, input, encodeType);
                response.setHeader("Content-Length", input.length);
            }
        }
        catch (ex) {
            Logging.warn("Failed to inject web snippet and change content-lenght headers. Exception:" + ex);
        }
        return input;
    };
    //***********************
    // should NOT use sync functions here. But currently cannot get async functions to work
    // because reponse.write return boolean
    // and also this function do not support partial compression as well
    // need more investigation
    WebSnippet.prototype._getInjectedCompressBuffer = function (response, input, encodeType) {
        switch (encodeType) {
            case snippetInjectionHelper.contentEncodingMethod.GZIP:
                var gunzipBuffer = zlib.gunzipSync(input);
                if (this.ValidateInjection(response, gunzipBuffer)) {
                    var injectedGunzipBuffer = this.InjectWebSnippet(response, gunzipBuffer);
                    input = zlib.gzipSync(injectedGunzipBuffer);
                }
                break;
            case snippetInjectionHelper.contentEncodingMethod.DEFLATE:
                var inflateBuffer = zlib.inflateSync(input);
                if (this.ValidateInjection(response, inflateBuffer)) {
                    var injectedInflateBuffer = this.InjectWebSnippet(response, inflateBuffer);
                    input = zlib.deflateSync(injectedInflateBuffer);
                }
                break;
            case snippetInjectionHelper.contentEncodingMethod.BR:
                var BrotliDecompressSync = snippetInjectionHelper.getBrotliDecompressSync(zlib);
                var BrotliCompressSync = snippetInjectionHelper.getBrotliCompressSync(zlib);
                if (BrotliDecompressSync && BrotliCompressSync) {
                    var decompressBuffer = BrotliDecompressSync(input);
                    if (this.ValidateInjection(response, decompressBuffer)) {
                        var injectedDecompressBuffer = this.InjectWebSnippet(response, decompressBuffer);
                        input = BrotliCompressSync(injectedDecompressBuffer);
                    }
                    break;
                }
        }
        return input;
    };
    WebSnippet.prototype.dispose = function () {
        WebSnippet.INSTANCE = null;
        this.enable(false);
        this._isInitialized = false;
    };
    return WebSnippet;
}());
module.exports = WebSnippet;
//# sourceMappingURL=WebSnippet.js.map