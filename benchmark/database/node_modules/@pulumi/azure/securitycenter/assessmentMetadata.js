"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssessmentMetadata = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages the Security Center Assessment Metadata for Azure Security Center.
 *
 * > **NOTE:** This resource has been deprecated in favour of the `azure.securitycenter.AssessmentPolicy` resource and will be removed in the next major version of the AzureRM Provider. The new resource shares the same fields as this one, and information on migrating across can be found in this guide.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.securitycenter.AssessmentMetadata("example", {
 *     description: "Test Description",
 *     displayName: "Test Display Name",
 *     severity: "Medium",
 * });
 * ```
 *
 * ## Import
 *
 * Security Assessments Metadata can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:securitycenter/assessmentMetadata:AssessmentMetadata example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Security/assessmentMetadata/metadata1
 * ```
 */
class AssessmentMetadata extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["categories"] = state ? state.categories : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["implementationEffort"] = state ? state.implementationEffort : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["remediationDescription"] = state ? state.remediationDescription : undefined;
            resourceInputs["severity"] = state ? state.severity : undefined;
            resourceInputs["threats"] = state ? state.threats : undefined;
            resourceInputs["userImpact"] = state ? state.userImpact : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            resourceInputs["categories"] = args ? args.categories : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["implementationEffort"] = args ? args.implementationEffort : undefined;
            resourceInputs["remediationDescription"] = args ? args.remediationDescription : undefined;
            resourceInputs["severity"] = args ? args.severity : undefined;
            resourceInputs["threats"] = args ? args.threats : undefined;
            resourceInputs["userImpact"] = args ? args.userImpact : undefined;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AssessmentMetadata.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing AssessmentMetadata resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AssessmentMetadata(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AssessmentMetadata.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AssessmentMetadata.__pulumiType;
    }
}
exports.AssessmentMetadata = AssessmentMetadata;
/** @internal */
AssessmentMetadata.__pulumiType = 'azure:securitycenter/assessmentMetadata:AssessmentMetadata';
//# sourceMappingURL=assessmentMetadata.js.map