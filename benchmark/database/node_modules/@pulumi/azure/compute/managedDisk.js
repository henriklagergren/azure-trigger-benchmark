"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedDisk = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a managed disk.
 *
 * ## Example Usage
 * ### With Create Empty
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleManagedDisk = new azure.compute.ManagedDisk("exampleManagedDisk", {
 *     location: "West US 2",
 *     resourceGroupName: exampleResourceGroup.name,
 *     storageAccountType: "Standard_LRS",
 *     createOption: "Empty",
 *     diskSizeGb: "1",
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * ```
 * ### With Create Copy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.core.ResourceGroup("example", {location: "West Europe"});
 * const source = new azure.compute.ManagedDisk("source", {
 *     location: "West US 2",
 *     resourceGroupName: example.name,
 *     storageAccountType: "Standard_LRS",
 *     createOption: "Empty",
 *     diskSizeGb: "1",
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * const copy = new azure.compute.ManagedDisk("copy", {
 *     location: "West US 2",
 *     resourceGroupName: example.name,
 *     storageAccountType: "Standard_LRS",
 *     createOption: "Copy",
 *     sourceResourceId: source.id,
 *     diskSizeGb: "1",
 *     tags: {
 *         environment: "staging",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Managed Disks can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:compute/managedDisk:ManagedDisk example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/microsoft.compute/disks/manageddisk1
 * ```
 */
class ManagedDisk extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createOption"] = state ? state.createOption : undefined;
            resourceInputs["diskAccessId"] = state ? state.diskAccessId : undefined;
            resourceInputs["diskEncryptionSetId"] = state ? state.diskEncryptionSetId : undefined;
            resourceInputs["diskIopsReadOnly"] = state ? state.diskIopsReadOnly : undefined;
            resourceInputs["diskIopsReadWrite"] = state ? state.diskIopsReadWrite : undefined;
            resourceInputs["diskMbpsReadOnly"] = state ? state.diskMbpsReadOnly : undefined;
            resourceInputs["diskMbpsReadWrite"] = state ? state.diskMbpsReadWrite : undefined;
            resourceInputs["diskSizeGb"] = state ? state.diskSizeGb : undefined;
            resourceInputs["encryptionSettings"] = state ? state.encryptionSettings : undefined;
            resourceInputs["galleryImageReferenceId"] = state ? state.galleryImageReferenceId : undefined;
            resourceInputs["hyperVGeneration"] = state ? state.hyperVGeneration : undefined;
            resourceInputs["imageReferenceId"] = state ? state.imageReferenceId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["logicalSectorSize"] = state ? state.logicalSectorSize : undefined;
            resourceInputs["maxShares"] = state ? state.maxShares : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkAccessPolicy"] = state ? state.networkAccessPolicy : undefined;
            resourceInputs["onDemandBurstingEnabled"] = state ? state.onDemandBurstingEnabled : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sourceResourceId"] = state ? state.sourceResourceId : undefined;
            resourceInputs["sourceUri"] = state ? state.sourceUri : undefined;
            resourceInputs["storageAccountId"] = state ? state.storageAccountId : undefined;
            resourceInputs["storageAccountType"] = state ? state.storageAccountType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tier"] = state ? state.tier : undefined;
            resourceInputs["trustedLaunchEnabled"] = state ? state.trustedLaunchEnabled : undefined;
            resourceInputs["zones"] = state ? state.zones : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.createOption === undefined) && !opts.urn) {
                throw new Error("Missing required property 'createOption'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.storageAccountType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccountType'");
            }
            resourceInputs["createOption"] = args ? args.createOption : undefined;
            resourceInputs["diskAccessId"] = args ? args.diskAccessId : undefined;
            resourceInputs["diskEncryptionSetId"] = args ? args.diskEncryptionSetId : undefined;
            resourceInputs["diskIopsReadOnly"] = args ? args.diskIopsReadOnly : undefined;
            resourceInputs["diskIopsReadWrite"] = args ? args.diskIopsReadWrite : undefined;
            resourceInputs["diskMbpsReadOnly"] = args ? args.diskMbpsReadOnly : undefined;
            resourceInputs["diskMbpsReadWrite"] = args ? args.diskMbpsReadWrite : undefined;
            resourceInputs["diskSizeGb"] = args ? args.diskSizeGb : undefined;
            resourceInputs["encryptionSettings"] = args ? args.encryptionSettings : undefined;
            resourceInputs["galleryImageReferenceId"] = args ? args.galleryImageReferenceId : undefined;
            resourceInputs["hyperVGeneration"] = args ? args.hyperVGeneration : undefined;
            resourceInputs["imageReferenceId"] = args ? args.imageReferenceId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["logicalSectorSize"] = args ? args.logicalSectorSize : undefined;
            resourceInputs["maxShares"] = args ? args.maxShares : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkAccessPolicy"] = args ? args.networkAccessPolicy : undefined;
            resourceInputs["onDemandBurstingEnabled"] = args ? args.onDemandBurstingEnabled : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sourceResourceId"] = args ? args.sourceResourceId : undefined;
            resourceInputs["sourceUri"] = args ? args.sourceUri : undefined;
            resourceInputs["storageAccountId"] = args ? args.storageAccountId : undefined;
            resourceInputs["storageAccountType"] = args ? args.storageAccountType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tier"] = args ? args.tier : undefined;
            resourceInputs["trustedLaunchEnabled"] = args ? args.trustedLaunchEnabled : undefined;
            resourceInputs["zones"] = args ? args.zones : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedDisk.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ManagedDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ManagedDisk(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ManagedDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedDisk.__pulumiType;
    }
}
exports.ManagedDisk = ManagedDisk;
/** @internal */
ManagedDisk.__pulumiType = 'azure:compute/managedDisk:ManagedDisk';
//# sourceMappingURL=managedDisk.js.map