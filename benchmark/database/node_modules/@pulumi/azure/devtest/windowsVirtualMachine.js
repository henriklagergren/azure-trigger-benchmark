"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowsVirtualMachine = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Windows Virtual Machine within a Dev Test Lab.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleLab = new azure.devtest.Lab("exampleLab", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     tags: {
 *         Sydney: "Australia",
 *     },
 * });
 * const exampleVirtualNetwork = new azure.devtest.VirtualNetwork("exampleVirtualNetwork", {
 *     labName: exampleLab.name,
 *     resourceGroupName: exampleResourceGroup.name,
 *     subnet: {
 *         usePublicIpAddress: "Allow",
 *         useInVirtualMachineCreation: "Allow",
 *     },
 * });
 * const exampleWindowsVirtualMachine = new azure.devtest.WindowsVirtualMachine("exampleWindowsVirtualMachine", {
 *     labName: exampleLab.name,
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     size: "Standard_DS2",
 *     username: "exampleuser99",
 *     password: `Pa$w0rd1234!`,
 *     labVirtualNetworkId: exampleVirtualNetwork.id,
 *     labSubnetName: exampleVirtualNetwork.subnet.apply(subnet => subnet.name),
 *     storageType: "Premium",
 *     notes: "Some notes about this Virtual Machine.",
 *     galleryImageReference: {
 *         offer: "WindowsServer",
 *         publisher: "MicrosoftWindowsServer",
 *         sku: "2019-Datacenter",
 *         version: "latest",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * DevTest Windows Virtual Machines can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:devtest/windowsVirtualMachine:WindowsVirtualMachine machine1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DevTestLab/labs/lab1/virtualmachines/machine1
 * ```
 */
class WindowsVirtualMachine extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["allowClaim"] = state ? state.allowClaim : undefined;
            resourceInputs["disallowPublicIpAddress"] = state ? state.disallowPublicIpAddress : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["galleryImageReference"] = state ? state.galleryImageReference : undefined;
            resourceInputs["inboundNatRules"] = state ? state.inboundNatRules : undefined;
            resourceInputs["labName"] = state ? state.labName : undefined;
            resourceInputs["labSubnetName"] = state ? state.labSubnetName : undefined;
            resourceInputs["labVirtualNetworkId"] = state ? state.labVirtualNetworkId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notes"] = state ? state.notes : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["uniqueIdentifier"] = state ? state.uniqueIdentifier : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.galleryImageReference === undefined) && !opts.urn) {
                throw new Error("Missing required property 'galleryImageReference'");
            }
            if ((!args || args.labName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'labName'");
            }
            if ((!args || args.labSubnetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'labSubnetName'");
            }
            if ((!args || args.labVirtualNetworkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'labVirtualNetworkId'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.size === undefined) && !opts.urn) {
                throw new Error("Missing required property 'size'");
            }
            if ((!args || args.storageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageType'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["allowClaim"] = args ? args.allowClaim : undefined;
            resourceInputs["disallowPublicIpAddress"] = args ? args.disallowPublicIpAddress : undefined;
            resourceInputs["galleryImageReference"] = args ? args.galleryImageReference : undefined;
            resourceInputs["inboundNatRules"] = args ? args.inboundNatRules : undefined;
            resourceInputs["labName"] = args ? args.labName : undefined;
            resourceInputs["labSubnetName"] = args ? args.labSubnetName : undefined;
            resourceInputs["labVirtualNetworkId"] = args ? args.labVirtualNetworkId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notes"] = args ? args.notes : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["uniqueIdentifier"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(WindowsVirtualMachine.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing WindowsVirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new WindowsVirtualMachine(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of WindowsVirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === WindowsVirtualMachine.__pulumiType;
    }
}
exports.WindowsVirtualMachine = WindowsVirtualMachine;
/** @internal */
WindowsVirtualMachine.__pulumiType = 'azure:devtest/windowsVirtualMachine:WindowsVirtualMachine';
//# sourceMappingURL=windowsVirtualMachine.js.map