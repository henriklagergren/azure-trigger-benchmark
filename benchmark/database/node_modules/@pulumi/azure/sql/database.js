"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Database = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleSqlServer = new azure.sql.SqlServer("exampleSqlServer", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: "West US",
 *     version: "12.0",
 *     administratorLogin: "4dm1n157r470r",
 *     administratorLoginPassword: "4-v3ry-53cr37-p455w0rd",
 *     tags: {
 *         environment: "production",
 *     },
 * });
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleDatabase = new azure.sql.Database("exampleDatabase", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: "West US",
 *     serverName: exampleSqlServer.name,
 *     extendedAuditingPolicy: {
 *         storageEndpoint: exampleAccount.primaryBlobEndpoint,
 *         storageAccountAccessKey: exampleAccount.primaryAccessKey,
 *         storageAccountAccessKeyIsSecondary: true,
 *         retentionInDays: 6,
 *     },
 *     tags: {
 *         environment: "production",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * SQL Databases can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:sql/database:Database database1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Sql/servers/myserver/databases/database1
 * ```
 */
class Database extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["collation"] = state ? state.collation : undefined;
            resourceInputs["createMode"] = state ? state.createMode : undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["defaultSecondaryLocation"] = state ? state.defaultSecondaryLocation : undefined;
            resourceInputs["edition"] = state ? state.edition : undefined;
            resourceInputs["elasticPoolName"] = state ? state.elasticPoolName : undefined;
            resourceInputs["encryption"] = state ? state.encryption : undefined;
            resourceInputs["extendedAuditingPolicy"] = state ? state.extendedAuditingPolicy : undefined;
            resourceInputs["import"] = state ? state.import : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maxSizeBytes"] = state ? state.maxSizeBytes : undefined;
            resourceInputs["maxSizeGb"] = state ? state.maxSizeGb : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["readScale"] = state ? state.readScale : undefined;
            resourceInputs["requestedServiceObjectiveId"] = state ? state.requestedServiceObjectiveId : undefined;
            resourceInputs["requestedServiceObjectiveName"] = state ? state.requestedServiceObjectiveName : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["restorePointInTime"] = state ? state.restorePointInTime : undefined;
            resourceInputs["serverName"] = state ? state.serverName : undefined;
            resourceInputs["sourceDatabaseDeletionDate"] = state ? state.sourceDatabaseDeletionDate : undefined;
            resourceInputs["sourceDatabaseId"] = state ? state.sourceDatabaseId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["threatDetectionPolicy"] = state ? state.threatDetectionPolicy : undefined;
            resourceInputs["zoneRedundant"] = state ? state.zoneRedundant : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.serverName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverName'");
            }
            resourceInputs["collation"] = args ? args.collation : undefined;
            resourceInputs["createMode"] = args ? args.createMode : undefined;
            resourceInputs["edition"] = args ? args.edition : undefined;
            resourceInputs["elasticPoolName"] = args ? args.elasticPoolName : undefined;
            resourceInputs["extendedAuditingPolicy"] = args ? args.extendedAuditingPolicy : undefined;
            resourceInputs["import"] = args ? args.import : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maxSizeBytes"] = args ? args.maxSizeBytes : undefined;
            resourceInputs["maxSizeGb"] = args ? args.maxSizeGb : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["readScale"] = args ? args.readScale : undefined;
            resourceInputs["requestedServiceObjectiveId"] = args ? args.requestedServiceObjectiveId : undefined;
            resourceInputs["requestedServiceObjectiveName"] = args ? args.requestedServiceObjectiveName : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["restorePointInTime"] = args ? args.restorePointInTime : undefined;
            resourceInputs["serverName"] = args ? args.serverName : undefined;
            resourceInputs["sourceDatabaseDeletionDate"] = args ? args.sourceDatabaseDeletionDate : undefined;
            resourceInputs["sourceDatabaseId"] = args ? args.sourceDatabaseId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["threatDetectionPolicy"] = args ? args.threatDetectionPolicy : undefined;
            resourceInputs["zoneRedundant"] = args ? args.zoneRedundant : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["defaultSecondaryLocation"] = undefined /*out*/;
            resourceInputs["encryption"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Database.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Database resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Database(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Database.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Database.__pulumiType;
    }
}
exports.Database = Database;
/** @internal */
Database.__pulumiType = 'azure:sql/database:Database';
//# sourceMappingURL=database.js.map