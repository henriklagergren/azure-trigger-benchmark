"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Service Fabric Cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleCluster = new azure.servicefabric.Cluster("exampleCluster", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     reliabilityLevel: "Bronze",
 *     upgradeMode: "Manual",
 *     clusterCodeVersion: "7.1.456.959",
 *     vmImage: "Windows",
 *     managementEndpoint: "https://example:80",
 *     nodeTypes: [{
 *         name: "first",
 *         instanceCount: 3,
 *         isPrimary: true,
 *         clientEndpointPort: 2020,
 *         httpEndpointPort: 80,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Service Fabric Clusters can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:servicefabric/cluster:Cluster cluster1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ServiceFabric/clusters/cluster1
 * ```
 */
class Cluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["addOnFeatures"] = state ? state.addOnFeatures : undefined;
            resourceInputs["azureActiveDirectory"] = state ? state.azureActiveDirectory : undefined;
            resourceInputs["certificate"] = state ? state.certificate : undefined;
            resourceInputs["certificateCommonNames"] = state ? state.certificateCommonNames : undefined;
            resourceInputs["clientCertificateCommonNames"] = state ? state.clientCertificateCommonNames : undefined;
            resourceInputs["clientCertificateThumbprints"] = state ? state.clientCertificateThumbprints : undefined;
            resourceInputs["clusterCodeVersion"] = state ? state.clusterCodeVersion : undefined;
            resourceInputs["clusterEndpoint"] = state ? state.clusterEndpoint : undefined;
            resourceInputs["diagnosticsConfig"] = state ? state.diagnosticsConfig : undefined;
            resourceInputs["fabricSettings"] = state ? state.fabricSettings : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["managementEndpoint"] = state ? state.managementEndpoint : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeTypes"] = state ? state.nodeTypes : undefined;
            resourceInputs["reliabilityLevel"] = state ? state.reliabilityLevel : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["reverseProxyCertificate"] = state ? state.reverseProxyCertificate : undefined;
            resourceInputs["reverseProxyCertificateCommonNames"] = state ? state.reverseProxyCertificateCommonNames : undefined;
            resourceInputs["serviceFabricZonalUpgradeMode"] = state ? state.serviceFabricZonalUpgradeMode : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["upgradeMode"] = state ? state.upgradeMode : undefined;
            resourceInputs["upgradePolicy"] = state ? state.upgradePolicy : undefined;
            resourceInputs["vmImage"] = state ? state.vmImage : undefined;
            resourceInputs["vmssZonalUpgradeMode"] = state ? state.vmssZonalUpgradeMode : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.managementEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementEndpoint'");
            }
            if ((!args || args.nodeTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeTypes'");
            }
            if ((!args || args.reliabilityLevel === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reliabilityLevel'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.upgradeMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'upgradeMode'");
            }
            if ((!args || args.vmImage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmImage'");
            }
            resourceInputs["addOnFeatures"] = args ? args.addOnFeatures : undefined;
            resourceInputs["azureActiveDirectory"] = args ? args.azureActiveDirectory : undefined;
            resourceInputs["certificate"] = args ? args.certificate : undefined;
            resourceInputs["certificateCommonNames"] = args ? args.certificateCommonNames : undefined;
            resourceInputs["clientCertificateCommonNames"] = args ? args.clientCertificateCommonNames : undefined;
            resourceInputs["clientCertificateThumbprints"] = args ? args.clientCertificateThumbprints : undefined;
            resourceInputs["clusterCodeVersion"] = args ? args.clusterCodeVersion : undefined;
            resourceInputs["diagnosticsConfig"] = args ? args.diagnosticsConfig : undefined;
            resourceInputs["fabricSettings"] = args ? args.fabricSettings : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["managementEndpoint"] = args ? args.managementEndpoint : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeTypes"] = args ? args.nodeTypes : undefined;
            resourceInputs["reliabilityLevel"] = args ? args.reliabilityLevel : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["reverseProxyCertificate"] = args ? args.reverseProxyCertificate : undefined;
            resourceInputs["reverseProxyCertificateCommonNames"] = args ? args.reverseProxyCertificateCommonNames : undefined;
            resourceInputs["serviceFabricZonalUpgradeMode"] = args ? args.serviceFabricZonalUpgradeMode : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["upgradeMode"] = args ? args.upgradeMode : undefined;
            resourceInputs["upgradePolicy"] = args ? args.upgradePolicy : undefined;
            resourceInputs["vmImage"] = args ? args.vmImage : undefined;
            resourceInputs["vmssZonalUpgradeMode"] = args ? args.vmssZonalUpgradeMode : undefined;
            resourceInputs["clusterEndpoint"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'azure:servicefabric/cluster:Cluster';
//# sourceMappingURL=cluster.js.map