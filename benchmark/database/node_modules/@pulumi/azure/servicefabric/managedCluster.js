"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Resource Group.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.servicefabric.ManagedCluster("example", {
 *     clientConnectionPort: 12345,
 *     httpGatewayPort: 4567,
 *     lbRules: [{
 *         backendPort: 38080,
 *         frontendPort: 80,
 *         probeProtocol: "http",
 *         probeRequestPath: "/test",
 *         protocol: "tcp",
 *     }],
 *     location: "West Europe",
 *     nodeTypes: [{
 *         applicationPortRange: "30000-49000",
 *         dataDiskSizeGb: 130,
 *         ephemeralPortRange: "10000-20000",
 *         name: "test1",
 *         primary: true,
 *         vmImageOffer: "WindowsServer",
 *         vmImagePublisher: "MicrosoftWindowsServer",
 *         vmImageSku: "2019-Datacenter-with-Containers",
 *         vmImageVersion: "latest",
 *         vmInstanceCount: 5,
 *         vmSize: "Standard_DS1_v2",
 *     }],
 *     resourceGroupName: "example",
 * });
 * ```
 *
 * ## Import
 *
 * Resource Groups can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:servicefabric/managedCluster:ManagedCluster example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.ServiceFabric/managedClusters/clusterName1
 * ```
 */
class ManagedCluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["backupServiceEnabled"] = state ? state.backupServiceEnabled : undefined;
            resourceInputs["clientConnectionPort"] = state ? state.clientConnectionPort : undefined;
            resourceInputs["customFabricSettings"] = state ? state.customFabricSettings : undefined;
            resourceInputs["dnsName"] = state ? state.dnsName : undefined;
            resourceInputs["dnsServiceEnabled"] = state ? state.dnsServiceEnabled : undefined;
            resourceInputs["httpGatewayPort"] = state ? state.httpGatewayPort : undefined;
            resourceInputs["lbRules"] = state ? state.lbRules : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeTypes"] = state ? state.nodeTypes : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["upgradeWave"] = state ? state.upgradeWave : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clientConnectionPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientConnectionPort'");
            }
            if ((!args || args.httpGatewayPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpGatewayPort'");
            }
            if ((!args || args.lbRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lbRules'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["backupServiceEnabled"] = args ? args.backupServiceEnabled : undefined;
            resourceInputs["clientConnectionPort"] = args ? args.clientConnectionPort : undefined;
            resourceInputs["customFabricSettings"] = args ? args.customFabricSettings : undefined;
            resourceInputs["dnsName"] = args ? args.dnsName : undefined;
            resourceInputs["dnsServiceEnabled"] = args ? args.dnsServiceEnabled : undefined;
            resourceInputs["httpGatewayPort"] = args ? args.httpGatewayPort : undefined;
            resourceInputs["lbRules"] = args ? args.lbRules : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeTypes"] = args ? args.nodeTypes : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["upgradeWave"] = args ? args.upgradeWave : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedCluster.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ManagedCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ManagedCluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ManagedCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedCluster.__pulumiType;
    }
}
exports.ManagedCluster = ManagedCluster;
/** @internal */
ManagedCluster.__pulumiType = 'azure:servicefabric/managedCluster:ManagedCluster';
//# sourceMappingURL=managedCluster.js.map