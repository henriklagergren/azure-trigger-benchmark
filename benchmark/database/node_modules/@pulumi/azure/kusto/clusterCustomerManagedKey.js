"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterCustomerManagedKey = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Customer Managed Key for a Kusto Cluster.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleKeyVault = new azure.keyvault.KeyVault("exampleKeyVault", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     tenantId: current.then(current => current.tenantId),
 *     skuName: "standard",
 *     purgeProtectionEnabled: true,
 * });
 * const exampleCluster = new azure.kusto.Cluster("exampleCluster", {
 *     location: azurerm_resource_group.rg.location,
 *     resourceGroupName: azurerm_resource_group.rg.name,
 *     sku: {
 *         name: "Standard_D13_v2",
 *         capacity: 2,
 *     },
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const cluster = new azure.keyvault.AccessPolicy("cluster", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: exampleCluster.identity.apply(identity => identity?.principalId),
 *     keyPermissions: [
 *         "get",
 *         "unwrapkey",
 *         "wrapkey",
 *     ],
 * });
 * const client = new azure.keyvault.AccessPolicy("client", {
 *     keyVaultId: exampleKeyVault.id,
 *     tenantId: current.then(current => current.tenantId),
 *     objectId: current.then(current => current.objectId),
 *     keyPermissions: [
 *         "get",
 *         "list",
 *         "create",
 *         "delete",
 *         "recover",
 *     ],
 * });
 * const exampleKey = new azure.keyvault.Key("exampleKey", {
 *     keyVaultId: exampleKeyVault.id,
 *     keyType: "RSA",
 *     keySize: 2048,
 *     keyOpts: [
 *         "decrypt",
 *         "encrypt",
 *         "sign",
 *         "unwrapKey",
 *         "verify",
 *         "wrapKey",
 *     ],
 * }, {
 *     dependsOn: [
 *         client,
 *         cluster,
 *     ],
 * });
 * const exampleClusterCustomerManagedKey = new azure.kusto.ClusterCustomerManagedKey("exampleClusterCustomerManagedKey", {
 *     clusterId: exampleCluster.id,
 *     keyVaultId: exampleKeyVault.id,
 *     keyName: exampleKey.name,
 *     keyVersion: exampleKey.version,
 * });
 * ```
 *
 * ## Import
 *
 * Customer Managed Keys for a Kusto Cluster can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:kusto/clusterCustomerManagedKey:ClusterCustomerManagedKey example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Kusto/Clusters/cluster1
 * ```
 */
class ClusterCustomerManagedKey extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["keyVaultId"] = state ? state.keyVaultId : undefined;
            resourceInputs["keyVersion"] = state ? state.keyVersion : undefined;
            resourceInputs["userIdentity"] = state ? state.userIdentity : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.keyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyName'");
            }
            if ((!args || args.keyVaultId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVaultId'");
            }
            if ((!args || args.keyVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyVersion'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["keyVaultId"] = args ? args.keyVaultId : undefined;
            resourceInputs["keyVersion"] = args ? args.keyVersion : undefined;
            resourceInputs["userIdentity"] = args ? args.userIdentity : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterCustomerManagedKey.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ClusterCustomerManagedKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ClusterCustomerManagedKey(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ClusterCustomerManagedKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterCustomerManagedKey.__pulumiType;
    }
}
exports.ClusterCustomerManagedKey = ClusterCustomerManagedKey;
/** @internal */
ClusterCustomerManagedKey.__pulumiType = 'azure:kusto/clusterCustomerManagedKey:ClusterCustomerManagedKey';
//# sourceMappingURL=clusterCustomerManagedKey.js.map