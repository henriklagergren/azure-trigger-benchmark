"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a MySQL Server.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleServer = new azure.mysql.Server("exampleServer", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     administratorLogin: "mysqladminun",
 *     administratorLoginPassword: "H@Sh1CoR3!",
 *     skuName: "B_Gen5_2",
 *     storageMb: 5120,
 *     version: "5.7",
 *     autoGrowEnabled: true,
 *     backupRetentionDays: 7,
 *     geoRedundantBackupEnabled: false,
 *     infrastructureEncryptionEnabled: false,
 *     publicNetworkAccessEnabled: true,
 *     sslEnforcementEnabled: true,
 *     sslMinimalTlsVersionEnforced: "TLS1_2",
 * });
 * ```
 *
 * ## Import
 *
 * MySQL Server's can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:mysql/server:Server server1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.DBforMySQL/servers/server1
 * ```
 */
class Server extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["administratorLogin"] = state ? state.administratorLogin : undefined;
            resourceInputs["administratorLoginPassword"] = state ? state.administratorLoginPassword : undefined;
            resourceInputs["autoGrowEnabled"] = state ? state.autoGrowEnabled : undefined;
            resourceInputs["backupRetentionDays"] = state ? state.backupRetentionDays : undefined;
            resourceInputs["createMode"] = state ? state.createMode : undefined;
            resourceInputs["creationSourceServerId"] = state ? state.creationSourceServerId : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["geoRedundantBackupEnabled"] = state ? state.geoRedundantBackupEnabled : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["infrastructureEncryptionEnabled"] = state ? state.infrastructureEncryptionEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = state ? state.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["restorePointInTime"] = state ? state.restorePointInTime : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["sslEnforcement"] = state ? state.sslEnforcement : undefined;
            resourceInputs["sslEnforcementEnabled"] = state ? state.sslEnforcementEnabled : undefined;
            resourceInputs["sslMinimalTlsVersionEnforced"] = state ? state.sslMinimalTlsVersionEnforced : undefined;
            resourceInputs["storageMb"] = state ? state.storageMb : undefined;
            resourceInputs["storageProfile"] = state ? state.storageProfile : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["threatDetectionPolicy"] = state ? state.threatDetectionPolicy : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["administratorLogin"] = args ? args.administratorLogin : undefined;
            resourceInputs["administratorLoginPassword"] = args ? args.administratorLoginPassword : undefined;
            resourceInputs["autoGrowEnabled"] = args ? args.autoGrowEnabled : undefined;
            resourceInputs["backupRetentionDays"] = args ? args.backupRetentionDays : undefined;
            resourceInputs["createMode"] = args ? args.createMode : undefined;
            resourceInputs["creationSourceServerId"] = args ? args.creationSourceServerId : undefined;
            resourceInputs["geoRedundantBackupEnabled"] = args ? args.geoRedundantBackupEnabled : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["infrastructureEncryptionEnabled"] = args ? args.infrastructureEncryptionEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["publicNetworkAccessEnabled"] = args ? args.publicNetworkAccessEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["restorePointInTime"] = args ? args.restorePointInTime : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["sslEnforcement"] = args ? args.sslEnforcement : undefined;
            resourceInputs["sslEnforcementEnabled"] = args ? args.sslEnforcementEnabled : undefined;
            resourceInputs["sslMinimalTlsVersionEnforced"] = args ? args.sslMinimalTlsVersionEnforced : undefined;
            resourceInputs["storageMb"] = args ? args.storageMb : undefined;
            resourceInputs["storageProfile"] = args ? args.storageProfile : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["threatDetectionPolicy"] = args ? args.threatDetectionPolicy : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Server.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Server(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Server.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Server.__pulumiType;
    }
}
exports.Server = Server;
/** @internal */
Server.__pulumiType = 'azure:mysql/server:Server';
//# sourceMappingURL=server.js.map