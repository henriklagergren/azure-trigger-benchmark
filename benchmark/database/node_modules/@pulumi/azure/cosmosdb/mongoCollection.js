"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoCollection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Mongo Collection within a Cosmos DB Account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleAccount = azure.cosmosdb.getAccount({
 *     name: "tfex-cosmosdb-account",
 *     resourceGroupName: "tfex-cosmosdb-account-rg",
 * });
 * const exampleMongoDatabase = new azure.cosmosdb.MongoDatabase("exampleMongoDatabase", {
 *     resourceGroupName: exampleAccount.then(exampleAccount => exampleAccount.resourceGroupName),
 *     accountName: exampleAccount.then(exampleAccount => exampleAccount.name),
 * });
 * const exampleMongoCollection = new azure.cosmosdb.MongoCollection("exampleMongoCollection", {
 *     resourceGroupName: exampleAccount.then(exampleAccount => exampleAccount.resourceGroupName),
 *     accountName: exampleAccount.then(exampleAccount => exampleAccount.name),
 *     databaseName: exampleMongoDatabase.name,
 *     defaultTtlSeconds: "777",
 *     shardKey: "uniqueKey",
 *     throughput: 400,
 *     indices: [{
 *         keys: ["_id"],
 *         unique: true,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * CosmosDB Mongo Collection can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:cosmosdb/mongoCollection:MongoCollection collection1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/account1/mongodbDatabases/db1/collections/collection1
 * ```
 */
class MongoCollection extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["analyticalStorageTtl"] = state ? state.analyticalStorageTtl : undefined;
            resourceInputs["autoscaleSettings"] = state ? state.autoscaleSettings : undefined;
            resourceInputs["databaseName"] = state ? state.databaseName : undefined;
            resourceInputs["defaultTtlSeconds"] = state ? state.defaultTtlSeconds : undefined;
            resourceInputs["indices"] = state ? state.indices : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["shardKey"] = state ? state.shardKey : undefined;
            resourceInputs["systemIndexes"] = state ? state.systemIndexes : undefined;
            resourceInputs["throughput"] = state ? state.throughput : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["analyticalStorageTtl"] = args ? args.analyticalStorageTtl : undefined;
            resourceInputs["autoscaleSettings"] = args ? args.autoscaleSettings : undefined;
            resourceInputs["databaseName"] = args ? args.databaseName : undefined;
            resourceInputs["defaultTtlSeconds"] = args ? args.defaultTtlSeconds : undefined;
            resourceInputs["indices"] = args ? args.indices : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["shardKey"] = args ? args.shardKey : undefined;
            resourceInputs["throughput"] = args ? args.throughput : undefined;
            resourceInputs["systemIndexes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MongoCollection.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing MongoCollection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MongoCollection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MongoCollection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MongoCollection.__pulumiType;
    }
}
exports.MongoCollection = MongoCollection;
/** @internal */
MongoCollection.__pulumiType = 'azure:cosmosdb/mongoCollection:MongoCollection';
//# sourceMappingURL=mongoCollection.js.map