"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StoreFile = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Azure Data Lake Store File.
 *
 * > **Note:** This resoruce manages an `Azure Data Lake Storage Gen1`, previously known as `Azure Data Lake Store`.
 *
 * > **Note:** If you want to change the data in the remote file without changing the `localFilePath`, then
 * taint the resource so the `azure.datalake.StoreFile` gets recreated with the new data.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleStore = new azure.datalake.Store("exampleStore", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 * });
 * const exampleStoreFile = new azure.datalake.StoreFile("exampleStoreFile", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     localFilePath: "/path/to/local/file",
 *     remoteFilePath: "/path/created/for/remote/file",
 * });
 * ```
 *
 * ## Import
 *
 * Data Lake Store File's can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:datalake/storeFile:StoreFile example example.azuredatalakestore.net/test/example.txt
 * ```
 */
class StoreFile extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["localFilePath"] = state ? state.localFilePath : undefined;
            resourceInputs["remoteFilePath"] = state ? state.remoteFilePath : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.localFilePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localFilePath'");
            }
            if ((!args || args.remoteFilePath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteFilePath'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["localFilePath"] = args ? args.localFilePath : undefined;
            resourceInputs["remoteFilePath"] = args ? args.remoteFilePath : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StoreFile.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing StoreFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StoreFile(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StoreFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StoreFile.__pulumiType;
    }
}
exports.StoreFile = StoreFile;
/** @internal */
StoreFile.__pulumiType = 'azure:datalake/storeFile:StoreFile';
//# sourceMappingURL=storeFile.js.map