"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SourceCodeToken = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an App Service source control token.
 *
 * > **NOTE:** Source Control Tokens are configured at the subscription level, not on each App Service - as such this can only be configured Subscription-wide
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const example = new azure.appservice.SourceCodeToken("example", {
 *     token: "7e57735e77e577e57",
 *     type: "GitHub",
 * });
 * ```
 *
 * ## Import
 *
 * App Service Source Control Token's can be imported using the `type`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:appservice/sourceCodeToken:SourceCodeToken example GitHub
 * ```
 */
class SourceCodeToken extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["tokenSecret"] = state ? state.tokenSecret : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.token === undefined) && !opts.urn) {
                throw new Error("Missing required property 'token'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["token"] = args ? args.token : undefined;
            resourceInputs["tokenSecret"] = args ? args.tokenSecret : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SourceCodeToken.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing SourceCodeToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SourceCodeToken(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SourceCodeToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SourceCodeToken.__pulumiType;
    }
}
exports.SourceCodeToken = SourceCodeToken;
/** @internal */
SourceCodeToken.__pulumiType = 'azure:appservice/sourceCodeToken:SourceCodeToken';
//# sourceMappingURL=sourceCodeToken.js.map