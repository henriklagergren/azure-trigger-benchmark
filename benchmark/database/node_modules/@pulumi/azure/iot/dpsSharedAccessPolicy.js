"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DpsSharedAccessPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an IotHub Device Provisioning Service Shared Access Policy
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleIotHubDps = new azure.iot.IotHubDps("exampleIotHubDps", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     sku: {
 *         name: "S1",
 *         capacity: "1",
 *     },
 * });
 * const exampleDpsSharedAccessPolicy = new azure.iot.DpsSharedAccessPolicy("exampleDpsSharedAccessPolicy", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     iothubDpsName: exampleIotHubDps.name,
 *     enrollmentWrite: true,
 *     enrollmentRead: true,
 * });
 * ```
 *
 * ## Import
 *
 * IoTHub Device Provisioning Service Shared Access Policies can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:iot/dpsSharedAccessPolicy:DpsSharedAccessPolicy shared_access_policy1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Devices/provisioningServices/dps1/keys/shared_access_policy1
 * ```
 */
class DpsSharedAccessPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["enrollmentRead"] = state ? state.enrollmentRead : undefined;
            resourceInputs["enrollmentWrite"] = state ? state.enrollmentWrite : undefined;
            resourceInputs["iothubDpsName"] = state ? state.iothubDpsName : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["primaryConnectionString"] = state ? state.primaryConnectionString : undefined;
            resourceInputs["primaryKey"] = state ? state.primaryKey : undefined;
            resourceInputs["registrationRead"] = state ? state.registrationRead : undefined;
            resourceInputs["registrationWrite"] = state ? state.registrationWrite : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["secondaryConnectionString"] = state ? state.secondaryConnectionString : undefined;
            resourceInputs["secondaryKey"] = state ? state.secondaryKey : undefined;
            resourceInputs["serviceConfig"] = state ? state.serviceConfig : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.iothubDpsName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iothubDpsName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["enrollmentRead"] = args ? args.enrollmentRead : undefined;
            resourceInputs["enrollmentWrite"] = args ? args.enrollmentWrite : undefined;
            resourceInputs["iothubDpsName"] = args ? args.iothubDpsName : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["registrationRead"] = args ? args.registrationRead : undefined;
            resourceInputs["registrationWrite"] = args ? args.registrationWrite : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["serviceConfig"] = args ? args.serviceConfig : undefined;
            resourceInputs["primaryConnectionString"] = undefined /*out*/;
            resourceInputs["primaryKey"] = undefined /*out*/;
            resourceInputs["secondaryConnectionString"] = undefined /*out*/;
            resourceInputs["secondaryKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DpsSharedAccessPolicy.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing DpsSharedAccessPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DpsSharedAccessPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DpsSharedAccessPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DpsSharedAccessPolicy.__pulumiType;
    }
}
exports.DpsSharedAccessPolicy = DpsSharedAccessPolicy;
/** @internal */
DpsSharedAccessPolicy.__pulumiType = 'azure:iot/dpsSharedAccessPolicy:DpsSharedAccessPolicy';
//# sourceMappingURL=dpsSharedAccessPolicy.js.map