"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualMachine = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Microsoft SQL Virtual Machine
 *
 * ## Example Usage
 *
 * This example provisions a brief Managed MsSql Virtual Machine.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleVirtualMachine = azure.compute.getVirtualMachine({
 *     name: "example-vm",
 *     resourceGroupName: "example-resources",
 * });
 * const exampleMssql_virtualMachineVirtualMachine = new azure.mssql.VirtualMachine("exampleMssql/virtualMachineVirtualMachine", {
 *     virtualMachineId: exampleVirtualMachine.then(exampleVirtualMachine => exampleVirtualMachine.id),
 *     sqlLicenseType: "PAYG",
 *     rServicesEnabled: true,
 *     sqlConnectivityPort: 1433,
 *     sqlConnectivityType: "PRIVATE",
 *     sqlConnectivityUpdatePassword: "Password1234!",
 *     sqlConnectivityUpdateUsername: "sqllogin",
 *     autoPatching: {
 *         dayOfWeek: "Sunday",
 *         maintenanceWindowDurationInMinutes: 60,
 *         maintenanceWindowStartingHour: 2,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Sql Virtual Machines can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:mssql/virtualMachine:VirtualMachine example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.SqlVirtualMachine/sqlVirtualMachines/example1
 * ```
 */
class VirtualMachine extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["autoBackup"] = state ? state.autoBackup : undefined;
            resourceInputs["autoPatching"] = state ? state.autoPatching : undefined;
            resourceInputs["keyVaultCredential"] = state ? state.keyVaultCredential : undefined;
            resourceInputs["rServicesEnabled"] = state ? state.rServicesEnabled : undefined;
            resourceInputs["sqlConnectivityPort"] = state ? state.sqlConnectivityPort : undefined;
            resourceInputs["sqlConnectivityType"] = state ? state.sqlConnectivityType : undefined;
            resourceInputs["sqlConnectivityUpdatePassword"] = state ? state.sqlConnectivityUpdatePassword : undefined;
            resourceInputs["sqlConnectivityUpdateUsername"] = state ? state.sqlConnectivityUpdateUsername : undefined;
            resourceInputs["sqlLicenseType"] = state ? state.sqlLicenseType : undefined;
            resourceInputs["storageConfiguration"] = state ? state.storageConfiguration : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["virtualMachineId"] = state ? state.virtualMachineId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.sqlLicenseType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sqlLicenseType'");
            }
            if ((!args || args.virtualMachineId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'virtualMachineId'");
            }
            resourceInputs["autoBackup"] = args ? args.autoBackup : undefined;
            resourceInputs["autoPatching"] = args ? args.autoPatching : undefined;
            resourceInputs["keyVaultCredential"] = args ? args.keyVaultCredential : undefined;
            resourceInputs["rServicesEnabled"] = args ? args.rServicesEnabled : undefined;
            resourceInputs["sqlConnectivityPort"] = args ? args.sqlConnectivityPort : undefined;
            resourceInputs["sqlConnectivityType"] = args ? args.sqlConnectivityType : undefined;
            resourceInputs["sqlConnectivityUpdatePassword"] = args ? args.sqlConnectivityUpdatePassword : undefined;
            resourceInputs["sqlConnectivityUpdateUsername"] = args ? args.sqlConnectivityUpdateUsername : undefined;
            resourceInputs["sqlLicenseType"] = args ? args.sqlLicenseType : undefined;
            resourceInputs["storageConfiguration"] = args ? args.storageConfiguration : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["virtualMachineId"] = args ? args.virtualMachineId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualMachine.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VirtualMachine(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachine.__pulumiType;
    }
}
exports.VirtualMachine = VirtualMachine;
/** @internal */
VirtualMachine.__pulumiType = 'azure:mssql/virtualMachine:VirtualMachine';
//# sourceMappingURL=virtualMachine.js.map