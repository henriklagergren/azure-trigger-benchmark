"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoscaleSetting = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a AutoScale Setting which can be applied to Virtual Machine Scale Sets, App Services and other scalable resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleScaleSet = new azure.compute.ScaleSet("exampleScaleSet", {});
 * // ...
 * const exampleAutoscaleSetting = new azure.monitoring.AutoscaleSetting("exampleAutoscaleSetting", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     targetResourceId: exampleScaleSet.id,
 *     profiles: [{
 *         name: "defaultProfile",
 *         capacity: {
 *             "default": 1,
 *             minimum: 1,
 *             maximum: 10,
 *         },
 *         rules: [
 *             {
 *                 metricTrigger: {
 *                     metricName: "Percentage CPU",
 *                     metricResourceId: exampleScaleSet.id,
 *                     timeGrain: "PT1M",
 *                     statistic: "Average",
 *                     timeWindow: "PT5M",
 *                     timeAggregation: "Average",
 *                     operator: "GreaterThan",
 *                     threshold: 75,
 *                     metricNamespace: "microsoft.compute/virtualmachinescalesets",
 *                     dimensions: [{
 *                         name: "AppName",
 *                         operator: "Equals",
 *                         values: ["App1"],
 *                     }],
 *                 },
 *                 scaleAction: {
 *                     direction: "Increase",
 *                     type: "ChangeCount",
 *                     value: "1",
 *                     cooldown: "PT1M",
 *                 },
 *             },
 *             {
 *                 metricTrigger: {
 *                     metricName: "Percentage CPU",
 *                     metricResourceId: exampleScaleSet.id,
 *                     timeGrain: "PT1M",
 *                     statistic: "Average",
 *                     timeWindow: "PT5M",
 *                     timeAggregation: "Average",
 *                     operator: "LessThan",
 *                     threshold: 25,
 *                 },
 *                 scaleAction: {
 *                     direction: "Decrease",
 *                     type: "ChangeCount",
 *                     value: "1",
 *                     cooldown: "PT1M",
 *                 },
 *             },
 *         ],
 *     }],
 *     notification: {
 *         email: {
 *             sendToSubscriptionAdministrator: true,
 *             sendToSubscriptionCoAdministrator: true,
 *             customEmails: ["admin@contoso.com"],
 *         },
 *     },
 * });
 * ```
 * ### Repeating On Weekends)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleScaleSet = new azure.compute.ScaleSet("exampleScaleSet", {});
 * // ...
 * const exampleAutoscaleSetting = new azure.monitoring.AutoscaleSetting("exampleAutoscaleSetting", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     targetResourceId: exampleScaleSet.id,
 *     profiles: [{
 *         name: "Weekends",
 *         capacity: {
 *             "default": 1,
 *             minimum: 1,
 *             maximum: 10,
 *         },
 *         rules: [
 *             {
 *                 metricTrigger: {
 *                     metricName: "Percentage CPU",
 *                     metricResourceId: exampleScaleSet.id,
 *                     timeGrain: "PT1M",
 *                     statistic: "Average",
 *                     timeWindow: "PT5M",
 *                     timeAggregation: "Average",
 *                     operator: "GreaterThan",
 *                     threshold: 90,
 *                 },
 *                 scaleAction: {
 *                     direction: "Increase",
 *                     type: "ChangeCount",
 *                     value: "2",
 *                     cooldown: "PT1M",
 *                 },
 *             },
 *             {
 *                 metricTrigger: {
 *                     metricName: "Percentage CPU",
 *                     metricResourceId: exampleScaleSet.id,
 *                     timeGrain: "PT1M",
 *                     statistic: "Average",
 *                     timeWindow: "PT5M",
 *                     timeAggregation: "Average",
 *                     operator: "LessThan",
 *                     threshold: 10,
 *                 },
 *                 scaleAction: {
 *                     direction: "Decrease",
 *                     type: "ChangeCount",
 *                     value: "2",
 *                     cooldown: "PT1M",
 *                 },
 *             },
 *         ],
 *         recurrence: {
 *             frequency: "Week",
 *             timezone: "Pacific Standard Time",
 *             days: [
 *                 "Saturday",
 *                 "Sunday",
 *             ],
 *             hours: [12],
 *             minutes: [0],
 *         },
 *     }],
 *     notification: {
 *         email: {
 *             sendToSubscriptionAdministrator: true,
 *             sendToSubscriptionCoAdministrator: true,
 *             customEmails: ["admin@contoso.com"],
 *         },
 *     },
 * });
 * ```
 * ### For Fixed Dates)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleScaleSet = new azure.compute.ScaleSet("exampleScaleSet", {});
 * // ...
 * const exampleAutoscaleSetting = new azure.monitoring.AutoscaleSetting("exampleAutoscaleSetting", {
 *     enabled: true,
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     targetResourceId: exampleScaleSet.id,
 *     profiles: [{
 *         name: "forJuly",
 *         capacity: {
 *             "default": 1,
 *             minimum: 1,
 *             maximum: 10,
 *         },
 *         rules: [
 *             {
 *                 metricTrigger: {
 *                     metricName: "Percentage CPU",
 *                     metricResourceId: exampleScaleSet.id,
 *                     timeGrain: "PT1M",
 *                     statistic: "Average",
 *                     timeWindow: "PT5M",
 *                     timeAggregation: "Average",
 *                     operator: "GreaterThan",
 *                     threshold: 90,
 *                 },
 *                 scaleAction: {
 *                     direction: "Increase",
 *                     type: "ChangeCount",
 *                     value: "2",
 *                     cooldown: "PT1M",
 *                 },
 *             },
 *             {
 *                 metricTrigger: {
 *                     metricName: "Percentage CPU",
 *                     metricResourceId: exampleScaleSet.id,
 *                     timeGrain: "PT1M",
 *                     statistic: "Average",
 *                     timeWindow: "PT5M",
 *                     timeAggregation: "Average",
 *                     operator: "LessThan",
 *                     threshold: 10,
 *                 },
 *                 scaleAction: {
 *                     direction: "Decrease",
 *                     type: "ChangeCount",
 *                     value: "2",
 *                     cooldown: "PT1M",
 *                 },
 *             },
 *         ],
 *         fixedDate: {
 *             timezone: "Pacific Standard Time",
 *             start: "2020-07-01T00:00:00Z",
 *             end: "2020-07-31T23:59:59Z",
 *         },
 *     }],
 *     notification: {
 *         email: {
 *             sendToSubscriptionAdministrator: true,
 *             sendToSubscriptionCoAdministrator: true,
 *             customEmails: ["admin@contoso.com"],
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * AutoScale Setting can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:monitoring/autoscaleSetting:AutoscaleSetting example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.Insights/autoscaleSettings/setting1
 * ```
 */
class AutoscaleSetting extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notification"] = state ? state.notification : undefined;
            resourceInputs["profiles"] = state ? state.profiles : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["targetResourceId"] = state ? state.targetResourceId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.profiles === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profiles'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.targetResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResourceId'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notification"] = args ? args.notification : undefined;
            resourceInputs["profiles"] = args ? args.profiles : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["targetResourceId"] = args ? args.targetResourceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AutoscaleSetting.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing AutoscaleSetting resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AutoscaleSetting(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AutoscaleSetting.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AutoscaleSetting.__pulumiType;
    }
}
exports.AutoscaleSetting = AutoscaleSetting;
/** @internal */
AutoscaleSetting.__pulumiType = 'azure:monitoring/autoscaleSetting:AutoscaleSetting';
//# sourceMappingURL=autoscaleSetting.js.map