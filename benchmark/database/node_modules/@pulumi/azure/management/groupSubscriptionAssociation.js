"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupSubscriptionAssociation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Management Group Subscription Association.
 *
 * !> **Note:** When using this resource, configuring `subscriptionIds` on the `azure.management.Group` resource is not supported.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleGroup = azure.management.getGroup({
 *     name: "exampleManagementGroup",
 * });
 * const exampleSubscription = azure.core.getSubscription({
 *     subscriptionId: "12345678-1234-1234-1234-123456789012",
 * });
 * const exampleGroupSubscriptionAssociation = new azure.management.GroupSubscriptionAssociation("exampleGroupSubscriptionAssociation", {
 *     managementGroupId: exampleGroup.then(exampleGroup => exampleGroup.id),
 *     subscriptionId: exampleSubscription.then(exampleSubscription => exampleSubscription.id),
 * });
 * ```
 *
 * ## Import
 *
 * Managements can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:management/groupSubscriptionAssociation:GroupSubscriptionAssociation example /managementGroup/MyManagementGroup/subscription/12345678-1234-1234-1234-123456789012
 * ```
 */
class GroupSubscriptionAssociation extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["managementGroupId"] = state ? state.managementGroupId : undefined;
            resourceInputs["subscriptionId"] = state ? state.subscriptionId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.managementGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managementGroupId'");
            }
            if ((!args || args.subscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionId'");
            }
            resourceInputs["managementGroupId"] = args ? args.managementGroupId : undefined;
            resourceInputs["subscriptionId"] = args ? args.subscriptionId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GroupSubscriptionAssociation.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing GroupSubscriptionAssociation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GroupSubscriptionAssociation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GroupSubscriptionAssociation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GroupSubscriptionAssociation.__pulumiType;
    }
}
exports.GroupSubscriptionAssociation = GroupSubscriptionAssociation;
/** @internal */
GroupSubscriptionAssociation.__pulumiType = 'azure:management/groupSubscriptionAssociation:GroupSubscriptionAssociation';
//# sourceMappingURL=groupSubscriptionAssociation.js.map