"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Definition = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a [Lighthouse](https://docs.microsoft.com/en-us/azure/lighthouse) Definition.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const contributor = azure.authorization.getRoleDefinition({
 *     roleDefinitionId: "b24988ac-6180-42a0-ab88-20f7382dd24c",
 * });
 * const example = new azure.lighthouse.Definition("example", {
 *     description: "This is a lighthouse definition created IaC",
 *     managingTenantId: "00000000-0000-0000-0000-000000000000",
 *     scope: "/subscriptions/00000000-0000-0000-0000-000000000000",
 *     authorizations: [{
 *         principalId: "00000000-0000-0000-0000-000000000000",
 *         roleDefinitionId: contributor.then(contributor => contributor.roleDefinitionId),
 *         principalDisplayName: "Tier 1 Support",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Lighthouse Definitions can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:lighthouse/definition:Definition example /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.ManagedServices/registrationDefinitions/00000000-0000-0000-0000-000000000000
 * ```
 */
class Definition extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authorizations"] = state ? state.authorizations : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lighthouseDefinitionId"] = state ? state.lighthouseDefinitionId : undefined;
            resourceInputs["managingTenantId"] = state ? state.managingTenantId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plan"] = state ? state.plan : undefined;
            resourceInputs["scope"] = state ? state.scope : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.authorizations === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizations'");
            }
            if ((!args || args.managingTenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managingTenantId'");
            }
            if ((!args || args.scope === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scope'");
            }
            resourceInputs["authorizations"] = args ? args.authorizations : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["lighthouseDefinitionId"] = args ? args.lighthouseDefinitionId : undefined;
            resourceInputs["managingTenantId"] = args ? args.managingTenantId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["scope"] = args ? args.scope : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Definition.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Definition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Definition(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Definition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Definition.__pulumiType;
    }
}
exports.Definition = Definition;
/** @internal */
Definition.__pulumiType = 'azure:lighthouse/definition:Definition';
//# sourceMappingURL=definition.js.map