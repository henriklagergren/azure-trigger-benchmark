"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedStorageAccountSasTokenDefinition = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Key Vault Managed Storage Account SAS Definition.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleClientConfig = azure.core.getClientConfig({});
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleAccountSAS = azure.storage.getAccountSASOutput({
 *     connectionString: exampleAccount.primaryConnectionString,
 *     httpsOnly: true,
 *     resourceTypes: {
 *         service: true,
 *         container: false,
 *         object: false,
 *     },
 *     services: {
 *         blob: true,
 *         queue: false,
 *         table: false,
 *         file: false,
 *     },
 *     start: "2021-04-30T00:00:00Z",
 *     expiry: "2023-04-30T00:00:00Z",
 *     permissions: {
 *         read: true,
 *         write: true,
 *         "delete": false,
 *         list: false,
 *         add: true,
 *         create: true,
 *         update: false,
 *         process: false,
 *     },
 * });
 * const exampleKeyVault = new azure.keyvault.KeyVault("exampleKeyVault", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     tenantId: data.azurerm_client_config.current.tenant_id,
 *     skuName: "standard",
 *     accessPolicies: [{
 *         tenantId: data.azurerm_client_config.current.tenant_id,
 *         objectId: data.azurerm_client_config.current.object_id,
 *         secretPermissions: [
 *             "Get",
 *             "Delete",
 *         ],
 *         storagePermissions: [
 *             "Get",
 *             "List",
 *             "Set",
 *             "SetSAS",
 *             "GetSAS",
 *             "DeleteSAS",
 *             "Update",
 *             "RegenerateKey",
 *         ],
 *     }],
 * });
 * const test = new azure.keyvault.ManagedStorageAccount("test", {
 *     keyVaultId: exampleKeyVault.id,
 *     storageAccountId: exampleAccount.id,
 *     storageAccountKey: "key1",
 *     regenerateKeyAutomatically: false,
 *     regenerationPeriod: "P1D",
 * });
 * const exampleManagedStorageAccountSasTokenDefinition = new azure.keyvault.ManagedStorageAccountSasTokenDefinition("exampleManagedStorageAccountSasTokenDefinition", {
 *     validityPeriod: "P1D",
 *     managedStorageAccountId: azurerm_key_vault_managed_storage_account.example.id,
 *     sasTemplateUri: exampleAccountSAS.apply(exampleAccountSAS => exampleAccountSAS.sas),
 *     sasType: "account",
 * });
 * ```
 *
 * ## Import
 *
 * Key Vaults can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:keyvault/managedStorageAccountSasTokenDefinition:ManagedStorageAccountSasTokenDefinition example https://example-keyvault.vault.azure.net/storage/exampleStorageAcc01/sas/exampleSasDefinition01
 * ```
 */
class ManagedStorageAccountSasTokenDefinition extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["managedStorageAccountId"] = state ? state.managedStorageAccountId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["sasTemplateUri"] = state ? state.sasTemplateUri : undefined;
            resourceInputs["sasType"] = state ? state.sasType : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["validityPeriod"] = state ? state.validityPeriod : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.managedStorageAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'managedStorageAccountId'");
            }
            if ((!args || args.sasTemplateUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sasTemplateUri'");
            }
            if ((!args || args.sasType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sasType'");
            }
            if ((!args || args.validityPeriod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'validityPeriod'");
            }
            resourceInputs["managedStorageAccountId"] = args ? args.managedStorageAccountId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["sasTemplateUri"] = args ? args.sasTemplateUri : undefined;
            resourceInputs["sasType"] = args ? args.sasType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["validityPeriod"] = args ? args.validityPeriod : undefined;
            resourceInputs["secretId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedStorageAccountSasTokenDefinition.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ManagedStorageAccountSasTokenDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ManagedStorageAccountSasTokenDefinition(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ManagedStorageAccountSasTokenDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedStorageAccountSasTokenDefinition.__pulumiType;
    }
}
exports.ManagedStorageAccountSasTokenDefinition = ManagedStorageAccountSasTokenDefinition;
/** @internal */
ManagedStorageAccountSasTokenDefinition.__pulumiType = 'azure:keyvault/managedStorageAccountSasTokenDefinition:ManagedStorageAccountSasTokenDefinition';
//# sourceMappingURL=managedStorageAccountSasTokenDefinition.js.map