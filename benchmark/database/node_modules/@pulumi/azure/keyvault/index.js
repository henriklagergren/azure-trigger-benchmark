"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./accessPolicy"), exports);
__exportStar(require("./certifiate"), exports);
__exportStar(require("./certificate"), exports);
__exportStar(require("./certificateIssuer"), exports);
__exportStar(require("./getAccessPolicy"), exports);
__exportStar(require("./getCertificate"), exports);
__exportStar(require("./getCertificateData"), exports);
__exportStar(require("./getCertificateIssuer"), exports);
__exportStar(require("./getKey"), exports);
__exportStar(require("./getKeyVault"), exports);
__exportStar(require("./getManagedHardwareSecurityModule"), exports);
__exportStar(require("./getSecret"), exports);
__exportStar(require("./getSecrets"), exports);
__exportStar(require("./key"), exports);
__exportStar(require("./keyVault"), exports);
__exportStar(require("./managedHardwareSecurityModule"), exports);
__exportStar(require("./managedStorageAccount"), exports);
__exportStar(require("./managedStorageAccountSasTokenDefinition"), exports);
__exportStar(require("./secret"), exports);
// Import resources to register:
const accessPolicy_1 = require("./accessPolicy");
const certifiate_1 = require("./certifiate");
const certificate_1 = require("./certificate");
const certificateIssuer_1 = require("./certificateIssuer");
const key_1 = require("./key");
const keyVault_1 = require("./keyVault");
const managedHardwareSecurityModule_1 = require("./managedHardwareSecurityModule");
const managedStorageAccount_1 = require("./managedStorageAccount");
const managedStorageAccountSasTokenDefinition_1 = require("./managedStorageAccountSasTokenDefinition");
const secret_1 = require("./secret");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:keyvault/accessPolicy:AccessPolicy":
                return new accessPolicy_1.AccessPolicy(name, undefined, { urn });
            case "azure:keyvault/certifiate:Certifiate":
                return new certifiate_1.Certifiate(name, undefined, { urn });
            case "azure:keyvault/certificate:Certificate":
                return new certificate_1.Certificate(name, undefined, { urn });
            case "azure:keyvault/certificateIssuer:CertificateIssuer":
                return new certificateIssuer_1.CertificateIssuer(name, undefined, { urn });
            case "azure:keyvault/key:Key":
                return new key_1.Key(name, undefined, { urn });
            case "azure:keyvault/keyVault:KeyVault":
                return new keyVault_1.KeyVault(name, undefined, { urn });
            case "azure:keyvault/managedHardwareSecurityModule:ManagedHardwareSecurityModule":
                return new managedHardwareSecurityModule_1.ManagedHardwareSecurityModule(name, undefined, { urn });
            case "azure:keyvault/managedStorageAccount:ManagedStorageAccount":
                return new managedStorageAccount_1.ManagedStorageAccount(name, undefined, { urn });
            case "azure:keyvault/managedStorageAccountSasTokenDefinition:ManagedStorageAccountSasTokenDefinition":
                return new managedStorageAccountSasTokenDefinition_1.ManagedStorageAccountSasTokenDefinition(name, undefined, { urn });
            case "azure:keyvault/secret:Secret":
                return new secret_1.Secret(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "keyvault/accessPolicy", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/certifiate", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/certificate", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/certificateIssuer", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/key", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/keyVault", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/managedHardwareSecurityModule", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/managedStorageAccount", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/managedStorageAccountSasTokenDefinition", _module);
pulumi.runtime.registerResourceModule("azure", "keyvault/secret", _module);
//# sourceMappingURL=index.js.map