"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyVault = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Key Vault.
 *
 * ## Disclaimers
 *
 * > **Note:** It's possible to define Key Vault Access Policies both within the `azure.keyvault.KeyVault` resource via the `accessPolicy` block and by using the `azure.keyvault.AccessPolicy` resource. However it's not possible to use both methods to manage Access Policies within a KeyVault, since there'll be conflicts.
 *
 * > **Note:** This provider will automatically recover a soft-deleted Key Vault during Creation if one is found - you can opt out of this using the `features` configuration within the Provider configuration block.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const current = azure.core.getClientConfig({});
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleKeyVault = new azure.keyvault.KeyVault("exampleKeyVault", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     enabledForDiskEncryption: true,
 *     tenantId: current.then(current => current.tenantId),
 *     softDeleteRetentionDays: 7,
 *     purgeProtectionEnabled: false,
 *     skuName: "standard",
 *     accessPolicies: [{
 *         tenantId: current.then(current => current.tenantId),
 *         objectId: current.then(current => current.objectId),
 *         keyPermissions: ["Get"],
 *         secretPermissions: ["Get"],
 *         storagePermissions: ["Get"],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Key Vault's can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:keyvault/keyVault:KeyVault example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.KeyVault/vaults/vault1
 * ```
 */
class KeyVault extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessPolicies"] = state ? state.accessPolicies : undefined;
            resourceInputs["contacts"] = state ? state.contacts : undefined;
            resourceInputs["enableRbacAuthorization"] = state ? state.enableRbacAuthorization : undefined;
            resourceInputs["enabledForDeployment"] = state ? state.enabledForDeployment : undefined;
            resourceInputs["enabledForDiskEncryption"] = state ? state.enabledForDiskEncryption : undefined;
            resourceInputs["enabledForTemplateDeployment"] = state ? state.enabledForTemplateDeployment : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkAcls"] = state ? state.networkAcls : undefined;
            resourceInputs["purgeProtectionEnabled"] = state ? state.purgeProtectionEnabled : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["skuName"] = state ? state.skuName : undefined;
            resourceInputs["softDeleteEnabled"] = state ? state.softDeleteEnabled : undefined;
            resourceInputs["softDeleteRetentionDays"] = state ? state.softDeleteRetentionDays : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tenantId"] = state ? state.tenantId : undefined;
            resourceInputs["vaultUri"] = state ? state.vaultUri : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.skuName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'skuName'");
            }
            if ((!args || args.tenantId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantId'");
            }
            resourceInputs["accessPolicies"] = args ? args.accessPolicies : undefined;
            resourceInputs["contacts"] = args ? args.contacts : undefined;
            resourceInputs["enableRbacAuthorization"] = args ? args.enableRbacAuthorization : undefined;
            resourceInputs["enabledForDeployment"] = args ? args.enabledForDeployment : undefined;
            resourceInputs["enabledForDiskEncryption"] = args ? args.enabledForDiskEncryption : undefined;
            resourceInputs["enabledForTemplateDeployment"] = args ? args.enabledForTemplateDeployment : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkAcls"] = args ? args.networkAcls : undefined;
            resourceInputs["purgeProtectionEnabled"] = args ? args.purgeProtectionEnabled : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["skuName"] = args ? args.skuName : undefined;
            resourceInputs["softDeleteEnabled"] = args ? args.softDeleteEnabled : undefined;
            resourceInputs["softDeleteRetentionDays"] = args ? args.softDeleteRetentionDays : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["tenantId"] = args ? args.tenantId : undefined;
            resourceInputs["vaultUri"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyVault.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing KeyVault resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new KeyVault(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of KeyVault.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyVault.__pulumiType;
    }
}
exports.KeyVault = KeyVault;
/** @internal */
KeyVault.__pulumiType = 'azure:keyvault/keyVault:KeyVault';
//# sourceMappingURL=keyVault.js.map