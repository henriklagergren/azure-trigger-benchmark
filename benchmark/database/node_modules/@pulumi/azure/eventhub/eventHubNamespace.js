"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventHubNamespace = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an EventHub Namespace.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleEventHubNamespace = new azure.eventhub.EventHubNamespace("exampleEventHubNamespace", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     sku: "Standard",
 *     capacity: 2,
 *     tags: {
 *         environment: "Production",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * EventHub Namespaces can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:eventhub/eventHubNamespace:EventHubNamespace namespace1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.EventHub/namespaces/namespace1
 * ```
 */
class EventHubNamespace extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["autoInflateEnabled"] = state ? state.autoInflateEnabled : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["dedicatedClusterId"] = state ? state.dedicatedClusterId : undefined;
            resourceInputs["defaultPrimaryConnectionString"] = state ? state.defaultPrimaryConnectionString : undefined;
            resourceInputs["defaultPrimaryConnectionStringAlias"] = state ? state.defaultPrimaryConnectionStringAlias : undefined;
            resourceInputs["defaultPrimaryKey"] = state ? state.defaultPrimaryKey : undefined;
            resourceInputs["defaultSecondaryConnectionString"] = state ? state.defaultSecondaryConnectionString : undefined;
            resourceInputs["defaultSecondaryConnectionStringAlias"] = state ? state.defaultSecondaryConnectionStringAlias : undefined;
            resourceInputs["defaultSecondaryKey"] = state ? state.defaultSecondaryKey : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["maximumThroughputUnits"] = state ? state.maximumThroughputUnits : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkRulesets"] = state ? state.networkRulesets : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["sku"] = state ? state.sku : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["zoneRedundant"] = state ? state.zoneRedundant : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.sku === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sku'");
            }
            resourceInputs["autoInflateEnabled"] = args ? args.autoInflateEnabled : undefined;
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["dedicatedClusterId"] = args ? args.dedicatedClusterId : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["maximumThroughputUnits"] = args ? args.maximumThroughputUnits : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkRulesets"] = args ? args.networkRulesets : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["sku"] = args ? args.sku : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["zoneRedundant"] = args ? args.zoneRedundant : undefined;
            resourceInputs["defaultPrimaryConnectionString"] = undefined /*out*/;
            resourceInputs["defaultPrimaryConnectionStringAlias"] = undefined /*out*/;
            resourceInputs["defaultPrimaryKey"] = undefined /*out*/;
            resourceInputs["defaultSecondaryConnectionString"] = undefined /*out*/;
            resourceInputs["defaultSecondaryConnectionStringAlias"] = undefined /*out*/;
            resourceInputs["defaultSecondaryKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EventHubNamespace.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing EventHubNamespace resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EventHubNamespace(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EventHubNamespace.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventHubNamespace.__pulumiType;
    }
}
exports.EventHubNamespace = EventHubNamespace;
/** @internal */
EventHubNamespace.__pulumiType = 'azure:eventhub/eventHubNamespace:EventHubNamespace';
//# sourceMappingURL=eventHubNamespace.js.map