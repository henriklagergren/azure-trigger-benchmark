"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./account"), exports);
__exportStar(require("./datasetBlobStorage"), exports);
__exportStar(require("./datasetDataLakeGen1"), exports);
__exportStar(require("./datasetDataLakeGen2"), exports);
__exportStar(require("./datasetKustoCluster"), exports);
__exportStar(require("./datasetKustoDatabase"), exports);
__exportStar(require("./getAccount"), exports);
__exportStar(require("./getDatasetBlobStorage"), exports);
__exportStar(require("./getDatasetDataLakeGen1"), exports);
__exportStar(require("./getDatasetDataLakeGen2"), exports);
__exportStar(require("./getDatasetKustoCluster"), exports);
__exportStar(require("./getDatasetKustoDatabase"), exports);
__exportStar(require("./getShare"), exports);
__exportStar(require("./share"), exports);
// Import resources to register:
const account_1 = require("./account");
const datasetBlobStorage_1 = require("./datasetBlobStorage");
const datasetDataLakeGen1_1 = require("./datasetDataLakeGen1");
const datasetDataLakeGen2_1 = require("./datasetDataLakeGen2");
const datasetKustoCluster_1 = require("./datasetKustoCluster");
const datasetKustoDatabase_1 = require("./datasetKustoDatabase");
const share_1 = require("./share");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:datashare/account:Account":
                return new account_1.Account(name, undefined, { urn });
            case "azure:datashare/datasetBlobStorage:DatasetBlobStorage":
                return new datasetBlobStorage_1.DatasetBlobStorage(name, undefined, { urn });
            case "azure:datashare/datasetDataLakeGen1:DatasetDataLakeGen1":
                return new datasetDataLakeGen1_1.DatasetDataLakeGen1(name, undefined, { urn });
            case "azure:datashare/datasetDataLakeGen2:DatasetDataLakeGen2":
                return new datasetDataLakeGen2_1.DatasetDataLakeGen2(name, undefined, { urn });
            case "azure:datashare/datasetKustoCluster:DatasetKustoCluster":
                return new datasetKustoCluster_1.DatasetKustoCluster(name, undefined, { urn });
            case "azure:datashare/datasetKustoDatabase:DatasetKustoDatabase":
                return new datasetKustoDatabase_1.DatasetKustoDatabase(name, undefined, { urn });
            case "azure:datashare/share:Share":
                return new share_1.Share(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "datashare/account", _module);
pulumi.runtime.registerResourceModule("azure", "datashare/datasetBlobStorage", _module);
pulumi.runtime.registerResourceModule("azure", "datashare/datasetDataLakeGen1", _module);
pulumi.runtime.registerResourceModule("azure", "datashare/datasetDataLakeGen2", _module);
pulumi.runtime.registerResourceModule("azure", "datashare/datasetKustoCluster", _module);
pulumi.runtime.registerResourceModule("azure", "datashare/datasetKustoDatabase", _module);
pulumi.runtime.registerResourceModule("azure", "datashare/share", _module);
//# sourceMappingURL=index.js.map