"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatasetBlobStorage = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Data Share Blob Storage Dataset.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as azuread from "@pulumi/azuread";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.datashare.Account("exampleAccount", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     identity: {
 *         type: "SystemAssigned",
 *     },
 * });
 * const exampleShare = new azure.datashare.Share("exampleShare", {
 *     accountId: exampleAccount.id,
 *     kind: "CopyBased",
 * });
 * const exampleStorage_accountAccount = new azure.storage.Account("exampleStorage/accountAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "RAGRS",
 * });
 * const exampleContainer = new azure.storage.Container("exampleContainer", {
 *     storageAccountName: exampleStorage / accountAccount.name,
 *     containerAccessType: "container",
 * });
 * const exampleServicePrincipal = azuread.getServicePrincipalOutput({
 *     displayName: exampleAccount.name,
 * });
 * const exampleAssignment = new azure.authorization.Assignment("exampleAssignment", {
 *     scope: exampleStorage / accountAccount.id,
 *     roleDefinitionName: "Storage Blob Data Reader",
 *     principalId: exampleServicePrincipal.apply(exampleServicePrincipal => exampleServicePrincipal.objectId),
 * });
 * const exampleDatasetBlobStorage = new azure.datashare.DatasetBlobStorage("exampleDatasetBlobStorage", {
 *     dataShareId: exampleShare.id,
 *     containerName: exampleContainer.name,
 *     storageAccount: {
 *         name: exampleStorage / accountAccount.name,
 *         resourceGroupName: exampleStorage / accountAccount.resourceGroupName,
 *         subscriptionId: "00000000-0000-0000-0000-000000000000",
 *     },
 *     filePath: "myfile.txt",
 * }, {
 *     dependsOn: [exampleAssignment],
 * });
 * ```
 *
 * ## Import
 *
 * Data Share Blob Storage Datasets can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:datashare/datasetBlobStorage:DatasetBlobStorage example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.DataShare/accounts/account1/shares/share1/dataSets/dataSet1
 * ```
 */
class DatasetBlobStorage extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["containerName"] = state ? state.containerName : undefined;
            resourceInputs["dataShareId"] = state ? state.dataShareId : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["filePath"] = state ? state.filePath : undefined;
            resourceInputs["folderPath"] = state ? state.folderPath : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["storageAccount"] = state ? state.storageAccount : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.containerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'containerName'");
            }
            if ((!args || args.dataShareId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dataShareId'");
            }
            if ((!args || args.storageAccount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageAccount'");
            }
            resourceInputs["containerName"] = args ? args.containerName : undefined;
            resourceInputs["dataShareId"] = args ? args.dataShareId : undefined;
            resourceInputs["filePath"] = args ? args.filePath : undefined;
            resourceInputs["folderPath"] = args ? args.folderPath : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["storageAccount"] = args ? args.storageAccount : undefined;
            resourceInputs["displayName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DatasetBlobStorage.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing DatasetBlobStorage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DatasetBlobStorage(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DatasetBlobStorage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatasetBlobStorage.__pulumiType;
    }
}
exports.DatasetBlobStorage = DatasetBlobStorage;
/** @internal */
DatasetBlobStorage.__pulumiType = 'azure:datashare/datasetBlobStorage:DatasetBlobStorage';
//# sourceMappingURL=datasetBlobStorage.js.map