"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Endpoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleProfile = new azure.cdn.Profile("exampleProfile", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     sku: "Standard_Verizon",
 * });
 * const exampleEndpoint = new azure.cdn.Endpoint("exampleEndpoint", {
 *     profileName: exampleProfile.name,
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     origins: [{
 *         name: "example",
 *         hostName: "www.contoso.com",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * CDN Endpoints can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:cdn/endpoint:Endpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Cdn/profiles/myprofile1/endpoints/myendpoint1
 * ```
 */
class Endpoint extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["contentTypesToCompresses"] = state ? state.contentTypesToCompresses : undefined;
            resourceInputs["deliveryRules"] = state ? state.deliveryRules : undefined;
            resourceInputs["geoFilters"] = state ? state.geoFilters : undefined;
            resourceInputs["globalDeliveryRule"] = state ? state.globalDeliveryRule : undefined;
            resourceInputs["hostName"] = state ? state.hostName : undefined;
            resourceInputs["isCompressionEnabled"] = state ? state.isCompressionEnabled : undefined;
            resourceInputs["isHttpAllowed"] = state ? state.isHttpAllowed : undefined;
            resourceInputs["isHttpsAllowed"] = state ? state.isHttpsAllowed : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["optimizationType"] = state ? state.optimizationType : undefined;
            resourceInputs["originHostHeader"] = state ? state.originHostHeader : undefined;
            resourceInputs["originPath"] = state ? state.originPath : undefined;
            resourceInputs["origins"] = state ? state.origins : undefined;
            resourceInputs["probePath"] = state ? state.probePath : undefined;
            resourceInputs["profileName"] = state ? state.profileName : undefined;
            resourceInputs["querystringCachingBehaviour"] = state ? state.querystringCachingBehaviour : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.origins === undefined) && !opts.urn) {
                throw new Error("Missing required property 'origins'");
            }
            if ((!args || args.profileName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["contentTypesToCompresses"] = args ? args.contentTypesToCompresses : undefined;
            resourceInputs["deliveryRules"] = args ? args.deliveryRules : undefined;
            resourceInputs["geoFilters"] = args ? args.geoFilters : undefined;
            resourceInputs["globalDeliveryRule"] = args ? args.globalDeliveryRule : undefined;
            resourceInputs["isCompressionEnabled"] = args ? args.isCompressionEnabled : undefined;
            resourceInputs["isHttpAllowed"] = args ? args.isHttpAllowed : undefined;
            resourceInputs["isHttpsAllowed"] = args ? args.isHttpsAllowed : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["optimizationType"] = args ? args.optimizationType : undefined;
            resourceInputs["originHostHeader"] = args ? args.originHostHeader : undefined;
            resourceInputs["originPath"] = args ? args.originPath : undefined;
            resourceInputs["origins"] = args ? args.origins : undefined;
            resourceInputs["probePath"] = args ? args.probePath : undefined;
            resourceInputs["profileName"] = args ? args.profileName : undefined;
            resourceInputs["querystringCachingBehaviour"] = args ? args.querystringCachingBehaviour : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["hostName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Endpoint.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Endpoint(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Endpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Endpoint.__pulumiType;
    }
}
exports.Endpoint = Endpoint;
/** @internal */
Endpoint.__pulumiType = 'azure:cdn/endpoint:Endpoint';
//# sourceMappingURL=endpoint.js.map