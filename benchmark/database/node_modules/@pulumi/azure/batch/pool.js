"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pool = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Batch pool.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * from "fs";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAccount = new azure.storage.Account("exampleAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     accountTier: "Standard",
 *     accountReplicationType: "LRS",
 * });
 * const exampleBatch_accountAccount = new azure.batch.Account("exampleBatch/accountAccount", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     location: exampleResourceGroup.location,
 *     poolAllocationMode: "BatchService",
 *     storageAccountId: exampleAccount.id,
 *     tags: {
 *         env: "test",
 *     },
 * });
 * const exampleCertificate = new azure.batch.Certificate("exampleCertificate", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     accountName: exampleBatch / accountAccount.name,
 *     certificate: Buffer.from(fs.readFileSync("certificate.cer"), 'binary').toString('base64'),
 *     format: "Cer",
 *     thumbprint: "312d31a79fa0cef49c00f769afc2b73e9f4edf34",
 *     thumbprintAlgorithm: "SHA1",
 * });
 * const examplePool = new azure.batch.Pool("examplePool", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     accountName: exampleBatch / accountAccount.name,
 *     displayName: "Test Acc Pool Auto",
 *     vmSize: "Standard_A1",
 *     nodeAgentSkuId: "batch.node.ubuntu 20.04",
 *     autoScale: {
 *         evaluationInterval: "PT15M",
 *         formula: `      startingNumberOfVMs = 1;
 *       maxNumberofVMs = 25;
 *       pendingTaskSamplePercent = $PendingTasks.GetSamplePercent(180 * TimeInterval_Second);
 *       pendingTaskSamples = pendingTaskSamplePercent < 70 ? startingNumberOfVMs : avg($PendingTasks.GetSample(180 *   TimeInterval_Second));
 *       $TargetDedicatedNodes=min(maxNumberofVMs, pendingTaskSamples);
 * `,
 *     },
 *     storageImageReference: {
 *         publisher: "microsoft-azure-batch",
 *         offer: "ubuntu-server-container",
 *         sku: "20-04-lts",
 *         version: "latest",
 *     },
 *     containerConfiguration: {
 *         type: "DockerCompatible",
 *         containerRegistries: [{
 *             registryServer: "docker.io",
 *             userName: "login",
 *             password: "apassword",
 *         }],
 *     },
 *     startTask: {
 *         commandLine: `echo 'Hello World from $env'`,
 *         taskRetryMaximum: 1,
 *         waitForSuccess: true,
 *         commonEnvironmentProperties: {
 *             env: "TEST",
 *         },
 *         userIdentity: {
 *             autoUser: {
 *                 elevationLevel: "NonAdmin",
 *                 scope: "Task",
 *             },
 *         },
 *     },
 *     certificates: [{
 *         id: exampleCertificate.id,
 *         visibilities: ["StartTask"],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Batch Pools can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:batch/pool:Pool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.Batch/batchAccounts/myBatchAccount1/pools/myBatchPool1
 * ```
 */
class Pool extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accountName"] = state ? state.accountName : undefined;
            resourceInputs["autoScale"] = state ? state.autoScale : undefined;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["containerConfiguration"] = state ? state.containerConfiguration : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["fixedScale"] = state ? state.fixedScale : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["maxTasksPerNode"] = state ? state.maxTasksPerNode : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["networkConfiguration"] = state ? state.networkConfiguration : undefined;
            resourceInputs["nodeAgentSkuId"] = state ? state.nodeAgentSkuId : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["startTask"] = state ? state.startTask : undefined;
            resourceInputs["stopPendingResizeOperation"] = state ? state.stopPendingResizeOperation : undefined;
            resourceInputs["storageImageReference"] = state ? state.storageImageReference : undefined;
            resourceInputs["vmSize"] = state ? state.vmSize : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.accountName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountName'");
            }
            if ((!args || args.nodeAgentSkuId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeAgentSkuId'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.storageImageReference === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageImageReference'");
            }
            if ((!args || args.vmSize === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vmSize'");
            }
            resourceInputs["accountName"] = args ? args.accountName : undefined;
            resourceInputs["autoScale"] = args ? args.autoScale : undefined;
            resourceInputs["certificates"] = args ? args.certificates : undefined;
            resourceInputs["containerConfiguration"] = args ? args.containerConfiguration : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["fixedScale"] = args ? args.fixedScale : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["maxTasksPerNode"] = args ? args.maxTasksPerNode : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["networkConfiguration"] = args ? args.networkConfiguration : undefined;
            resourceInputs["nodeAgentSkuId"] = args ? args.nodeAgentSkuId : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["startTask"] = args ? args.startTask : undefined;
            resourceInputs["stopPendingResizeOperation"] = args ? args.stopPendingResizeOperation : undefined;
            resourceInputs["storageImageReference"] = args ? args.storageImageReference : undefined;
            resourceInputs["vmSize"] = args ? args.vmSize : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Pool.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Pool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Pool(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Pool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Pool.__pulumiType;
    }
}
exports.Pool = Pool;
/** @internal */
Pool.__pulumiType = 'azure:batch/pool:Pool';
//# sourceMappingURL=pool.js.map