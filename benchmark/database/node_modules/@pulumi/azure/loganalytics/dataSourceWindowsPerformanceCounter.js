"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataSourceWindowsPerformanceCounter = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Log Analytics (formally Operational Insights) Windows Performance Counter DataSource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleAnalyticsWorkspace = new azure.operationalinsights.AnalyticsWorkspace("exampleAnalyticsWorkspace", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 *     sku: "PerGB2018",
 * });
 * const exampleDataSourceWindowsPerformanceCounter = new azure.loganalytics.DataSourceWindowsPerformanceCounter("exampleDataSourceWindowsPerformanceCounter", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     workspaceName: exampleAnalyticsWorkspace.name,
 *     objectName: "CPU",
 *     instanceName: "*",
 *     counterName: "CPU",
 *     intervalSeconds: 10,
 * });
 * ```
 *
 * ## Import
 *
 * Log Analytics Windows Performance Counter DataSources can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:loganalytics/dataSourceWindowsPerformanceCounter:DataSourceWindowsPerformanceCounter example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.OperationalInsights/workspaces/workspace1/datasources/datasource1
 * ```
 */
class DataSourceWindowsPerformanceCounter extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["counterName"] = state ? state.counterName : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["intervalSeconds"] = state ? state.intervalSeconds : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectName"] = state ? state.objectName : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["workspaceName"] = state ? state.workspaceName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.counterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'counterName'");
            }
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if ((!args || args.intervalSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'intervalSeconds'");
            }
            if ((!args || args.objectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectName'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.workspaceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceName'");
            }
            resourceInputs["counterName"] = args ? args.counterName : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["intervalSeconds"] = args ? args.intervalSeconds : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectName"] = args ? args.objectName : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["workspaceName"] = args ? args.workspaceName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataSourceWindowsPerformanceCounter.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing DataSourceWindowsPerformanceCounter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DataSourceWindowsPerformanceCounter(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DataSourceWindowsPerformanceCounter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataSourceWindowsPerformanceCounter.__pulumiType;
    }
}
exports.DataSourceWindowsPerformanceCounter = DataSourceWindowsPerformanceCounter;
/** @internal */
DataSourceWindowsPerformanceCounter.__pulumiType = 'azure:loganalytics/dataSourceWindowsPerformanceCounter:DataSourceWindowsPerformanceCounter';
//# sourceMappingURL=dataSourceWindowsPerformanceCounter.js.map