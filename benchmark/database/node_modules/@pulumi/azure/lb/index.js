"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./backendAddressPool"), exports);
__exportStar(require("./backendAddressPoolAddress"), exports);
__exportStar(require("./getBackendAddressPool"), exports);
__exportStar(require("./getLB"), exports);
__exportStar(require("./getLBRule"), exports);
__exportStar(require("./loadBalancer"), exports);
__exportStar(require("./natPool"), exports);
__exportStar(require("./natRule"), exports);
__exportStar(require("./outboundRule"), exports);
__exportStar(require("./probe"), exports);
__exportStar(require("./rule"), exports);
// Import resources to register:
const backendAddressPool_1 = require("./backendAddressPool");
const backendAddressPoolAddress_1 = require("./backendAddressPoolAddress");
const loadBalancer_1 = require("./loadBalancer");
const natPool_1 = require("./natPool");
const natRule_1 = require("./natRule");
const outboundRule_1 = require("./outboundRule");
const probe_1 = require("./probe");
const rule_1 = require("./rule");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "azure:lb/backendAddressPool:BackendAddressPool":
                return new backendAddressPool_1.BackendAddressPool(name, undefined, { urn });
            case "azure:lb/backendAddressPoolAddress:BackendAddressPoolAddress":
                return new backendAddressPoolAddress_1.BackendAddressPoolAddress(name, undefined, { urn });
            case "azure:lb/loadBalancer:LoadBalancer":
                return new loadBalancer_1.LoadBalancer(name, undefined, { urn });
            case "azure:lb/natPool:NatPool":
                return new natPool_1.NatPool(name, undefined, { urn });
            case "azure:lb/natRule:NatRule":
                return new natRule_1.NatRule(name, undefined, { urn });
            case "azure:lb/outboundRule:OutboundRule":
                return new outboundRule_1.OutboundRule(name, undefined, { urn });
            case "azure:lb/probe:Probe":
                return new probe_1.Probe(name, undefined, { urn });
            case "azure:lb/rule:Rule":
                return new rule_1.Rule(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azure", "lb/backendAddressPool", _module);
pulumi.runtime.registerResourceModule("azure", "lb/backendAddressPoolAddress", _module);
pulumi.runtime.registerResourceModule("azure", "lb/loadBalancer", _module);
pulumi.runtime.registerResourceModule("azure", "lb/natPool", _module);
pulumi.runtime.registerResourceModule("azure", "lb/natRule", _module);
pulumi.runtime.registerResourceModule("azure", "lb/outboundRule", _module);
pulumi.runtime.registerResourceModule("azure", "lb/probe", _module);
pulumi.runtime.registerResourceModule("azure", "lb/rule", _module);
//# sourceMappingURL=index.js.map