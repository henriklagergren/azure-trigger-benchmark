"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReferenceInputMssql = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Stream Analytics Reference Input from MS SQL. Reference data (also known as a lookup table) is a finite data set that is static or slowly changing in nature, used to perform a lookup or to correlate with your data stream. Learn more [here](https://docs.microsoft.com/en-us/azure/stream-analytics/stream-analytics-use-reference-data#azure-sql-database).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = azure.core.getResourceGroup({
 *     name: "example-resources",
 * });
 * const exampleJob = azure.streamanalytics.getJob({
 *     name: "example-job",
 *     resourceGroupName: azurerm_resource_group.example.name,
 * });
 * const exampleServer = new azure.mssql.Server("exampleServer", {
 *     resourceGroupName: azurerm_resource_group.example.name,
 *     location: azurerm_resource_group.example.location,
 *     version: "12.0",
 *     administratorLogin: "admin",
 *     administratorLoginPassword: "password",
 * });
 * const exampleDatabase = new azure.mssql.Database("exampleDatabase", {serverId: exampleServer.id});
 * const exampleReferenceInputMssql = new azure.streamanalytics.ReferenceInputMssql("exampleReferenceInputMssql", {
 *     resourceGroupName: azurerm_stream_analytics_job.example.resource_group_name,
 *     streamAnalyticsJobName: azurerm_stream_analytics_job.example.name,
 *     server: exampleServer.fullyQualifiedDomainName,
 *     database: exampleDatabase.name,
 *     username: "exampleuser",
 *     password: "examplepassword",
 *     refreshType: "RefreshPeriodicallyWithFull",
 *     refreshIntervalDuration: "00:20:00",
 *     fullSnapshotQuery: `    SELECT *
 *     INTO [YourOutputAlias]
 *     FROM [YourInputAlias]
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * Stream Analytics can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:streamanalytics/referenceInputMssql:ReferenceInputMssql example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.StreamAnalytics/streamingjobs/job1/inputs/input1
 * ```
 */
class ReferenceInputMssql extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["database"] = state ? state.database : undefined;
            resourceInputs["deltaSnapshotQuery"] = state ? state.deltaSnapshotQuery : undefined;
            resourceInputs["fullSnapshotQuery"] = state ? state.fullSnapshotQuery : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["refreshIntervalDuration"] = state ? state.refreshIntervalDuration : undefined;
            resourceInputs["refreshType"] = state ? state.refreshType : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["streamAnalyticsJobName"] = state ? state.streamAnalyticsJobName : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.database === undefined) && !opts.urn) {
                throw new Error("Missing required property 'database'");
            }
            if ((!args || args.fullSnapshotQuery === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fullSnapshotQuery'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.refreshType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'refreshType'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.server === undefined) && !opts.urn) {
                throw new Error("Missing required property 'server'");
            }
            if ((!args || args.streamAnalyticsJobName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'streamAnalyticsJobName'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["database"] = args ? args.database : undefined;
            resourceInputs["deltaSnapshotQuery"] = args ? args.deltaSnapshotQuery : undefined;
            resourceInputs["fullSnapshotQuery"] = args ? args.fullSnapshotQuery : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["refreshIntervalDuration"] = args ? args.refreshIntervalDuration : undefined;
            resourceInputs["refreshType"] = args ? args.refreshType : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["streamAnalyticsJobName"] = args ? args.streamAnalyticsJobName : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ReferenceInputMssql.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing ReferenceInputMssql resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ReferenceInputMssql(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ReferenceInputMssql.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReferenceInputMssql.__pulumiType;
    }
}
exports.ReferenceInputMssql = ReferenceInputMssql;
/** @internal */
ReferenceInputMssql.__pulumiType = 'azure:streamanalytics/referenceInputMssql:ReferenceInputMssql';
//# sourceMappingURL=referenceInputMssql.js.map