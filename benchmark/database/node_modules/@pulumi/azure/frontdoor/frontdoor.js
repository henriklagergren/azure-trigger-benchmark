"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Frontdoor = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Azure Front Door instance.
 *
 * Azure Front Door Service is Microsoft's highly available and scalable web application acceleration platform and global HTTP(s) load balancer. It provides built-in DDoS protection and application layer security and caching. Front Door enables you to build applications that maximize and automate high-availability and performance for your end-users. Use Front Door with Azure services including Web/Mobile Apps, Cloud Services and Virtual Machines â€“ or combine it with on-premises services for hybrid deployments and smooth cloud migration.
 *
 * Below are some of the key scenarios that Azure Front Door Service addresses:
 *
 * * Use Front Door to improve application scale and availability with instant multi-region failover
 * * Use Front Door to improve application performance with SSL offload and routing requests to the fastest available application backend.
 * * Use Front Door for application layer security and DDoS protection for your application.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleFrontdoor = new azure.frontdoor.Frontdoor("exampleFrontdoor", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     enforceBackendPoolsCertificateNameCheck: false,
 *     routingRules: [{
 *         name: "exampleRoutingRule1",
 *         acceptedProtocols: [
 *             "Http",
 *             "Https",
 *         ],
 *         patternsToMatches: ["/*"],
 *         frontendEndpoints: ["exampleFrontendEndpoint1"],
 *         forwardingConfiguration: {
 *             forwardingProtocol: "MatchRequest",
 *             backendPoolName: "exampleBackendBing",
 *         },
 *     }],
 *     backendPoolLoadBalancings: [{
 *         name: "exampleLoadBalancingSettings1",
 *     }],
 *     backendPoolHealthProbes: [{
 *         name: "exampleHealthProbeSetting1",
 *     }],
 *     backendPools: [{
 *         name: "exampleBackendBing",
 *         backends: [{
 *             hostHeader: "www.bing.com",
 *             address: "www.bing.com",
 *             httpPort: 80,
 *             httpsPort: 443,
 *         }],
 *         loadBalancingName: "exampleLoadBalancingSettings1",
 *         healthProbeName: "exampleHealthProbeSetting1",
 *     }],
 *     frontendEndpoints: [{
 *         name: "exampleFrontendEndpoint1",
 *         hostName: "example-FrontDoor.azurefd.net",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Front Doors can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:frontdoor/frontdoor:Frontdoor example /subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/mygroup1/providers/Microsoft.Network/frontDoors/frontdoor1
 * ```
 */
class Frontdoor extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["backendPoolHealthProbes"] = state ? state.backendPoolHealthProbes : undefined;
            resourceInputs["backendPoolHealthProbesMap"] = state ? state.backendPoolHealthProbesMap : undefined;
            resourceInputs["backendPoolLoadBalancingSettingsMap"] = state ? state.backendPoolLoadBalancingSettingsMap : undefined;
            resourceInputs["backendPoolLoadBalancings"] = state ? state.backendPoolLoadBalancings : undefined;
            resourceInputs["backendPools"] = state ? state.backendPools : undefined;
            resourceInputs["backendPoolsMap"] = state ? state.backendPoolsMap : undefined;
            resourceInputs["backendPoolsSendReceiveTimeoutSeconds"] = state ? state.backendPoolsSendReceiveTimeoutSeconds : undefined;
            resourceInputs["cname"] = state ? state.cname : undefined;
            resourceInputs["enforceBackendPoolsCertificateNameCheck"] = state ? state.enforceBackendPoolsCertificateNameCheck : undefined;
            resourceInputs["explicitResourceOrders"] = state ? state.explicitResourceOrders : undefined;
            resourceInputs["friendlyName"] = state ? state.friendlyName : undefined;
            resourceInputs["frontendEndpoints"] = state ? state.frontendEndpoints : undefined;
            resourceInputs["frontendEndpointsMap"] = state ? state.frontendEndpointsMap : undefined;
            resourceInputs["headerFrontdoorId"] = state ? state.headerFrontdoorId : undefined;
            resourceInputs["loadBalancerEnabled"] = state ? state.loadBalancerEnabled : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["routingRules"] = state ? state.routingRules : undefined;
            resourceInputs["routingRulesMap"] = state ? state.routingRulesMap : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.backendPoolHealthProbes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendPoolHealthProbes'");
            }
            if ((!args || args.backendPoolLoadBalancings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendPoolLoadBalancings'");
            }
            if ((!args || args.backendPools === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backendPools'");
            }
            if ((!args || args.enforceBackendPoolsCertificateNameCheck === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enforceBackendPoolsCertificateNameCheck'");
            }
            if ((!args || args.frontendEndpoints === undefined) && !opts.urn) {
                throw new Error("Missing required property 'frontendEndpoints'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.routingRules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routingRules'");
            }
            resourceInputs["backendPoolHealthProbes"] = args ? args.backendPoolHealthProbes : undefined;
            resourceInputs["backendPoolLoadBalancings"] = args ? args.backendPoolLoadBalancings : undefined;
            resourceInputs["backendPools"] = args ? args.backendPools : undefined;
            resourceInputs["backendPoolsSendReceiveTimeoutSeconds"] = args ? args.backendPoolsSendReceiveTimeoutSeconds : undefined;
            resourceInputs["enforceBackendPoolsCertificateNameCheck"] = args ? args.enforceBackendPoolsCertificateNameCheck : undefined;
            resourceInputs["friendlyName"] = args ? args.friendlyName : undefined;
            resourceInputs["frontendEndpoints"] = args ? args.frontendEndpoints : undefined;
            resourceInputs["loadBalancerEnabled"] = args ? args.loadBalancerEnabled : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["routingRules"] = args ? args.routingRules : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["backendPoolHealthProbesMap"] = undefined /*out*/;
            resourceInputs["backendPoolLoadBalancingSettingsMap"] = undefined /*out*/;
            resourceInputs["backendPoolsMap"] = undefined /*out*/;
            resourceInputs["cname"] = undefined /*out*/;
            resourceInputs["explicitResourceOrders"] = undefined /*out*/;
            resourceInputs["frontendEndpointsMap"] = undefined /*out*/;
            resourceInputs["headerFrontdoorId"] = undefined /*out*/;
            resourceInputs["routingRulesMap"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Frontdoor.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Frontdoor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Frontdoor(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Frontdoor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Frontdoor.__pulumiType;
    }
}
exports.Frontdoor = Frontdoor;
/** @internal */
Frontdoor.__pulumiType = 'azure:frontdoor/frontdoor:Frontdoor';
//# sourceMappingURL=frontdoor.js.map