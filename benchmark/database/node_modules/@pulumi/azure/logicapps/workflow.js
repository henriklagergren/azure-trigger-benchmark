"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Workflow = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Logic App Workflow.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleWorkflow = new azure.logicapps.Workflow("exampleWorkflow", {
 *     location: exampleResourceGroup.location,
 *     resourceGroupName: exampleResourceGroup.name,
 * });
 * ```
 *
 * ## Import
 *
 * Logic App Workflows can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:logicapps/workflow:Workflow workflow1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Logic/workflows/workflow1
 * ```
 */
class Workflow extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["accessControl"] = state ? state.accessControl : undefined;
            resourceInputs["accessEndpoint"] = state ? state.accessEndpoint : undefined;
            resourceInputs["connectorEndpointIpAddresses"] = state ? state.connectorEndpointIpAddresses : undefined;
            resourceInputs["connectorOutboundIpAddresses"] = state ? state.connectorOutboundIpAddresses : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["identity"] = state ? state.identity : undefined;
            resourceInputs["integrationServiceEnvironmentId"] = state ? state.integrationServiceEnvironmentId : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["logicAppIntegrationAccountId"] = state ? state.logicAppIntegrationAccountId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["workflowEndpointIpAddresses"] = state ? state.workflowEndpointIpAddresses : undefined;
            resourceInputs["workflowOutboundIpAddresses"] = state ? state.workflowOutboundIpAddresses : undefined;
            resourceInputs["workflowParameters"] = state ? state.workflowParameters : undefined;
            resourceInputs["workflowSchema"] = state ? state.workflowSchema : undefined;
            resourceInputs["workflowVersion"] = state ? state.workflowVersion : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            resourceInputs["accessControl"] = args ? args.accessControl : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["identity"] = args ? args.identity : undefined;
            resourceInputs["integrationServiceEnvironmentId"] = args ? args.integrationServiceEnvironmentId : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["logicAppIntegrationAccountId"] = args ? args.logicAppIntegrationAccountId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["workflowParameters"] = args ? args.workflowParameters : undefined;
            resourceInputs["workflowSchema"] = args ? args.workflowSchema : undefined;
            resourceInputs["workflowVersion"] = args ? args.workflowVersion : undefined;
            resourceInputs["accessEndpoint"] = undefined /*out*/;
            resourceInputs["connectorEndpointIpAddresses"] = undefined /*out*/;
            resourceInputs["connectorOutboundIpAddresses"] = undefined /*out*/;
            resourceInputs["workflowEndpointIpAddresses"] = undefined /*out*/;
            resourceInputs["workflowOutboundIpAddresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Workflow.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Workflow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Workflow(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Workflow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Workflow.__pulumiType;
    }
}
exports.Workflow = Workflow;
/** @internal */
Workflow.__pulumiType = 'azure:logicapps/workflow:Workflow';
//# sourceMappingURL=workflow.js.map