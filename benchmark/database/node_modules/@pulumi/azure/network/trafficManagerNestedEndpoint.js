"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrafficManagerNestedEndpoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Nested Endpoint within a Traffic Manager Profile.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 *
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const examplePublicIp = new azure.network.PublicIp("examplePublicIp", {
 *     location: azurerm_resource_group.test.location,
 *     resourceGroupName: azurerm_resource_group.test.name,
 *     allocationMethod: "Static",
 *     domainNameLabel: "example-pip",
 * });
 * const parent = new azure.network.TrafficManagerProfile("parent", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     trafficRoutingMethod: "Weighted",
 *     dnsConfig: {
 *         relativeName: "parent-profile",
 *         ttl: 100,
 *     },
 *     monitorConfig: {
 *         protocol: "http",
 *         port: 80,
 *         path: "/",
 *         intervalInSeconds: 30,
 *         timeoutInSeconds: 9,
 *         toleratedNumberOfFailures: 3,
 *     },
 *     tags: {
 *         environment: "Production",
 *     },
 * });
 * const nested = new azure.network.TrafficManagerProfile("nested", {
 *     resourceGroupName: azurerm_resource_group.test.name,
 *     trafficRoutingMethod: "Priority",
 *     dnsConfig: {
 *         relativeName: "nested-profile",
 *         ttl: 30,
 *     },
 *     monitorConfig: {
 *         protocol: "https",
 *         port: 443,
 *         path: "/",
 *     },
 * });
 * const test = new azure.network.TrafficManagerNestedEndpoint("test", {
 *     targetResourceId: azurerm_traffic_manager_profile.child.id,
 *     priority: 1,
 *     profileId: parent.id,
 *     minChildEndpoints: 5,
 * });
 * ```
 *
 * ## Import
 *
 * Nested Endpoints can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:network/trafficManagerNestedEndpoint:TrafficManagerNestedEndpoint example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-resources/providers/Microsoft.Network/trafficManagerProfiles/example-profile/NestedEndpoints/example-endpoint
 * ```
 */
class TrafficManagerNestedEndpoint extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["customHeaders"] = state ? state.customHeaders : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["endpointLocation"] = state ? state.endpointLocation : undefined;
            resourceInputs["geoMappings"] = state ? state.geoMappings : undefined;
            resourceInputs["minimumChildEndpoints"] = state ? state.minimumChildEndpoints : undefined;
            resourceInputs["minimumRequiredChildEndpointsIpv4"] = state ? state.minimumRequiredChildEndpointsIpv4 : undefined;
            resourceInputs["minimumRequiredChildEndpointsIpv6"] = state ? state.minimumRequiredChildEndpointsIpv6 : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["profileId"] = state ? state.profileId : undefined;
            resourceInputs["subnets"] = state ? state.subnets : undefined;
            resourceInputs["targetResourceId"] = state ? state.targetResourceId : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.minimumChildEndpoints === undefined) && !opts.urn) {
                throw new Error("Missing required property 'minimumChildEndpoints'");
            }
            if ((!args || args.profileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'profileId'");
            }
            if ((!args || args.targetResourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResourceId'");
            }
            if ((!args || args.weight === undefined) && !opts.urn) {
                throw new Error("Missing required property 'weight'");
            }
            resourceInputs["customHeaders"] = args ? args.customHeaders : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["endpointLocation"] = args ? args.endpointLocation : undefined;
            resourceInputs["geoMappings"] = args ? args.geoMappings : undefined;
            resourceInputs["minimumChildEndpoints"] = args ? args.minimumChildEndpoints : undefined;
            resourceInputs["minimumRequiredChildEndpointsIpv4"] = args ? args.minimumRequiredChildEndpointsIpv4 : undefined;
            resourceInputs["minimumRequiredChildEndpointsIpv6"] = args ? args.minimumRequiredChildEndpointsIpv6 : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["profileId"] = args ? args.profileId : undefined;
            resourceInputs["subnets"] = args ? args.subnets : undefined;
            resourceInputs["targetResourceId"] = args ? args.targetResourceId : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficManagerNestedEndpoint.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing TrafficManagerNestedEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TrafficManagerNestedEndpoint(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TrafficManagerNestedEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficManagerNestedEndpoint.__pulumiType;
    }
}
exports.TrafficManagerNestedEndpoint = TrafficManagerNestedEndpoint;
/** @internal */
TrafficManagerNestedEndpoint.__pulumiType = 'azure:network/trafficManagerNestedEndpoint:TrafficManagerNestedEndpoint';
//# sourceMappingURL=trafficManagerNestedEndpoint.js.map