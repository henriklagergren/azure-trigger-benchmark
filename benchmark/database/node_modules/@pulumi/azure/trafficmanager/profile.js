"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Profile = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Traffic Manager Profile to which multiple endpoints can be attached.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azure from "@pulumi/azure";
 * import * as random from "@pulumi/random";
 *
 * const server = new random.RandomId("server", {
 *     keepers: {
 *         azi_id: 1,
 *     },
 *     byteLength: 8,
 * });
 * const exampleResourceGroup = new azure.core.ResourceGroup("exampleResourceGroup", {location: "West Europe"});
 * const exampleTrafficManagerProfile = new azure.network.TrafficManagerProfile("exampleTrafficManagerProfile", {
 *     resourceGroupName: exampleResourceGroup.name,
 *     trafficRoutingMethod: "Weighted",
 *     dnsConfig: {
 *         relativeName: server.hex,
 *         ttl: 100,
 *     },
 *     monitorConfig: {
 *         protocol: "http",
 *         port: 80,
 *         path: "/",
 *         intervalInSeconds: 30,
 *         timeoutInSeconds: 9,
 *         toleratedNumberOfFailures: 3,
 *     },
 *     tags: {
 *         environment: "Production",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Traffic Manager Profiles can be imported using the `resource id`, e.g.
 *
 * ```sh
 *  $ pulumi import azure:trafficmanager/profile:Profile exampleProfile /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.Network/trafficManagerProfiles/mytrafficmanagerprofile1
 * ```
 *
 * @deprecated azure.trafficmanager.Profile has been deprecated in favor of azure.network.TrafficManagerProfile
 */
class Profile extends pulumi.CustomResource {
    /** @deprecated azure.trafficmanager.Profile has been deprecated in favor of azure.network.TrafficManagerProfile */
    constructor(name, argsOrState, opts) {
        pulumi.log.warn("Profile is deprecated: azure.trafficmanager.Profile has been deprecated in favor of azure.network.TrafficManagerProfile");
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["dnsConfig"] = state ? state.dnsConfig : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["maxReturn"] = state ? state.maxReturn : undefined;
            resourceInputs["monitorConfig"] = state ? state.monitorConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["profileStatus"] = state ? state.profileStatus : undefined;
            resourceInputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trafficRoutingMethod"] = state ? state.trafficRoutingMethod : undefined;
            resourceInputs["trafficViewEnabled"] = state ? state.trafficViewEnabled : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dnsConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dnsConfig'");
            }
            if ((!args || args.monitorConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitorConfig'");
            }
            if ((!args || args.resourceGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if ((!args || args.trafficRoutingMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficRoutingMethod'");
            }
            resourceInputs["dnsConfig"] = args ? args.dnsConfig : undefined;
            resourceInputs["maxReturn"] = args ? args.maxReturn : undefined;
            resourceInputs["monitorConfig"] = args ? args.monitorConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["profileStatus"] = args ? args.profileStatus : undefined;
            resourceInputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trafficRoutingMethod"] = args ? args.trafficRoutingMethod : undefined;
            resourceInputs["trafficViewEnabled"] = args ? args.trafficViewEnabled : undefined;
            resourceInputs["fqdn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Profile.__pulumiType, name, resourceInputs, opts);
    }
    /**
     * Get an existing Profile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        pulumi.log.warn("Profile is deprecated: azure.trafficmanager.Profile has been deprecated in favor of azure.network.TrafficManagerProfile");
        return new Profile(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Profile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Profile.__pulumiType;
    }
}
exports.Profile = Profile;
/** @internal */
Profile.__pulumiType = 'azure:trafficmanager/profile:Profile';
//# sourceMappingURL=profile.js.map