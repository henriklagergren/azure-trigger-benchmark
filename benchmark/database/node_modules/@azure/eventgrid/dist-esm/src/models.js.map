{"version":3,"file":"models.js","sourceRoot":"","sources":["../../src/models.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AA4JlC;;GAEG;AACH,MAAM,CAAC,MAAM,+BAA+B,GAAG;IAC7C,aAAa;IACb,IAAI;IACJ,QAAQ;IACR,MAAM;IACN,iBAAiB;IACjB,YAAY;IACZ,SAAS;IACT,MAAM;IACN,MAAM;CACP,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * The shape of the input for EventGridProducerClient#sendEventGridEvents\n */\nexport interface SendEventGridEventInput<T> {\n  /**\n   * The type of the event.\n   */\n  eventType: string;\n  /**\n   * The time the event was generated. If not provided, the current time will be used.\n   */\n  eventTime?: Date;\n  /**\n   * An unique identifier for the event. If an ID is not provided, a random UUID will be generated\n   * and used.\n   */\n  id?: string;\n  /**\n   * The resource path of the event source.\n   */\n  topic?: string;\n  /**\n   * A resource path relative to the topic path.\n   */\n  subject: string;\n  /**\n   * The schema version of the data object.\n   */\n  dataVersion: string;\n  /**\n   * Event data specific to the event type.\n   */\n  data: T;\n}\n\n/**\n * An event in the in the Event Grid Schema.\n */\nexport interface EventGridEvent<T> {\n  /**\n   * The type of the event.\n   */\n  eventType: string;\n  /**\n   * The time the event was generated.\n   */\n  eventTime: Date;\n  /**\n   * An unique identifier for the event.\n   */\n  id: string;\n  /**\n   * The resource path of the event source.\n   */\n  topic?: string;\n  /**\n   * A resource path relative to the topic path.\n   */\n  subject: string;\n  /**\n   * The schema version of the data object.\n   */\n  dataVersion: string;\n  /**\n   * Event data specific to the event type.\n   */\n  data: T;\n}\n\n/**\n * * The shape of the input for EventGridProducerClient#sendCloudEvents\n */\nexport interface SendCloudEventInput<T> {\n  /**\n   * Type of event related to the originating occurrence.\n   */\n  type: string;\n  /**\n   * Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event.\n   */\n  source: string;\n  /**\n   * An identifier for the event. The combination of id and source must be unique for each distinct event. If an ID is not provided,\n   * a random UUID will be generated and used.\n   */\n  id?: string;\n  /**\n   * The time the event was generated. If not provided, the current time will be used.\n   */\n  time?: Date;\n  /**\n   * Identifies the schema that data adheres to.\n   */\n  dataschema?: string;\n  /**\n   * Content type of data value.\n   */\n  datacontenttype?: string;\n  /**\n   * Event data specific to the event type.\n   */\n  data?: T;\n  /**\n   * This describes the subject of the event in the context of the event producer (identified by source).\n   */\n  subject?: string;\n  /**\n   * Additional context attributes for the event. The Cloud Event specification refers to these as \"extension attributes\".\n   */\n  extensionAttributes?: Record<string, unknown>;\n}\n\n/**\n * An event in the Cloud Event 1.0 schema.\n */\nexport interface CloudEvent<T> {\n  /**\n   * Type of event related to the originating occurrence.\n   */\n  type: string;\n  /**\n   * Identifies the context in which an event happened. The combination of id and source must be unique for each distinct event.\n   */\n  source: string;\n  /**\n   * An identifier for the event. The combination of id and source must be unique for each distinct event.\n   */\n  id: string;\n  /**\n   * The time the event was generated.\n   */\n  time?: Date;\n  /**\n   * Identifies the schema that data adheres to.\n   */\n  dataschema?: string;\n  /**\n   * Content type of data value.\n   */\n  datacontenttype?: string;\n  /**\n   * Event data specific to the event type.\n   */\n  data?: T;\n  /**\n   * This describes the subject of the event in the context of the event producer (identified by source).\n   */\n  subject?: string;\n  /**\n   * Additional context attributes for the event. The Cloud Event specification refers to these as \"extension attributes\".\n   */\n  extensionAttributes?: Record<string, unknown>;\n}\n\n/**\n * Property names defined by the CloudEvents 1.0 specification, these may not be reused as the names of extension properties.\n */\nexport const cloudEventReservedPropertyNames = [\n  \"specversion\",\n  \"id\",\n  \"source\",\n  \"type\",\n  \"datacontenttype\",\n  \"dataschema\",\n  \"subject\",\n  \"time\",\n  \"data\",\n];\n\n/**\n * A function which provides custom logic to be used when decoding events.\n */\nexport type CustomEventDataDeserializer = (o: any) => Promise<any>;\n"]}