{"version":3,"file":"consumer.js","sourceRoot":"","sources":["../../src/consumer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createSerializer } from \"@azure/core-client\";\nimport { CloudEvent as WireCloudEvent } from \"./generated/models\";\nimport { CloudEvent, EventGridEvent, cloudEventReservedPropertyNames } from \"./models\";\nimport {\n  EventGridEvent as EventGridEventMapper,\n  CloudEvent as CloudEventMapper,\n} from \"./generated/models/mappers\";\nimport { parseAndWrap, validateEventGridEvent, validateCloudEventEvent } from \"./util\";\n\nconst serializer = createSerializer();\n\n/**\n * EventGridDeserializer is used to aid in processing events delivered by EventGrid. It can deserialize a JSON encoded payload\n * of either a single event or batch of events as well as be used to convert the result of `JSON.parse` into an\n * `EventGridEvent` or `CloudEvent` like object.\n *\n * Unlike normal JSON deseralization, EventGridDeserializer does some additional conversions:\n *\n * - The consumer parses the event time property into a `Date` object, for ease of use.\n * - When deserializing an event in the CloudEvent schema, if the event contains binary data, it is base64 decoded\n *   and returned as an instance of the `Uint8Array` type.\n */\nexport class EventGridDeserializer {\n  /**\n   * Deserializes events encoded in the Event Grid schema.\n   *\n   * @param encodedEvents - the JSON encoded representation of either a single event or an array of\n   * events, encoded in the Event Grid Schema.\n   */\n  public async deserializeEventGridEvents(\n    encodedEvents: string\n  ): Promise<EventGridEvent<unknown>[]>;\n\n  /**\n   * Deserializes events encoded in the Event Grid schema.\n   *\n   * @param encodedEvents - an object representing a single event, encoded in the Event Grid schema.\n   */\n  public async deserializeEventGridEvents(\n    encodedEvents: Record<string, unknown>\n  ): Promise<EventGridEvent<unknown>[]>;\n  public async deserializeEventGridEvents(\n    encodedEvents: string | Record<string, unknown>\n  ): Promise<EventGridEvent<unknown>[]> {\n    const decodedArray = parseAndWrap(encodedEvents);\n\n    const events: EventGridEvent<unknown>[] = [];\n\n    for (const o of decodedArray) {\n      validateEventGridEvent(o);\n\n      const deserialized: EventGridEvent<any> = serializer.deserialize(EventGridEventMapper, o, \"\");\n\n      events.push(deserialized as EventGridEvent<unknown>);\n    }\n\n    return events;\n  }\n\n  /**\n   * Deserializes events encoded in the Cloud Events 1.0 schema.\n   *\n   * @param encodedEvents - the JSON encoded representation of either a single event or an array of\n   * events, encoded in the Cloud Events 1.0 Schema.\n   */\n  public async deserializeCloudEvents(encodedEvents: string): Promise<CloudEvent<unknown>[]>;\n\n  /**\n   * Deserializes events encoded in the Cloud Events 1.0 schema.\n   *\n   * @param encodedEvents - an object representing a single event, encoded in the Cloud Events 1.0 schema.\n   */\n  public async deserializeCloudEvents(\n    encodedEvents: Record<string, unknown>\n  ): Promise<CloudEvent<unknown>[]>;\n  public async deserializeCloudEvents(\n    encodedEvents: string | Record<string, unknown>\n  ): Promise<CloudEvent<unknown>[]> {\n    const decodedArray = parseAndWrap(encodedEvents);\n\n    const events: CloudEvent<unknown>[] = [];\n\n    for (const o of decodedArray) {\n      validateCloudEventEvent(o);\n\n      // Check that the required fields are present and of the correct type and the optional fields are missing\n      // or of the correct type.\n\n      const deserialized: WireCloudEvent = serializer.deserialize(CloudEventMapper, o, \"\");\n      const modelEvent: Record<string, any> = {\n        specversion: deserialized.specversion,\n        id: deserialized.id,\n        source: deserialized.source,\n        type: deserialized.type,\n      };\n\n      if (deserialized.datacontenttype !== undefined) {\n        modelEvent.datacontenttype = deserialized.datacontenttype;\n      }\n\n      if (deserialized.dataschema !== undefined) {\n        modelEvent.dataschema = deserialized.dataschema;\n      }\n\n      if (deserialized.subject !== undefined) {\n        modelEvent.subject = deserialized.subject;\n      }\n\n      if (deserialized.time !== undefined) {\n        modelEvent.time = deserialized.time;\n      }\n\n      if (deserialized.data !== undefined) {\n        modelEvent.data = deserialized.data;\n      }\n\n      // If the data the event represents binary, it is encoded as base64 text in a different property on the event and we need to transform it.\n      if (deserialized.dataBase64 !== undefined) {\n        if (deserialized.data !== undefined) {\n          throw new TypeError(\"event contains both a data and data_base64 field\");\n        }\n\n        if (!(deserialized.dataBase64 instanceof Uint8Array)) {\n          throw new TypeError(\"event data_base64 property is not an instance of Uint8Array\");\n        }\n\n        modelEvent.data = deserialized.dataBase64;\n      }\n\n      // Build the \"extensionsAttributes\" property bag by removing all known top level properties.\n      const extensionAttributes = { ...deserialized };\n      for (const propName of cloudEventReservedPropertyNames) {\n        delete extensionAttributes[propName];\n      }\n      delete extensionAttributes.dataBase64;\n\n      // If any properties remain, copy them to the model.\n      if (Object.keys(extensionAttributes).length > 0) {\n        modelEvent.extensionAttributes = extensionAttributes;\n      }\n\n      events.push(modelEvent as CloudEvent<unknown>);\n    }\n\n    return events;\n  }\n}\n"]}