{"version":3,"file":"generatedClient.js","sourceRoot":"","sources":["../../../src/generated/generatedClient.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,KAAK,UAAU,MAAM,oBAAoB,CAAC;AACjD,OAAO,KAAK,UAAU,MAAM,qBAAqB,CAAC;AAClD,OAAO,KAAK,OAAO,MAAM,kBAAkB,CAAC;AAC5C,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAUlE,gBAAgB;AAChB,MAAM,OAAO,eAAgB,SAAQ,sBAAsB;IACzD;;;OAGG;IACH,YAAY,OAAuC;QACjD,KAAK,CAAC,OAAO,CAAC,CAAC;IACjB,CAAC;IAED;;;;;OAKG;IACH,aAAa,CACX,aAAqB,EACrB,MAAwB,EACxB,OAAoD;QAEpD,OAAO,IAAI,CAAC,oBAAoB,CAC9B,EAAE,aAAa,EAAE,MAAM,EAAE,OAAO,EAAE,EAClC,0BAA0B,CAC3B,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,uBAAuB,CACrB,aAAqB,EACrB,MAAoB,EACpB,OAA8D;QAE9D,OAAO,IAAI,CAAC,oBAAoB,CAC9B,EAAE,aAAa,EAAE,MAAM,EAAE,OAAO,EAAE,EAClC,oCAAoC,CACrC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,wBAAwB,CACtB,aAAqB,EACrB,MAAa,EACb,OAA+D;QAE/D,OAAO,IAAI,CAAC,oBAAoB,CAC9B,EAAE,aAAa,EAAE,MAAM,EAAE,OAAO,EAAE,EAClC,qCAAqC,CACtC,CAAC;IACJ,CAAC;CACF;AACD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,0BAA0B,GAA6B;IAC3D,IAAI,EAAE,EAAE;IACR,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACnC,WAAW,EAAE,UAAU,CAAC,MAAM;IAC9B,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;IACxC,aAAa,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC;IACzC,gBAAgB,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IAC1C,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AACF,MAAM,oCAAoC,GAA6B;IACrE,IAAI,EAAE,EAAE;IACR,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACnC,WAAW,EAAE,UAAU,CAAC,OAAO;IAC/B,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;IACxC,aAAa,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC;IACzC,gBAAgB,EAAE,CAAC,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,cAAc,CAAC;IACtE,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AACF,MAAM,qCAAqC,GAA6B;IACtE,IAAI,EAAE,EAAE;IACR,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;IACnC,WAAW,EAAE,UAAU,CAAC,OAAO;IAC/B,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;IACxC,aAAa,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC;IACzC,gBAAgB,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IAC1C,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport { GeneratedClientContext } from \"./generatedClientContext\";\nimport {\n  GeneratedClientOptionalParams,\n  EventGridEvent,\n  GeneratedClientPublishEventsOptionalParams,\n  CloudEvent,\n  GeneratedClientPublishCloudEventEventsOptionalParams,\n  GeneratedClientPublishCustomEventEventsOptionalParams\n} from \"./models\";\n\n/** @internal */\nexport class GeneratedClient extends GeneratedClientContext {\n  /**\n   * Initializes a new instance of the GeneratedClient class.\n   * @param options The parameter options\n   */\n  constructor(options?: GeneratedClientOptionalParams) {\n    super(options);\n  }\n\n  /**\n   * Publishes a batch of events to an Azure Event Grid topic.\n   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net\n   * @param events An array of events to be published to Event Grid.\n   * @param options The options parameters.\n   */\n  publishEvents(\n    topicHostname: string,\n    events: EventGridEvent[],\n    options?: GeneratedClientPublishEventsOptionalParams\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { topicHostname, events, options },\n      publishEventsOperationSpec\n    );\n  }\n\n  /**\n   * Publishes a batch of events to an Azure Event Grid topic.\n   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net\n   * @param events An array of events to be published to Event Grid.\n   * @param options The options parameters.\n   */\n  publishCloudEventEvents(\n    topicHostname: string,\n    events: CloudEvent[],\n    options?: GeneratedClientPublishCloudEventEventsOptionalParams\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { topicHostname, events, options },\n      publishCloudEventEventsOperationSpec\n    );\n  }\n\n  /**\n   * Publishes a batch of events to an Azure Event Grid topic.\n   * @param topicHostname The host name of the topic, e.g. topic1.westus2-1.eventgrid.azure.net\n   * @param events An array of events to be published to Event Grid.\n   * @param options The options parameters.\n   */\n  publishCustomEventEvents(\n    topicHostname: string,\n    events: any[],\n    options?: GeneratedClientPublishCustomEventEventsOptionalParams\n  ): Promise<void> {\n    return this.sendOperationRequest(\n      { topicHostname, events, options },\n      publishCustomEventEventsOperationSpec\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst publishEventsOperationSpec: coreClient.OperationSpec = {\n  path: \"\",\n  httpMethod: \"POST\",\n  responses: { 200: {}, default: {} },\n  requestBody: Parameters.events,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.topicHostname],\n  headerParameters: [Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\nconst publishCloudEventEventsOperationSpec: coreClient.OperationSpec = {\n  path: \"\",\n  httpMethod: \"POST\",\n  responses: { 200: {}, default: {} },\n  requestBody: Parameters.events1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.topicHostname],\n  headerParameters: [Parameters.contentType1, Parameters.aegChannelName],\n  mediaType: \"json\",\n  serializer\n};\nconst publishCustomEventEventsOperationSpec: coreClient.OperationSpec = {\n  path: \"\",\n  httpMethod: \"POST\",\n  responses: { 200: {}, default: {} },\n  requestBody: Parameters.events2,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.topicHostname],\n  headerParameters: [Parameters.contentType],\n  mediaType: \"json\",\n  serializer\n};\n"]}