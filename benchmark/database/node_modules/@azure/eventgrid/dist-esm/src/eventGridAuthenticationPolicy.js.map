{"version":3,"file":"eventGridAuthenticationPolicy.js","sourceRoot":"","sources":["../../src/eventGridAuthenticationPolicy.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAUlC,OAAO,EAAE,mBAAmB,EAAE,MAAM,QAAQ,CAAC;AAE7C;;GAEG;AACH,MAAM,mBAAmB,GAAG,aAAa,CAAC;AAE1C;;GAEG;AACH,MAAM,qBAAqB,GAAG,eAAe,CAAC;AAE9C;;GAEG;AACH,MAAM,CAAC,MAAM,6BAA6B,GAAG,2BAA2B,CAAC;AAEzE;;;GAGG;AACH,MAAM,UAAU,yBAAyB,CACvC,UAAyC;IAEzC,OAAO;QACL,IAAI,EAAE,6BAA6B;QACnC,KAAK,CAAC,WAAW,CAAC,OAAwB,EAAE,IAAiB;YAC3D,IAAI,mBAAmB,CAAC,UAAU,CAAC,EAAE;gBACnC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;aAC1D;iBAAM;gBACL,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;aAClE;YAED,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;QACvB,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential, SASCredential } from \"@azure/core-auth\";\nimport {\n  PipelineResponse,\n  PipelineRequest,\n  SendRequest,\n  PipelinePolicy,\n} from \"@azure/core-rest-pipeline\";\n\nimport { isKeyCredentialLike } from \"./util\";\n\n/**\n * The name of the header to include when a Shared Key is used for authentication.\n */\nconst API_KEY_HEADER_NAME = \"aeg-sas-key\";\n\n/**\n * The name of the header to include when Shared Access Signature is used for authentication.\n */\nconst SAS_TOKEN_HEADER_NAME = \"aeg-sas-token\";\n\n/**\n * The programmatic identifier of the eventGridCredentialPolicy.\n */\nexport const eventGridCredentialPolicyName = \"eventGridCredentialPolicy\";\n\n/**\n * A concrete implementation of an AzureKeyCredential policy\n * using the appropriate header for Event Grid\n */\nexport function eventGridCredentialPolicy(\n  credential: KeyCredential | SASCredential\n): PipelinePolicy {\n  return {\n    name: eventGridCredentialPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (isKeyCredentialLike(credential)) {\n        request.headers.set(API_KEY_HEADER_NAME, credential.key);\n      } else {\n        request.headers.set(SAS_TOKEN_HEADER_NAME, credential.signature);\n      }\n\n      return next(request);\n    },\n  };\n}\n"]}